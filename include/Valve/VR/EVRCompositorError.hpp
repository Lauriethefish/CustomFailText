// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:10 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.Enum
#include "System/Enum.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Autogenerated type: Valve.VR.EVRCompositorError
  struct EVRCompositorError : public System::Enum {
    public:
    // public System.Int32 value__
    // Offset: 0x0
    int value;
    // static field const value: static public Valve.VR.EVRCompositorError None
    static constexpr const int None = 0;
    // Get static field: static public Valve.VR.EVRCompositorError None
    static Valve::VR::EVRCompositorError _get_None();
    // Set static field: static public Valve.VR.EVRCompositorError None
    static void _set_None(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError RequestFailed
    static constexpr const int RequestFailed = 1;
    // Get static field: static public Valve.VR.EVRCompositorError RequestFailed
    static Valve::VR::EVRCompositorError _get_RequestFailed();
    // Set static field: static public Valve.VR.EVRCompositorError RequestFailed
    static void _set_RequestFailed(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError IncompatibleVersion
    static constexpr const int IncompatibleVersion = 100;
    // Get static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
    static Valve::VR::EVRCompositorError _get_IncompatibleVersion();
    // Set static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
    static void _set_IncompatibleVersion(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError DoNotHaveFocus
    static constexpr const int DoNotHaveFocus = 101;
    // Get static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
    static Valve::VR::EVRCompositorError _get_DoNotHaveFocus();
    // Set static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
    static void _set_DoNotHaveFocus(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError InvalidTexture
    static constexpr const int InvalidTexture = 102;
    // Get static field: static public Valve.VR.EVRCompositorError InvalidTexture
    static Valve::VR::EVRCompositorError _get_InvalidTexture();
    // Set static field: static public Valve.VR.EVRCompositorError InvalidTexture
    static void _set_InvalidTexture(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError IsNotSceneApplication
    static constexpr const int IsNotSceneApplication = 103;
    // Get static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
    static Valve::VR::EVRCompositorError _get_IsNotSceneApplication();
    // Set static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
    static void _set_IsNotSceneApplication(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
    static constexpr const int TextureIsOnWrongDevice = 104;
    // Get static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
    static Valve::VR::EVRCompositorError _get_TextureIsOnWrongDevice();
    // Set static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
    static void _set_TextureIsOnWrongDevice(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
    static constexpr const int TextureUsesUnsupportedFormat = 105;
    // Get static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
    static Valve::VR::EVRCompositorError _get_TextureUsesUnsupportedFormat();
    // Set static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
    static void _set_TextureUsesUnsupportedFormat(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
    static constexpr const int SharedTexturesNotSupported = 106;
    // Get static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
    static Valve::VR::EVRCompositorError _get_SharedTexturesNotSupported();
    // Set static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
    static void _set_SharedTexturesNotSupported(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError IndexOutOfRange
    static constexpr const int IndexOutOfRange = 107;
    // Get static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
    static Valve::VR::EVRCompositorError _get_IndexOutOfRange();
    // Set static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
    static void _set_IndexOutOfRange(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError AlreadySubmitted
    static constexpr const int AlreadySubmitted = 108;
    // Get static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
    static Valve::VR::EVRCompositorError _get_AlreadySubmitted();
    // Set static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
    static void _set_AlreadySubmitted(Valve::VR::EVRCompositorError value);
    // static field const value: static public Valve.VR.EVRCompositorError InvalidBounds
    static constexpr const int InvalidBounds = 109;
    // Get static field: static public Valve.VR.EVRCompositorError InvalidBounds
    static Valve::VR::EVRCompositorError _get_InvalidBounds();
    // Set static field: static public Valve.VR.EVRCompositorError InvalidBounds
    static void _set_InvalidBounds(Valve::VR::EVRCompositorError value);
    // Creating value type constructor for type: EVRCompositorError
    EVRCompositorError(int value_ = {}) : value{value_} {}
  }; // Valve.VR.EVRCompositorError
}
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::EVRCompositorError, "Valve.VR", "EVRCompositorError");
#pragma pack(pop)
