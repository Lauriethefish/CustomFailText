// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:11 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Valve.VR.HmdVector3_t
#include "Valve/VR/HmdVector3_t.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Autogenerated type: Valve.VR.VROverlayIntersectionResults_t
  struct VROverlayIntersectionResults_t : public System::ValueType {
    public:
    // public Valve.VR.HmdVector3_t vPoint
    // Offset: 0x0
    Valve::VR::HmdVector3_t vPoint;
    // public Valve.VR.HmdVector3_t vNormal
    // Offset: 0xC
    Valve::VR::HmdVector3_t vNormal;
    // public Valve.VR.HmdVector2_t vUVs
    // Offset: 0x18
    Valve::VR::HmdVector2_t vUVs;
    // public System.Single fDistance
    // Offset: 0x20
    float fDistance;
    // Creating value type constructor for type: VROverlayIntersectionResults_t
    VROverlayIntersectionResults_t(Valve::VR::HmdVector3_t vPoint_ = {}, Valve::VR::HmdVector3_t vNormal_ = {}, Valve::VR::HmdVector2_t vUVs_ = {}, float fDistance_ = {}) : vPoint{vPoint_}, vNormal{vNormal_}, vUVs{vUVs_}, fDistance{fDistance_} {}
  }; // Valve.VR.VROverlayIntersectionResults_t
}
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::VROverlayIntersectionResults_t, "Valve.VR", "VROverlayIntersectionResults_t");
#pragma pack(pop)
