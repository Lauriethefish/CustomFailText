// Autogenerated from CppHeaderCreator on 7/24/2020 3:59:59 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.IKSolverVR/Locomotion
  class IKSolverVR::Locomotion : public ::Il2CppObject {
    public:
    // public System.Single weight
    // Offset: 0x10
    float weight;
    // public System.Single footDistance
    // Offset: 0x14
    float footDistance;
    // public System.Single stepThreshold
    // Offset: 0x18
    float stepThreshold;
    // public System.Single angleThreshold
    // Offset: 0x1C
    float angleThreshold;
    // public System.Single comAngleMlp
    // Offset: 0x20
    float comAngleMlp;
    // public System.Single maxVelocity
    // Offset: 0x24
    float maxVelocity;
    // public System.Single velocityFactor
    // Offset: 0x28
    float velocityFactor;
    // public System.Single maxLegStretch
    // Offset: 0x2C
    float maxLegStretch;
    // public System.Single rootSpeed
    // Offset: 0x30
    float rootSpeed;
    // public System.Single stepSpeed
    // Offset: 0x34
    float stepSpeed;
    // public UnityEngine.AnimationCurve stepHeight
    // Offset: 0x38
    UnityEngine::AnimationCurve* stepHeight;
    // public UnityEngine.AnimationCurve heelHeight
    // Offset: 0x40
    UnityEngine::AnimationCurve* heelHeight;
    // public System.Single relaxLegTwistMinAngle
    // Offset: 0x48
    float relaxLegTwistMinAngle;
    // public System.Single relaxLegTwistSpeed
    // Offset: 0x4C
    float relaxLegTwistSpeed;
    // public RootMotion.InterpolationMode stepInterpolation
    // Offset: 0x50
    RootMotion::InterpolationMode stepInterpolation;
    // public UnityEngine.Vector3 offset
    // Offset: 0x54
    UnityEngine::Vector3 offset;
    // public System.Boolean blockingEnabled
    // Offset: 0x60
    bool blockingEnabled;
    // public UnityEngine.LayerMask blockingLayers
    // Offset: 0x64
    UnityEngine::LayerMask blockingLayers;
    // public System.Single raycastRadius
    // Offset: 0x68
    float raycastRadius;
    // public System.Single raycastHeight
    // Offset: 0x6C
    float raycastHeight;
    // public UnityEngine.Events.UnityEvent onLeftFootstep
    // Offset: 0x70
    UnityEngine::Events::UnityEvent* onLeftFootstep;
    // public UnityEngine.Events.UnityEvent onRightFootstep
    // Offset: 0x78
    UnityEngine::Events::UnityEvent* onRightFootstep;
    // private UnityEngine.Vector3 <centerOfMass>k__BackingField
    // Offset: 0x80
    UnityEngine::Vector3 centerOfMass;
    // private RootMotion.FinalIK.IKSolverVR/Footstep[] footsteps
    // Offset: 0x90
    ::Array<RootMotion::FinalIK::IKSolverVR::Footstep*>* footsteps;
    // private UnityEngine.Vector3 lastComPosition
    // Offset: 0x98
    UnityEngine::Vector3 lastComPosition;
    // private UnityEngine.Vector3 comVelocity
    // Offset: 0xA4
    UnityEngine::Vector3 comVelocity;
    // private System.Int32 leftFootIndex
    // Offset: 0xB0
    int leftFootIndex;
    // private System.Int32 rightFootIndex
    // Offset: 0xB4
    int rightFootIndex;
    // public UnityEngine.Vector3 get_centerOfMass()
    // Offset: 0x142ADD4
    UnityEngine::Vector3 get_centerOfMass();
    // private System.Void set_centerOfMass(UnityEngine.Vector3 value)
    // Offset: 0x142ADE0
    void set_centerOfMass(UnityEngine::Vector3 value);
    // public System.Void Initiate(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasToes)
    // Offset: 0x142ADEC
    void Initiate(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasToes);
    // public System.Void Reset(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations)
    // Offset: 0x142B104
    void Reset(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations);
    // public System.Void AddDeltaRotation(UnityEngine.Quaternion delta, UnityEngine.Vector3 pivot)
    // Offset: 0x142B378
    void AddDeltaRotation(UnityEngine::Quaternion delta, UnityEngine::Vector3 pivot);
    // public System.Void AddDeltaPosition(UnityEngine.Vector3 delta)
    // Offset: 0x142B750
    void AddDeltaPosition(UnityEngine::Vector3 delta);
    // public System.Void Solve(RootMotion.FinalIK.IKSolverVR/VirtualBone rootBone, RootMotion.FinalIK.IKSolverVR/Spine spine, RootMotion.FinalIK.IKSolverVR/Leg leftLeg, RootMotion.FinalIK.IKSolverVR/Leg rightLeg, RootMotion.FinalIK.IKSolverVR/Arm leftArm, RootMotion.FinalIK.IKSolverVR/Arm rightArm, System.Int32 supportLegIndex, UnityEngine.Vector3 leftFootPosition, UnityEngine.Vector3 rightFootPosition, UnityEngine.Quaternion leftFootRotation, UnityEngine.Quaternion rightFootRotation, System.Single leftFootOffset, System.Single rightFootOffset, System.Single leftHeelOffset, System.Single rightHeelOffset)
    // Offset: 0x142B900
    void Solve(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, RootMotion::FinalIK::IKSolverVR::Spine* spine, RootMotion::FinalIK::IKSolverVR::Leg* leftLeg, RootMotion::FinalIK::IKSolverVR::Leg* rightLeg, RootMotion::FinalIK::IKSolverVR::Arm* leftArm, RootMotion::FinalIK::IKSolverVR::Arm* rightArm, int supportLegIndex, UnityEngine::Vector3& leftFootPosition, UnityEngine::Vector3& rightFootPosition, UnityEngine::Quaternion& leftFootRotation, UnityEngine::Quaternion& rightFootRotation, float& leftFootOffset, float& rightFootOffset, float& leftHeelOffset, float& rightHeelOffset);
    // public UnityEngine.Vector3 get_leftFootstepPosition()
    // Offset: 0x142D2DC
    UnityEngine::Vector3 get_leftFootstepPosition();
    // public UnityEngine.Vector3 get_rightFootstepPosition()
    // Offset: 0x142D31C
    UnityEngine::Vector3 get_rightFootstepPosition();
    // public UnityEngine.Quaternion get_leftFootstepRotation()
    // Offset: 0x142D360
    UnityEngine::Quaternion get_leftFootstepRotation();
    // public UnityEngine.Quaternion get_rightFootstepRotation()
    // Offset: 0x142D3A0
    UnityEngine::Quaternion get_rightFootstepRotation();
    // private System.Boolean StepBlocked(UnityEngine.Vector3 fromPosition, UnityEngine.Vector3 toPosition, UnityEngine.Vector3 rootPosition)
    // Offset: 0x142CEE8
    bool StepBlocked(UnityEngine::Vector3 fromPosition, UnityEngine::Vector3 toPosition, UnityEngine::Vector3 rootPosition);
    // private System.Boolean CanStep()
    // Offset: 0x142D08C
    bool CanStep();
    // static private System.Boolean GetLineSphereCollision(UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd, UnityEngine.Vector3 sphereCenter, System.Single sphereRadius)
    // Offset: 0x142D110
    static bool GetLineSphereCollision(UnityEngine::Vector3 lineStart, UnityEngine::Vector3 lineEnd, UnityEngine::Vector3 sphereCenter, float sphereRadius);
    // public System.Void .ctor()
    // Offset: 0x142D3E4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static IKSolverVR::Locomotion* New_ctor();
  }; // RootMotion.FinalIK.IKSolverVR/Locomotion
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverVR::Locomotion*, "RootMotion.FinalIK", "IKSolverVR/Locomotion");
#pragma pack(pop)
