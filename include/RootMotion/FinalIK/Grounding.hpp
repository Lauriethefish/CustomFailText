// Autogenerated from CppHeaderCreator on 7/24/2020 3:59:58 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.Grounding
  class Grounding : public ::Il2CppObject {
    public:
    // Nested type: RootMotion::FinalIK::Grounding::Quality
    struct Quality;
    // Nested type: RootMotion::FinalIK::Grounding::Leg
    class Leg;
    // Nested type: RootMotion::FinalIK::Grounding::Pelvis
    class Pelvis;
    // Autogenerated type: RootMotion.FinalIK.Grounding/Quality
    struct Quality : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public RootMotion.FinalIK.Grounding/Quality Fastest
      static constexpr const int Fastest = 0;
      // Get static field: static public RootMotion.FinalIK.Grounding/Quality Fastest
      static RootMotion::FinalIK::Grounding::Quality _get_Fastest();
      // Set static field: static public RootMotion.FinalIK.Grounding/Quality Fastest
      static void _set_Fastest(RootMotion::FinalIK::Grounding::Quality value);
      // static field const value: static public RootMotion.FinalIK.Grounding/Quality Simple
      static constexpr const int Simple = 1;
      // Get static field: static public RootMotion.FinalIK.Grounding/Quality Simple
      static RootMotion::FinalIK::Grounding::Quality _get_Simple();
      // Set static field: static public RootMotion.FinalIK.Grounding/Quality Simple
      static void _set_Simple(RootMotion::FinalIK::Grounding::Quality value);
      // static field const value: static public RootMotion.FinalIK.Grounding/Quality Best
      static constexpr const int Best = 2;
      // Get static field: static public RootMotion.FinalIK.Grounding/Quality Best
      static RootMotion::FinalIK::Grounding::Quality _get_Best();
      // Set static field: static public RootMotion.FinalIK.Grounding/Quality Best
      static void _set_Best(RootMotion::FinalIK::Grounding::Quality value);
      // Creating value type constructor for type: Quality
      Quality(int value_ = {}) : value{value_} {}
    }; // RootMotion.FinalIK.Grounding/Quality
    // public UnityEngine.LayerMask layers
    // Offset: 0x10
    UnityEngine::LayerMask layers;
    // public System.Single maxStep
    // Offset: 0x14
    float maxStep;
    // public System.Single heightOffset
    // Offset: 0x18
    float heightOffset;
    // public System.Single footSpeed
    // Offset: 0x1C
    float footSpeed;
    // public System.Single footRadius
    // Offset: 0x20
    float footRadius;
    // public System.Single footCenterOffset
    // Offset: 0x24
    float footCenterOffset;
    // public System.Single prediction
    // Offset: 0x28
    float prediction;
    // public System.Single footRotationWeight
    // Offset: 0x2C
    float footRotationWeight;
    // public System.Single footRotationSpeed
    // Offset: 0x30
    float footRotationSpeed;
    // public System.Single maxFootRotationAngle
    // Offset: 0x34
    float maxFootRotationAngle;
    // public System.Boolean rotateSolver
    // Offset: 0x38
    bool rotateSolver;
    // public System.Single pelvisSpeed
    // Offset: 0x3C
    float pelvisSpeed;
    // public System.Single pelvisDamper
    // Offset: 0x40
    float pelvisDamper;
    // public System.Single lowerPelvisWeight
    // Offset: 0x44
    float lowerPelvisWeight;
    // public System.Single liftPelvisWeight
    // Offset: 0x48
    float liftPelvisWeight;
    // public System.Single rootSphereCastRadius
    // Offset: 0x4C
    float rootSphereCastRadius;
    // public System.Boolean overstepFallsDown
    // Offset: 0x50
    bool overstepFallsDown;
    // public RootMotion.FinalIK.Grounding/Quality quality
    // Offset: 0x54
    RootMotion::FinalIK::Grounding::Quality quality;
    // private RootMotion.FinalIK.Grounding/Leg[] <legs>k__BackingField
    // Offset: 0x58
    ::Array<RootMotion::FinalIK::Grounding::Leg*>* legs;
    // private RootMotion.FinalIK.Grounding/Pelvis <pelvis>k__BackingField
    // Offset: 0x60
    RootMotion::FinalIK::Grounding::Pelvis* pelvis;
    // private System.Boolean <isGrounded>k__BackingField
    // Offset: 0x68
    bool isGrounded;
    // private UnityEngine.Transform <root>k__BackingField
    // Offset: 0x70
    UnityEngine::Transform* root;
    // private UnityEngine.RaycastHit <rootHit>k__BackingField
    // Offset: 0x78
    UnityEngine::RaycastHit rootHit;
    // private System.Boolean initiated
    // Offset: 0xA4
    bool initiated;
    // public RootMotion.FinalIK.Grounding/Leg[] get_legs()
    // Offset: 0x1360374
    ::Array<RootMotion::FinalIK::Grounding::Leg*>* get_legs();
    // private System.Void set_legs(RootMotion.FinalIK.Grounding/Leg[] value)
    // Offset: 0x136037C
    void set_legs(::Array<RootMotion::FinalIK::Grounding::Leg*>* value);
    // public RootMotion.FinalIK.Grounding/Pelvis get_pelvis()
    // Offset: 0x1360384
    RootMotion::FinalIK::Grounding::Pelvis* get_pelvis();
    // private System.Void set_pelvis(RootMotion.FinalIK.Grounding/Pelvis value)
    // Offset: 0x136038C
    void set_pelvis(RootMotion::FinalIK::Grounding::Pelvis* value);
    // public System.Boolean get_isGrounded()
    // Offset: 0x1360394
    bool get_isGrounded();
    // private System.Void set_isGrounded(System.Boolean value)
    // Offset: 0x136039C
    void set_isGrounded(bool value);
    // public UnityEngine.Transform get_root()
    // Offset: 0x13603A8
    UnityEngine::Transform* get_root();
    // private System.Void set_root(UnityEngine.Transform value)
    // Offset: 0x13603B0
    void set_root(UnityEngine::Transform* value);
    // public UnityEngine.RaycastHit get_rootHit()
    // Offset: 0x13603B8
    UnityEngine::RaycastHit get_rootHit();
    // private System.Void set_rootHit(UnityEngine.RaycastHit value)
    // Offset: 0x13603D0
    void set_rootHit(UnityEngine::RaycastHit value);
    // public System.Boolean get_rootGrounded()
    // Offset: 0x13603F0
    bool get_rootGrounded();
    // public UnityEngine.RaycastHit GetRootHit(System.Single maxDistanceMlp)
    // Offset: 0x1360444
    UnityEngine::RaycastHit GetRootHit(float maxDistanceMlp);
    // public System.Boolean IsValid(System.String errorMessage)
    // Offset: 0x1360824
    bool IsValid(::Il2CppString*& errorMessage);
    // public System.Void Initiate(UnityEngine.Transform root, UnityEngine.Transform[] feet)
    // Offset: 0x1359A38
    void Initiate(UnityEngine::Transform* root, ::Array<UnityEngine::Transform*>* feet);
    // public System.Void Update()
    // Offset: 0x135A290
    void Update();
    // public UnityEngine.Vector3 GetLegsPlaneNormal()
    // Offset: 0x135C1D0
    UnityEngine::Vector3 GetLegsPlaneNormal();
    // public System.Void Reset()
    // Offset: 0x1359540
    void Reset();
    // public System.Void LogWarning(System.String message)
    // Offset: 0x1360AE8
    void LogWarning(::Il2CppString* message);
    // public UnityEngine.Vector3 get_up()
    // Offset: 0x135A5CC
    UnityEngine::Vector3 get_up();
    // public System.Single GetVerticalOffset(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
    // Offset: 0x1361874
    float GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2);
    // public UnityEngine.Vector3 Flatten(UnityEngine.Vector3 v)
    // Offset: 0x13619DC
    UnityEngine::Vector3 Flatten(UnityEngine::Vector3 v);
    // private System.Boolean get_useRootRotation()
    // Offset: 0x13617A4
    bool get_useRootRotation();
    // public UnityEngine.Vector3 GetFootCenterOffset()
    // Offset: 0x1361AE0
    UnityEngine::Vector3 GetFootCenterOffset();
    // public System.Void .ctor()
    // Offset: 0x135917C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Grounding* New_ctor();
  }; // RootMotion.FinalIK.Grounding
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::Grounding*, "RootMotion.FinalIK", "Grounding");
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::Grounding::Quality, "RootMotion.FinalIK", "Grounding/Quality");
#pragma pack(pop)
