// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:44 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ModestTree
namespace ModestTree {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Delegate
  class Delegate;
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
  // Forward declaring type: MemberInfo
  class MemberInfo;
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
}
// Completed forward declares
// Type namespace: ModestTree
namespace ModestTree {
  // Autogenerated type: ModestTree.TypeExtensions
  class TypeExtensions : public ::Il2CppObject {
    public:
    // Nested type: ModestTree::TypeExtensions::$GetParentTypes$d__28
    class $GetParentTypes$d__28;
    // Nested type: ModestTree::TypeExtensions::$$c__DisplayClass35_0
    class $$c__DisplayClass35_0;
    // Nested type: ModestTree::TypeExtensions::$$c__DisplayClass35_1
    class $$c__DisplayClass35_1;
    // Nested type: ModestTree::TypeExtensions::$$c__DisplayClass39_0
    class $$c__DisplayClass39_0;
    // Nested type: ModestTree::TypeExtensions::$$c__DisplayClass39_1
    class $$c__DisplayClass39_1;
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
    static System::Collections::Generic::Dictionary_2<System::Type*, bool>* _get__isClosedGenericType();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
    static void _set__isClosedGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
    static System::Collections::Generic::Dictionary_2<System::Type*, bool>* _get__isOpenGenericType();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
    static void _set__isOpenGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
    static System::Collections::Generic::Dictionary_2<System::Type*, bool>* _get__isValueType();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
    static void _set__isValueType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
    static System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>* _get__interfaces();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
    static void _set__interfaces(System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>* value);
    // static public System.Boolean DerivesFrom(System.Type a)
    // Offset: 0x14D3200
    template<class T>
    static bool DerivesFrom(System::Type* a) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "TypeExtensions", "DerivesFrom", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, a));
    }
    // static public System.Boolean DerivesFrom(System.Type a, System.Type b)
    // Offset: 0xD48898
    static bool DerivesFrom(System::Type* a, System::Type* b);
    // static public System.Boolean DerivesFromOrEqual(System.Type a)
    // Offset: 0x14D32B4
    template<class T>
    static bool DerivesFromOrEqual(System::Type* a) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "TypeExtensions", "DerivesFromOrEqual", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, a));
    }
    // static public System.Boolean DerivesFromOrEqual(System.Type a, System.Type b)
    // Offset: 0xD48B10
    static bool DerivesFromOrEqual(System::Type* a, System::Type* b);
    // static public System.Boolean IsAssignableToGenericType(System.Type givenType, System.Type genericType)
    // Offset: 0xD4AE08
    static bool IsAssignableToGenericType(System::Type* givenType, System::Type* genericType);
    // static public System.Boolean IsEnum(System.Type type)
    // Offset: 0xD4B120
    static bool IsEnum(System::Type* type);
    // static public System.Boolean IsValueType(System.Type type)
    // Offset: 0xD4B140
    static bool IsValueType(System::Type* type);
    // static public System.Reflection.MethodInfo[] DeclaredInstanceMethods(System.Type type)
    // Offset: 0xD4B23C
    static ::Array<System::Reflection::MethodInfo*>* DeclaredInstanceMethods(System::Type* type);
    // static public System.Reflection.PropertyInfo[] DeclaredInstanceProperties(System.Type type)
    // Offset: 0xD4B260
    static ::Array<System::Reflection::PropertyInfo*>* DeclaredInstanceProperties(System::Type* type);
    // static public System.Reflection.FieldInfo[] DeclaredInstanceFields(System.Type type)
    // Offset: 0xD4B284
    static ::Array<System::Reflection::FieldInfo*>* DeclaredInstanceFields(System::Type* type);
    // static public System.Type BaseType(System.Type type)
    // Offset: 0xD4B2A8
    static System::Type* BaseType(System::Type* type);
    // static public System.Boolean IsGenericType(System.Type type)
    // Offset: 0xD4B2C8
    static bool IsGenericType(System::Type* type);
    // static public System.Boolean IsGenericTypeDefinition(System.Type type)
    // Offset: 0xD4B2E8
    static bool IsGenericTypeDefinition(System::Type* type);
    // static public System.Boolean IsPrimitive(System.Type type)
    // Offset: 0xD4B308
    static bool IsPrimitive(System::Type* type);
    // static public System.Boolean IsInterface(System.Type type)
    // Offset: 0xD4B320
    static bool IsInterface(System::Type* type);
    // static public System.Boolean ContainsGenericParameters(System.Type type)
    // Offset: 0xD4B338
    static bool ContainsGenericParameters(System::Type* type);
    // static public System.Boolean IsAbstract(System.Type type)
    // Offset: 0xD4B358
    static bool IsAbstract(System::Type* type);
    // static public System.Boolean IsSealed(System.Type type)
    // Offset: 0xD4B370
    static bool IsSealed(System::Type* type);
    // static public System.Reflection.MethodInfo Method(System.Delegate del)
    // Offset: 0xD4B388
    static System::Reflection::MethodInfo* Method(System::Delegate* del);
    // static public System.Type[] GenericArguments(System.Type type)
    // Offset: 0xD4B3A0
    static ::Array<System::Type*>* GenericArguments(System::Type* type);
    // static public System.Type[] Interfaces(System.Type type)
    // Offset: 0xD4B020
    static ::Array<System::Type*>* Interfaces(System::Type* type);
    // static public System.Reflection.ConstructorInfo[] Constructors(System.Type type)
    // Offset: 0xD4B3C0
    static ::Array<System::Reflection::ConstructorInfo*>* Constructors(System::Type* type);
    // static public System.Object GetDefaultValue(System.Type type)
    // Offset: 0xD4B3E4
    static ::Il2CppObject* GetDefaultValue(System::Type* type);
    // static public System.Boolean IsClosedGenericType(System.Type type)
    // Offset: 0xD4B468
    static bool IsClosedGenericType(System::Type* type);
    // static public System.Collections.Generic.IEnumerable`1<System.Type> GetParentTypes(System.Type type)
    // Offset: 0xD4B5D8
    static System::Collections::Generic::IEnumerable_1<System::Type*>* GetParentTypes(System::Type* type);
    // static public System.Boolean IsOpenGenericType(System.Type type)
    // Offset: 0xD4B69C
    static bool IsOpenGenericType(System::Type* type);
    // static public T GetAttribute(System.Reflection.MemberInfo provider)
    // Offset: 0xC4E98C
    template<class T>
    static T GetAttribute(System::Reflection::MemberInfo* provider) {
      static_assert(std::is_convertible_v<T, System::Attribute*>);
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<T>("ModestTree", "TypeExtensions", "GetAttribute", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, provider));
    }
    // static public T TryGetAttribute(System.Reflection.MemberInfo provider)
    // Offset: 0xC4EA18
    template<class T>
    static T TryGetAttribute(System::Reflection::MemberInfo* provider) {
      static_assert(std::is_convertible_v<T, System::Attribute*>);
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<T>("ModestTree", "TypeExtensions", "TryGetAttribute", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, provider));
    }
    // static public System.Boolean HasAttribute(System.Reflection.MemberInfo provider, System.Type[] attributeTypes)
    // Offset: 0xD4B80C
    static bool HasAttribute(System::Reflection::MemberInfo* provider, ::Array<System::Type*>* attributeTypes);
    // static public System.Boolean HasAttribute(System.Reflection.MemberInfo provider)
    // Offset: 0x14D3368
    template<class T>
    static bool HasAttribute(System::Reflection::MemberInfo* provider) {
      static_assert(std::is_convertible_v<T, System::Attribute*>);
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "TypeExtensions", "HasAttribute", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, provider));
    }
    // static public System.Collections.Generic.IEnumerable`1<T> AllAttributes(System.Reflection.MemberInfo provider)
    // Offset: 0xCF3B58
    template<class T>
    static System::Collections::Generic::IEnumerable_1<T>* AllAttributes(System::Reflection::MemberInfo* provider) {
      static_assert(std::is_convertible_v<T, System::Attribute*>);
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<System::Collections::Generic::IEnumerable_1<T>*>("ModestTree", "TypeExtensions", "AllAttributes", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, provider));
    }
    // static public System.Collections.Generic.IEnumerable`1<System.Attribute> AllAttributes(System.Reflection.MemberInfo provider, System.Type[] attributeTypes)
    // Offset: 0xD4B890
    static System::Collections::Generic::IEnumerable_1<System::Attribute*>* AllAttributes(System::Reflection::MemberInfo* provider, ::Array<System::Type*>* attributeTypes);
    // static public System.Boolean HasAttribute(System.Reflection.ParameterInfo provider, System.Type[] attributeTypes)
    // Offset: 0xD4B9D8
    static bool HasAttribute(System::Reflection::ParameterInfo* provider, ::Array<System::Type*>* attributeTypes);
    // static public System.Boolean HasAttribute(System.Reflection.ParameterInfo provider)
    // Offset: 0x14D3494
    template<class T>
    static bool HasAttribute(System::Reflection::ParameterInfo* provider) {
      static_assert(std::is_convertible_v<T, System::Attribute*>);
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "TypeExtensions", "HasAttribute", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, provider));
    }
    // static public System.Collections.Generic.IEnumerable`1<T> AllAttributes(System.Reflection.ParameterInfo provider)
    // Offset: 0xCF3C84
    template<class T>
    static System::Collections::Generic::IEnumerable_1<T>* AllAttributes(System::Reflection::ParameterInfo* provider) {
      static_assert(std::is_convertible_v<T, System::Attribute*>);
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<System::Collections::Generic::IEnumerable_1<T>*>("ModestTree", "TypeExtensions", "AllAttributes", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, provider));
    }
    // static public System.Collections.Generic.IEnumerable`1<System.Attribute> AllAttributes(System.Reflection.ParameterInfo provider, System.Type[] attributeTypes)
    // Offset: 0xD4BA5C
    static System::Collections::Generic::IEnumerable_1<System::Attribute*>* AllAttributes(System::Reflection::ParameterInfo* provider, ::Array<System::Type*>* attributeTypes);
    // static private System.Void .cctor()
    // Offset: 0xD4BBA4
    static void _cctor();
  }; // ModestTree.TypeExtensions
}
DEFINE_IL2CPP_ARG_TYPE(ModestTree::TypeExtensions*, "ModestTree", "TypeExtensions");
#pragma pack(pop)
