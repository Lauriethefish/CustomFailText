// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:44 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ModestTree
namespace ModestTree {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: ModestTree
namespace ModestTree {
  // Autogenerated type: ModestTree.LinqExtensions
  class LinqExtensions : public ::Il2CppObject {
    public:
    // Nested type: ModestTree::LinqExtensions::$Yield$d__0_1<T>
    template<typename T>
    class $Yield$d__0_1;
    // Nested type: ModestTree::LinqExtensions::$$c__7_1<T>
    template<typename T>
    class $$c__7_1;
    // Nested type: ModestTree::LinqExtensions::$$c__DisplayClass9_0_1<T>
    template<typename T>
    class $$c__DisplayClass9_0_1;
    // static public System.Collections.Generic.IEnumerable`1<T> Yield(T item)
    // Offset: 0xCF3A6C
    template<class T>
    static System::Collections::Generic::IEnumerable_1<T>* Yield(T item) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<System::Collections::Generic::IEnumerable_1<T>*>("ModestTree", "LinqExtensions", "Yield", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, item));
    }
    // static public TSource OnlyOrDefault(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xD3DB2C
    template<class TSource>
    static TSource OnlyOrDefault(System::Collections::Generic::IEnumerable_1<TSource>* source) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<TSource>("ModestTree", "LinqExtensions", "OnlyOrDefault", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, source));
    }
    // static public System.Boolean HasAtLeast(System.Collections.Generic.IEnumerable`1<T> enumerable, System.Int32 amount)
    // Offset: 0x14D30A4
    template<class T>
    static bool HasAtLeast(System::Collections::Generic::IEnumerable_1<T>* enumerable, int amount) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "LinqExtensions", "HasAtLeast", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, enumerable, amount));
    }
    // static public System.Boolean HasMoreThan(System.Collections.Generic.IEnumerable`1<T> enumerable, System.Int32 amount)
    // Offset: 0x14D314C
    template<class T>
    static bool HasMoreThan(System::Collections::Generic::IEnumerable_1<T>* enumerable, int amount) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "LinqExtensions", "HasMoreThan", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, enumerable, amount));
    }
    // static public System.Boolean HasLessThan(System.Collections.Generic.IEnumerable`1<T> enumerable, System.Int32 amount)
    // Offset: 0x14D3138
    template<class T>
    static bool HasLessThan(System::Collections::Generic::IEnumerable_1<T>* enumerable, int amount) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "LinqExtensions", "HasLessThan", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, enumerable, amount));
    }
    // static public System.Boolean HasAtMost(System.Collections.Generic.IEnumerable`1<T> enumerable, System.Int32 amount)
    // Offset: 0x14D30EC
    template<class T>
    static bool HasAtMost(System::Collections::Generic::IEnumerable_1<T>* enumerable, int amount) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "LinqExtensions", "HasAtMost", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, enumerable, amount));
    }
    // static public System.Boolean IsEmpty(System.Collections.Generic.IEnumerable`1<T> enumerable)
    // Offset: 0x14D3160
    template<class T>
    static bool IsEmpty(System::Collections::Generic::IEnumerable_1<T>* enumerable) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "LinqExtensions", "IsEmpty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, enumerable));
    }
    // static public System.Collections.Generic.IEnumerable`1<T> GetDuplicates(System.Collections.Generic.IEnumerable`1<T> list)
    // Offset: 0xCF35B8
    template<class T>
    static System::Collections::Generic::IEnumerable_1<T>* GetDuplicates(System::Collections::Generic::IEnumerable_1<T>* list) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<System::Collections::Generic::IEnumerable_1<T>*>("ModestTree", "LinqExtensions", "GetDuplicates", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, list));
    }
    // static public System.Collections.Generic.IEnumerable`1<T> Except(System.Collections.Generic.IEnumerable`1<T> list, T item)
    // Offset: 0xCF3520
    template<class T>
    static System::Collections::Generic::IEnumerable_1<T>* Except(System::Collections::Generic::IEnumerable_1<T>* list, T item) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<System::Collections::Generic::IEnumerable_1<T>*>("ModestTree", "LinqExtensions", "Except", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, list, item));
    }
    // static public System.Boolean ContainsItem(System.Collections.Generic.IEnumerable`1<T> list, T value)
    // Offset: 0x14D2FCC
    template<class T>
    static bool ContainsItem(System::Collections::Generic::IEnumerable_1<T>* list, T value) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<bool>("ModestTree", "LinqExtensions", "ContainsItem", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, list, value));
    }
  }; // ModestTree.LinqExtensions
}
DEFINE_IL2CPP_ARG_TYPE(ModestTree::LinqExtensions*, "ModestTree", "LinqExtensions");
#pragma pack(pop)
