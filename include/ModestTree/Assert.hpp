// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:44 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ZenjectException
  class ZenjectException;
}
// Completed forward declares
// Type namespace: ModestTree
namespace ModestTree {
  // Autogenerated type: ModestTree.Assert
  class Assert : public ::Il2CppObject {
    public:
    // static public System.Void That(System.Boolean condition)
    // Offset: 0xD48628
    static void That(bool condition);
    // static public System.Void IsNotEmpty(System.String str)
    // Offset: 0xD486F0
    static void IsNotEmpty(::Il2CppString* str);
    // static public System.Void IsEmpty(System.Collections.Generic.IList`1<T> list)
    // Offset: 0xC61CB4
    template<class T>
    static void IsEmpty(System::Collections::Generic::IList_1<T>* list) {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsEmpty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, list));
    }
    // static public System.Void IsEmpty(System.Collections.Generic.IEnumerable`1<T> sequence)
    // Offset: 0xC61BB8
    template<class T>
    static void IsEmpty(System::Collections::Generic::IEnumerable_1<T>* sequence) {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsEmpty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, sequence));
    }
    // static public System.Void IsType(System.Object obj)
    // Offset: 0xC620D0
    template<class T>
    static void IsType(::Il2CppObject* obj) {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, obj));
    }
    // static public System.Void IsType(System.Object obj, System.String message)
    // Offset: 0xC62138
    template<class T>
    static void IsType(::Il2CppObject* obj, ::Il2CppString* message) {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, obj, message));
    }
    // static public System.Void DerivesFrom(System.Type type)
    // Offset: 0xC61860
    template<class T>
    static void DerivesFrom(System::Type* type) {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "DerivesFrom", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, type));
    }
    // static public System.Void DerivesFromOrEqual(System.Type type)
    // Offset: 0xC61A0C
    template<class T>
    static void DerivesFromOrEqual(System::Type* type) {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "DerivesFromOrEqual", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, type));
    }
    // static public System.Void DerivesFrom(System.Type childType, System.Type parentType)
    // Offset: 0xD48760
    static void DerivesFrom(System::Type* childType, System::Type* parentType);
    // static public System.Void DerivesFromOrEqual(System.Type childType, System.Type parentType)
    // Offset: 0xD489D8
    static void DerivesFromOrEqual(System::Type* childType, System::Type* parentType);
    // static public System.Void IsEqual(System.Object left, System.Object right)
    // Offset: 0xD48BC0
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right);
    // static public System.Void IsEqual(System.Object left, System.Object right, System.Func`1<System.String> messageGenerator)
    // Offset: 0xD48D44
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void IsApproximately(System.Single left, System.Single right, System.Single epsilon)
    // Offset: 0xD48E90
    static void IsApproximately(float left, float right, float epsilon);
    // static public System.Void IsEqual(System.Object left, System.Object right, System.String message)
    // Offset: 0xD48C20
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message);
    // static public System.Void IsNotEqual(System.Object left, System.Object right)
    // Offset: 0xD48FD8
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right);
    // static public System.Void IsNotEqual(System.Object left, System.Object right, System.Func`1<System.String> messageGenerator)
    // Offset: 0xD49130
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void IsNull(System.Object val)
    // Offset: 0xD4927C
    static void IsNull(::Il2CppObject* val);
    // static public System.Void IsNull(System.Object val, System.String message)
    // Offset: 0xD4931C
    static void IsNull(::Il2CppObject* val, ::Il2CppString* message);
    // static public System.Void IsNull(System.Object val, System.String message, System.Object p1)
    // Offset: 0xD493C8
    static void IsNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void IsNotNull(System.Object val)
    // Offset: 0xD496A0
    static void IsNotNull(::Il2CppObject* val);
    // static public System.Void IsNotNull(System.Object val, System.String message)
    // Offset: 0xD49704
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message);
    // static public System.Void IsNotNull(System.Object val, System.String message, System.Object p1)
    // Offset: 0xD497B0
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void IsNotNull(System.Object val, System.String message, System.Object p1, System.Object p2)
    // Offset: 0xD498A8
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2);
    // static public System.Void IsNotEmpty(System.Collections.Generic.IEnumerable`1<T> val, System.String message)
    // Offset: 0xC61FA4
    template<class T>
    static void IsNotEmpty(System::Collections::Generic::IEnumerable_1<T>* val, ::Il2CppString* message) {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsNotEmpty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, val, message));
    }
    // static public System.Void IsNotEqual(System.Object left, System.Object right, System.String message)
    // Offset: 0xD49038
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message);
    // static public System.Void Warn(System.Boolean condition)
    // Offset: 0xD499D0
    static void Warn(bool condition);
    // static public System.Void Warn(System.Boolean condition, System.Func`1<System.String> messageGenerator)
    // Offset: 0xD49B40
    static void Warn(bool condition, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void That(System.Boolean condition, System.String message)
    // Offset: 0xD49C6C
    static void That(bool condition, ::Il2CppString* message);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1)
    // Offset: 0xD49CE8
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1, System.Object p2)
    // Offset: 0xD49DB0
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1, System.Object p2, System.Object p3)
    // Offset: 0xD49EA8
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2, ::Il2CppObject* p3);
    // static public System.Void Warn(System.Boolean condition, System.String message)
    // Offset: 0xD49FC8
    static void Warn(bool condition, ::Il2CppString* message);
    // static public System.Void Throws(System.Action action)
    // Offset: 0xD4A0D4
    static void Throws(System::Action* action);
    // static public System.Void Throws(System.Action action)
    // Offset: 0xC62318
    // ABORTED: conflicts with another method. static void Throws(System::Action* action)
    // static public Zenject.ZenjectException CreateException()
    // Offset: 0xD4A124
    static Zenject::ZenjectException* CreateException();
    // static public Zenject.ZenjectException CreateException(System.String message)
    // Offset: 0xD4868C
    static Zenject::ZenjectException* CreateException(::Il2CppString* message);
    // static public Zenject.ZenjectException CreateException(System.String message, System.Object[] parameters)
    // Offset: 0xD48954
    static Zenject::ZenjectException* CreateException(::Il2CppString* message, ::Array<::Il2CppObject*>* parameters);
    // static public Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, System.Object[] parameters)
    // Offset: 0xD4A18C
    static Zenject::ZenjectException* CreateException(System::Exception* innerException, ::Il2CppString* message, ::Array<::Il2CppObject*>* parameters);
  }; // ModestTree.Assert
}
DEFINE_IL2CPP_ARG_TYPE(ModestTree::Assert*, "ModestTree", "Assert");
#pragma pack(pop)
