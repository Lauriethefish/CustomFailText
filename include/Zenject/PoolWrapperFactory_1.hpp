// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:48 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: Zenject.IFactory`1
#include "Zenject/IFactory_1.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: IMemoryPool`1<TValue>
  template<typename TValue>
  class IMemoryPool_1;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.PoolWrapperFactory`1
  template<typename T>
  class PoolWrapperFactory_1 : public ::Il2CppObject, public Zenject::IFactory_1<T>, public Zenject::IFactory {
    public:
    // private readonly Zenject.IMemoryPool`1<T> _pool
    // Offset: 0x0
    Zenject::IMemoryPool_1<T>* pool;
    // public System.Void .ctor(Zenject.IMemoryPool`1<T> pool)
    // Offset: 0x15D84A0
    static PoolWrapperFactory_1<T>* New_ctor(Zenject::IMemoryPool_1<T>* pool) {
      return (PoolWrapperFactory_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PoolWrapperFactory_1<T>*>::get(), pool));
    }
    // public T Create()
    // Offset: 0x15D84DC
    // Implemented from: Zenject.IFactory`1
    // Base method: TValue IFactory`1::Create()
    T Create() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(this, "Create"));
    }
    // Creating proxy method: Zenject_IFactory_1_Create
    // Maps to method: Create
    T Zenject_IFactory_1_Create() {
      return Create();
    }
  }; // Zenject.PoolWrapperFactory`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::PoolWrapperFactory_1, "Zenject", "PoolWrapperFactory`1");
#pragma pack(pop)
