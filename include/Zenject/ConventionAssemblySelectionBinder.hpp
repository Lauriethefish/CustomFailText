// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:45 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ConventionBindInfo
  class ConventionBindInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`2<TResult, T>
  template<typename TResult, typename T>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.ConventionAssemblySelectionBinder
  class ConventionAssemblySelectionBinder : public ::Il2CppObject {
    public:
    // Nested type: Zenject::ConventionAssemblySelectionBinder::$$c
    class $$c;
    // Nested type: Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    // private Zenject.ConventionBindInfo <BindInfo>k__BackingField
    // Offset: 0x10
    Zenject::ConventionBindInfo* BindInfo;
    // public System.Void .ctor(Zenject.ConventionBindInfo bindInfo)
    // Offset: 0xD56F10
    static ConventionAssemblySelectionBinder* New_ctor(Zenject::ConventionBindInfo* bindInfo);
    // protected Zenject.ConventionBindInfo get_BindInfo()
    // Offset: 0xD56F44
    Zenject::ConventionBindInfo* get_BindInfo();
    // private System.Void set_BindInfo(Zenject.ConventionBindInfo value)
    // Offset: 0xD56F4C
    void set_BindInfo(Zenject::ConventionBindInfo* value);
    // public System.Void FromAllAssemblies()
    // Offset: 0xD56F54
    void FromAllAssemblies();
    // public System.Void FromAssemblyContaining()
    // Offset: 0xC4DB2C
    template<class T>
    void FromAssemblyContaining() {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod(this, "FromAssemblyContaining", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // public System.Void FromAssembliesContaining(System.Type[] types)
    // Offset: 0xD56F58
    void FromAssembliesContaining(::Array<System::Type*>* types);
    // public System.Void FromAssembliesContaining(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD56F5C
    void FromAssembliesContaining(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // public System.Void FromThisAssembly()
    // Offset: 0xD57144
    void FromThisAssembly();
    // public System.Void FromAssembly(System.Reflection.Assembly assembly)
    // Offset: 0xD5720C
    void FromAssembly(System::Reflection::Assembly* assembly);
    // public System.Void FromAssemblies(System.Reflection.Assembly[] assemblies)
    // Offset: 0xD57208
    void FromAssemblies(::Array<System::Reflection::Assembly*>* assemblies);
    // public System.Void FromAssemblies(System.Collections.Generic.IEnumerable`1<System.Reflection.Assembly> assemblies)
    // Offset: 0xD57080
    void FromAssemblies(System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>* assemblies);
    // public System.Void FromAssembliesWhere(System.Func`2<System.Reflection.Assembly,System.Boolean> predicate)
    // Offset: 0xD57338
    void FromAssembliesWhere(System::Func_2<System::Reflection::Assembly*, bool>* predicate);
  }; // Zenject.ConventionAssemblySelectionBinder
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::ConventionAssemblySelectionBinder*, "Zenject", "ConventionAssemblySelectionBinder");
#pragma pack(pop)
