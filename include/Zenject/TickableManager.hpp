// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:52 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ITickable
  class ITickable;
  // Forward declaring type: IFixedTickable
  class IFixedTickable;
  // Forward declaring type: ILateTickable
  class ILateTickable;
  // Forward declaring type: TickablesTaskUpdater
  class TickablesTaskUpdater;
  // Forward declaring type: FixedTickablesTaskUpdater
  class FixedTickablesTaskUpdater;
  // Forward declaring type: LateTickablesTaskUpdater
  class LateTickablesTaskUpdater;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: ModestTree::Util
namespace ModestTree::Util {
  // Forward declaring type: ValuePair`2<T1, T2>
  template<typename T1, typename T2>
  class ValuePair_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.TickableManager
  class TickableManager : public ::Il2CppObject {
    public:
    // Nested type: Zenject::TickableManager::$$c__DisplayClass17_0
    class $$c__DisplayClass17_0;
    // Nested type: Zenject::TickableManager::$$c
    class $$c;
    // Nested type: Zenject::TickableManager::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    // Nested type: Zenject::TickableManager::$$c__DisplayClass19_0
    class $$c__DisplayClass19_0;
    // private readonly System.Collections.Generic.List`1<Zenject.ITickable> _tickables
    // Offset: 0x10
    System::Collections::Generic::List_1<Zenject::ITickable*>* tickables;
    // private readonly System.Collections.Generic.List`1<Zenject.IFixedTickable> _fixedTickables
    // Offset: 0x18
    System::Collections::Generic::List_1<Zenject::IFixedTickable*>* fixedTickables;
    // private readonly System.Collections.Generic.List`1<Zenject.ILateTickable> _lateTickables
    // Offset: 0x20
    System::Collections::Generic::List_1<Zenject::ILateTickable*>* lateTickables;
    // private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _priorities
    // Offset: 0x28
    System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>* priorities;
    // private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _fixedPriorities
    // Offset: 0x30
    System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>* fixedPriorities;
    // private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _latePriorities
    // Offset: 0x38
    System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>* latePriorities;
    // private readonly Zenject.TickablesTaskUpdater _updater
    // Offset: 0x40
    Zenject::TickablesTaskUpdater* updater;
    // private readonly Zenject.FixedTickablesTaskUpdater _fixedUpdater
    // Offset: 0x48
    Zenject::FixedTickablesTaskUpdater* fixedUpdater;
    // private readonly Zenject.LateTickablesTaskUpdater _lateUpdater
    // Offset: 0x50
    Zenject::LateTickablesTaskUpdater* lateUpdater;
    // private System.Boolean _isPaused
    // Offset: 0x58
    bool isPaused;
    // public System.Collections.Generic.IEnumerable`1<Zenject.ITickable> get_Tickables()
    // Offset: 0xFBC1CC
    System::Collections::Generic::IEnumerable_1<Zenject::ITickable*>* get_Tickables();
    // public System.Boolean get_IsPaused()
    // Offset: 0xFBC1D4
    bool get_IsPaused();
    // public System.Void set_IsPaused(System.Boolean value)
    // Offset: 0xFBC1DC
    void set_IsPaused(bool value);
    // public System.Void Initialize()
    // Offset: 0xFBC1E8
    void Initialize();
    // private System.Void InitFixedTickables()
    // Offset: 0xFBC8AC
    void InitFixedTickables();
    // private System.Void InitTickables()
    // Offset: 0xFBC214
    void InitTickables();
    // private System.Void InitLateTickables()
    // Offset: 0xFBCF44
    void InitLateTickables();
    // public System.Void Add(Zenject.ITickable tickable, System.Int32 priority)
    // Offset: 0xFBD5F4
    void Add(Zenject::ITickable* tickable, int priority);
    // public System.Void Add(Zenject.ITickable tickable)
    // Offset: 0xFBD664
    void Add(Zenject::ITickable* tickable);
    // public System.Void AddLate(Zenject.ILateTickable tickable, System.Int32 priority)
    // Offset: 0xFBD66C
    void AddLate(Zenject::ILateTickable* tickable, int priority);
    // public System.Void AddLate(Zenject.ILateTickable tickable)
    // Offset: 0xFBD6DC
    void AddLate(Zenject::ILateTickable* tickable);
    // public System.Void AddFixed(Zenject.IFixedTickable tickable, System.Int32 priority)
    // Offset: 0xFBD6E4
    void AddFixed(Zenject::IFixedTickable* tickable, int priority);
    // public System.Void AddFixed(Zenject.IFixedTickable tickable)
    // Offset: 0xFBD754
    void AddFixed(Zenject::IFixedTickable* tickable);
    // public System.Void Remove(Zenject.ITickable tickable)
    // Offset: 0xFBD7C0
    void Remove(Zenject::ITickable* tickable);
    // public System.Void RemoveLate(Zenject.ILateTickable tickable)
    // Offset: 0xFBD828
    void RemoveLate(Zenject::ILateTickable* tickable);
    // public System.Void RemoveFixed(Zenject.IFixedTickable tickable)
    // Offset: 0xFBD890
    void RemoveFixed(Zenject::IFixedTickable* tickable);
    // public System.Void Update()
    // Offset: 0xFAB858
    void Update();
    // public System.Void FixedUpdate()
    // Offset: 0xFAB990
    void FixedUpdate();
    // public System.Void LateUpdate()
    // Offset: 0xFAB8F4
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0xFBC0B8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static TickableManager* New_ctor();
  }; // Zenject.TickableManager
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::TickableManager*, "Zenject", "TickableManager");
#pragma pack(pop)
