// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:47 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: InvalidBindResponses
  struct InvalidBindResponses;
  // Forward declaring type: IProvider
  class IProvider;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.BindingUtil
  class BindingUtil : public ::Il2CppObject {
    public:
    // static public System.Void AssertIsValidPrefab(UnityEngine.Object prefab)
    // Offset: 0xD519E8
    static void AssertIsValidPrefab(UnityEngine::Object* prefab);
    // static public System.Void AssertIsValidGameObject(UnityEngine.GameObject gameObject)
    // Offset: 0xD51A48
    static void AssertIsValidGameObject(UnityEngine::GameObject* gameObject);
    // static public System.Void AssertIsNotComponent(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD51AA8
    static void AssertIsNotComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsNotComponent()
    // Offset: 0xC4DAB4
    template<class T>
    static void AssertIsNotComponent() {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("Zenject", "BindingUtil", "AssertIsNotComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // static public System.Void AssertIsNotComponent(System.Type type)
    // Offset: 0xD51D00
    static void AssertIsNotComponent(System::Type* type);
    // static public System.Void AssertDerivesFromUnityObject(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD51DC4
    static void AssertDerivesFromUnityObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertDerivesFromUnityObject()
    // Offset: 0xC4D85C
    template<class T>
    static void AssertDerivesFromUnityObject() {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("Zenject", "BindingUtil", "AssertDerivesFromUnityObject", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // static public System.Void AssertDerivesFromUnityObject(System.Type type)
    // Offset: 0xD5201C
    static void AssertDerivesFromUnityObject(System::Type* type);
    // static public System.Void AssertTypesAreNotComponents(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD520A4
    static void AssertTypesAreNotComponents(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsValidResourcePath(System.String resourcePath)
    // Offset: 0xD522FC
    static void AssertIsValidResourcePath(::Il2CppString* resourcePath);
    // static public System.Void AssertIsInterfaceOrScriptableObject(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD5235C
    static void AssertIsInterfaceOrScriptableObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsInterfaceOrScriptableObject()
    // Offset: 0xC4D9C4
    template<class T>
    static void AssertIsInterfaceOrScriptableObject() {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrScriptableObject", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // static public System.Void AssertIsInterfaceOrScriptableObject(System.Type type)
    // Offset: 0xD525B4
    static void AssertIsInterfaceOrScriptableObject(System::Type* type);
    // static public System.Void AssertIsInterfaceOrComponent(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD526B4
    static void AssertIsInterfaceOrComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsInterfaceOrComponent()
    // Offset: 0xC4D94C
    template<class T>
    static void AssertIsInterfaceOrComponent() {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // static public System.Void AssertIsInterfaceOrComponent(System.Type type)
    // Offset: 0xD5290C
    static void AssertIsInterfaceOrComponent(System::Type* type);
    // static public System.Void AssertIsComponent(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD52A0C
    static void AssertIsComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsComponent()
    // Offset: 0xC4D8D4
    template<class T>
    static void AssertIsComponent() {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("Zenject", "BindingUtil", "AssertIsComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // static public System.Void AssertIsComponent(System.Type type)
    // Offset: 0xD52C64
    static void AssertIsComponent(System::Type* type);
    // static public System.Void AssertTypesAreNotAbstract(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD52D24
    static void AssertTypesAreNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsNotAbstract(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0xD53008
    static void AssertIsNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsNotAbstract()
    // Offset: 0xC4DA3C
    template<class T>
    static void AssertIsNotAbstract() {
      CRASH_UNLESS(il2cpp_utils::RunGenericMethod("Zenject", "BindingUtil", "AssertIsNotAbstract", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // static public System.Void AssertIsNotAbstract(System.Type type)
    // Offset: 0xD52F7C
    static void AssertIsNotAbstract(System::Type* type);
    // static public System.Void AssertIsDerivedFromType(System.Type concreteType, System.Type parentType)
    // Offset: 0xD53260
    static void AssertIsDerivedFromType(System::Type* concreteType, System::Type* parentType);
    // static public System.Void AssertConcreteTypeListIsNotEmpty(System.Collections.Generic.IEnumerable`1<System.Type> concreteTypes)
    // Offset: 0xD53388
    static void AssertConcreteTypeListIsNotEmpty(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes);
    // static public System.Void AssertIsDerivedFromTypes(System.Collections.Generic.IEnumerable`1<System.Type> concreteTypes, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes, Zenject.InvalidBindResponses invalidBindResponse)
    // Offset: 0xD533F0
    static void AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes, Zenject::InvalidBindResponses invalidBindResponse);
    // static public System.Void AssertIsDerivedFromTypes(System.Collections.Generic.IEnumerable`1<System.Type> concreteTypes, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes)
    // Offset: 0xD534A4
    static void AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes);
    // static public System.Void AssertIsDerivedFromTypes(System.Type concreteType, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes)
    // Offset: 0xD53708
    static void AssertIsDerivedFromTypes(System::Type* concreteType, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes);
    // static public System.Void AssertInstanceDerivesFromOrEqual(System.Object instance, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes)
    // Offset: 0xD53970
    static void AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes);
    // static public System.Void AssertInstanceDerivesFromOrEqual(System.Object instance, System.Type baseType)
    // Offset: 0xD53BE8
    static void AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Type* baseType);
    // static public Zenject.IProvider CreateCachedProvider(Zenject.IProvider creator)
    // Offset: 0xD53CC8
    static Zenject::IProvider* CreateCachedProvider(Zenject::IProvider* creator);
  }; // Zenject.BindingUtil
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::BindingUtil*, "Zenject", "BindingUtil");
#pragma pack(pop)
