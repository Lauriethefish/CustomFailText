// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:26 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderBuffer
  struct RenderBuffer;
  // Forward declaring type: CubemapFace
  struct CubemapFace;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Internal_DrawTextureArguments
  struct Internal_DrawTextureArguments;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: LightProbeProxyVolume
  class LightProbeProxyVolume;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ShadowCastingMode
  struct ShadowCastingMode;
  // Forward declaring type: LightProbeUsage
  struct LightProbeUsage;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.Graphics
  class Graphics : public ::Il2CppObject {
    public:
    // Get static field: static readonly System.Int32 kMaxDrawMeshInstanceCount
    static int _get_kMaxDrawMeshInstanceCount();
    // Set static field: static readonly System.Int32 kMaxDrawMeshInstanceCount
    static void _set_kMaxDrawMeshInstanceCount(int value);
    // static private System.Int32 Internal_GetMaxDrawMeshInstanceCount()
    // Offset: 0x12F8750
    static int Internal_GetMaxDrawMeshInstanceCount();
    // static private UnityEngine.RenderBuffer GetActiveColorBuffer()
    // Offset: 0x12F8784
    static UnityEngine::RenderBuffer GetActiveColorBuffer();
    // static private UnityEngine.RenderBuffer GetActiveDepthBuffer()
    // Offset: 0x12F8858
    static UnityEngine::RenderBuffer GetActiveDepthBuffer();
    // static private System.Void Internal_SetNullRT()
    // Offset: 0x12F892C
    static void Internal_SetNullRT();
    // static private System.Void Internal_SetRTSimple(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth, System.Int32 mip, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x12F8960
    static void Internal_SetRTSimple(UnityEngine::RenderBuffer color, UnityEngine::RenderBuffer depth, int mip, UnityEngine::CubemapFace face, int depthSlice);
    // static private System.Void CopyTexture_Slice(UnityEngine.Texture src, System.Int32 srcElement, System.Int32 srcMip, UnityEngine.Texture dst, System.Int32 dstElement, System.Int32 dstMip)
    // Offset: 0x12F8A88
    static void CopyTexture_Slice(UnityEngine::Texture* src, int srcElement, int srcMip, UnityEngine::Texture* dst, int dstElement, int dstMip);
    // static private System.Void Internal_DrawMeshNow2(UnityEngine.Mesh mesh, System.Int32 subsetIndex, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x12F8B08
    static void Internal_DrawMeshNow2(UnityEngine::Mesh* mesh, int subsetIndex, UnityEngine::Matrix4x4 matrix);
    // static System.Void Internal_DrawTexture(UnityEngine.Internal_DrawTextureArguments args)
    // Offset: 0x12F8BFC
    static void Internal_DrawTexture(UnityEngine::Internal_DrawTextureArguments& args);
    // static private System.Void Internal_DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x12F8C3C
    static void Internal_DrawMeshInstanced(UnityEngine::Mesh* mesh, int submeshIndex, UnityEngine::Material* material, ::Array<UnityEngine::Matrix4x4>* matrices, int count, UnityEngine::MaterialPropertyBlock* properties, UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine::Camera* camera, UnityEngine::Rendering::LightProbeUsage lightProbeUsage, UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static private System.Void Internal_BlitMaterial5(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, System.Int32 pass, System.Boolean setRT)
    // Offset: 0x12F8D00
    static void Internal_BlitMaterial5(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest, UnityEngine::Material* mat, int pass, bool setRT);
    // static private System.Void Blit2(UnityEngine.Texture source, UnityEngine.RenderTexture dest)
    // Offset: 0x12F8D70
    static void Blit2(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest);
    // static private System.Void Blit4(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset)
    // Offset: 0x12F8DC0
    static void Blit4(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest, UnityEngine::Vector2 scale, UnityEngine::Vector2 offset);
    // static public System.Void ExecuteCommandBuffer(UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x12F8ED8
    static void ExecuteCommandBuffer(UnityEngine::Rendering::CommandBuffer* buffer);
    // static System.Void SetRenderTargetImpl(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, System.Int32 mipLevel, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x12F8F18
    static void SetRenderTargetImpl(UnityEngine::RenderBuffer colorBuffer, UnityEngine::RenderBuffer depthBuffer, int mipLevel, UnityEngine::CubemapFace face, int depthSlice);
    // static System.Void SetRenderTargetImpl(UnityEngine.RenderTexture rt, System.Int32 mipLevel, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x12F8FC4
    static void SetRenderTargetImpl(UnityEngine::RenderTexture* rt, int mipLevel, UnityEngine::CubemapFace face, int depthSlice);
    // static public System.Void SetRenderTarget(UnityEngine.RenderTexture rt, System.Int32 mipLevel, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x12F9118
    static void SetRenderTarget(UnityEngine::RenderTexture* rt, int mipLevel, UnityEngine::CubemapFace face, int depthSlice);
    // static public System.Void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, System.Int32 mipLevel, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x12F91A4
    static void SetRenderTarget(UnityEngine::RenderBuffer colorBuffer, UnityEngine::RenderBuffer depthBuffer, int mipLevel, UnityEngine::CubemapFace face, int depthSlice);
    // static public UnityEngine.RenderBuffer get_activeColorBuffer()
    // Offset: 0x12F9250
    static UnityEngine::RenderBuffer get_activeColorBuffer();
    // static public UnityEngine.RenderBuffer get_activeDepthBuffer()
    // Offset: 0x12F92AC
    static UnityEngine::RenderBuffer get_activeDepthBuffer();
    // static public System.Void CopyTexture(UnityEngine.Texture src, System.Int32 srcElement, System.Int32 srcMip, UnityEngine.Texture dst, System.Int32 dstElement, System.Int32 dstMip)
    // Offset: 0x12F9308
    static void CopyTexture(UnityEngine::Texture* src, int srcElement, int srcMip, UnityEngine::Texture* dst, int dstElement, int dstMip);
    // static private System.Void DrawTextureImpl(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, System.Int32 leftBorder, System.Int32 rightBorder, System.Int32 topBorder, System.Int32 bottomBorder, UnityEngine.Color color, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x12F93CC
    static void DrawTextureImpl(UnityEngine::Rect screenRect, UnityEngine::Texture* texture, UnityEngine::Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine::Color color, UnityEngine::Material* mat, int pass);
    // static public System.Void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, System.Int32 leftBorder, System.Int32 rightBorder, System.Int32 topBorder, System.Int32 bottomBorder, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x12F9564
    static void DrawTexture(UnityEngine::Rect screenRect, UnityEngine::Texture* texture, UnityEngine::Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine::Material* mat, int pass);
    // static public System.Void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, System.Int32 leftBorder, System.Int32 rightBorder, System.Int32 topBorder, System.Int32 bottomBorder, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x12F968C
    static void DrawTexture(UnityEngine::Rect screenRect, UnityEngine::Texture* texture, int leftBorder, int rightBorder, int topBorder, int bottomBorder, UnityEngine::Material* mat, int pass);
    // static public System.Void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x12F979C
    static void DrawTexture(UnityEngine::Rect screenRect, UnityEngine::Texture* texture, UnityEngine::Material* mat, int pass);
    // static public System.Void DrawMeshNow(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, System.Int32 materialIndex)
    // Offset: 0x12F9858
    static void DrawMeshNow(UnityEngine::Mesh* mesh, UnityEngine::Matrix4x4 matrix, int materialIndex);
    // static public System.Void DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x12F9970
    static void DrawMeshInstanced(UnityEngine::Mesh* mesh, int submeshIndex, UnityEngine::Material* material, ::Array<UnityEngine::Matrix4x4>* matrices, int count, UnityEngine::MaterialPropertyBlock* properties, UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, UnityEngine::Camera* camera, UnityEngine::Rendering::LightProbeUsage lightProbeUsage, UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest)
    // Offset: 0x12F9E78
    static void Blit(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset)
    // Offset: 0x12F9F0C
    static void Blit(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest, UnityEngine::Vector2 scale, UnityEngine::Vector2 offset);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x12F9FB0
    static void Blit(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest, UnityEngine::Material* mat, int pass);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat)
    // Offset: 0x12FA060
    static void Blit(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest, UnityEngine::Material* mat);
    // static public System.Void DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer)
    // Offset: 0x12FA0E0
    static void DrawMeshInstanced(UnityEngine::Mesh* mesh, int submeshIndex, UnityEngine::Material* material, ::Array<UnityEngine::Matrix4x4>* matrices, int count, UnityEngine::MaterialPropertyBlock* properties, UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer);
    // static public System.Void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Material mat)
    // Offset: 0x12FA1C0
    static void DrawTexture(UnityEngine::Rect screenRect, UnityEngine::Texture* texture, UnityEngine::Material* mat);
    // static public System.Void SetRenderTarget(UnityEngine.RenderTexture rt)
    // Offset: 0x12FA268
    static void SetRenderTarget(UnityEngine::RenderTexture* rt);
    // static public System.Void SetRenderTarget(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer)
    // Offset: 0x12FA2D8
    static void SetRenderTarget(UnityEngine::RenderBuffer colorBuffer, UnityEngine::RenderBuffer depthBuffer);
    // static private System.Void .cctor()
    // Offset: 0x12FA370
    static void _cctor();
    // static private System.Void GetActiveColorBuffer_Injected(UnityEngine.RenderBuffer ret)
    // Offset: 0x12F8818
    static void GetActiveColorBuffer_Injected(UnityEngine::RenderBuffer& ret);
    // static private System.Void GetActiveDepthBuffer_Injected(UnityEngine.RenderBuffer ret)
    // Offset: 0x12F88EC
    static void GetActiveDepthBuffer_Injected(UnityEngine::RenderBuffer& ret);
    // static private System.Void Internal_SetRTSimple_Injected(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth, System.Int32 mip, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x12F8A18
    static void Internal_SetRTSimple_Injected(UnityEngine::RenderBuffer& color, UnityEngine::RenderBuffer& depth, int mip, UnityEngine::CubemapFace face, int depthSlice);
    // static private System.Void Internal_DrawMeshNow2_Injected(UnityEngine.Mesh mesh, System.Int32 subsetIndex, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x12F8BA4
    static void Internal_DrawMeshNow2_Injected(UnityEngine::Mesh* mesh, int subsetIndex, UnityEngine::Matrix4x4& matrix);
    // static private System.Void Blit4_Injected(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset)
    // Offset: 0x12F8E70
    static void Blit4_Injected(UnityEngine::Texture* source, UnityEngine::RenderTexture* dest, UnityEngine::Vector2& scale, UnityEngine::Vector2& offset);
  }; // UnityEngine.Graphics
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Graphics*, "UnityEngine", "Graphics");
#pragma pack(pop)
