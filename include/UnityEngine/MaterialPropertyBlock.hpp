// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:26 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.MaterialPropertyBlock
  class MaterialPropertyBlock : public ::Il2CppObject {
    public:
    // System.IntPtr m_Ptr
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // private UnityEngine.Color GetColorImpl(System.Int32 name)
    // Offset: 0x12FCA94
    UnityEngine::Color GetColorImpl(int name);
    // private System.Void SetFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x12FCB58
    void SetFloatImpl(int name, float value);
    // private System.Void SetVectorImpl(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x12FCBB8
    void SetVectorImpl(int name, UnityEngine::Vector4 value);
    // private System.Void SetColorImpl(System.Int32 name, UnityEngine.Color value)
    // Offset: 0x12FCC78
    void SetColorImpl(int name, UnityEngine::Color value);
    // private System.Void SetFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x12FCD38
    void SetFloatArrayImpl(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x12FCDA0
    void SetVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.IntPtr CreateImpl()
    // Offset: 0x12FCE08
    static System::IntPtr CreateImpl();
    // static private System.Void DestroyImpl(System.IntPtr mpb)
    // Offset: 0x12FCE3C
    static void DestroyImpl(System::IntPtr mpb);
    // private System.Void Clear(System.Boolean keepMemory)
    // Offset: 0x12FCE7C
    void Clear(bool keepMemory);
    // public System.Void Clear()
    // Offset: 0x12FCECC
    void Clear();
    // private System.Void SetFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x12FCF10
    void SetFloatArray(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x12FD034
    void SetVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // private System.Void Dispose()
    // Offset: 0x12FD20C
    void Dispose();
    // public System.Void SetFloat(System.String name, System.Single value)
    // Offset: 0x12FD2C0
    void SetFloat(::Il2CppString* name, float value);
    // public System.Void SetFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x12FD32C
    void SetFloat(int nameID, float value);
    // public System.Void SetVector(System.String name, UnityEngine.Vector4 value)
    // Offset: 0x12FD38C
    void SetVector(::Il2CppString* name, UnityEngine::Vector4 value);
    // public System.Void SetVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x12FD3EC
    void SetVector(int nameID, UnityEngine::Vector4 value);
    // public System.Void SetColor(System.String name, UnityEngine.Color value)
    // Offset: 0x12FD3F0
    void SetColor(::Il2CppString* name, UnityEngine::Color value);
    // public System.Void SetColor(System.Int32 nameID, UnityEngine.Color value)
    // Offset: 0x12FD450
    void SetColor(int nameID, UnityEngine::Color value);
    // public System.Void SetFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x12FD454
    void SetFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // public System.Void SetVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x12FD4D0
    void SetVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // public UnityEngine.Color GetColor(System.Int32 nameID)
    // Offset: 0x12FD4E8
    UnityEngine::Color GetColor(int nameID);
    // private System.Void GetColorImpl_Injected(System.Int32 name, UnityEngine.Color ret)
    // Offset: 0x12FCB00
    void GetColorImpl_Injected(int name, UnityEngine::Color& ret);
    // private System.Void SetVectorImpl_Injected(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x12FCC20
    void SetVectorImpl_Injected(int name, UnityEngine::Vector4& value);
    // private System.Void SetColorImpl_Injected(System.Int32 name, UnityEngine.Color value)
    // Offset: 0x12FCCE0
    void SetColorImpl_Injected(int name, UnityEngine::Color& value);
    // public System.Void .ctor()
    // Offset: 0x12FD158
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static MaterialPropertyBlock* New_ctor();
    // protected override System.Void Finalize()
    // Offset: 0x12FD1A4
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.MaterialPropertyBlock
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::MaterialPropertyBlock*, "UnityEngine", "MaterialPropertyBlock");
#pragma pack(pop)
