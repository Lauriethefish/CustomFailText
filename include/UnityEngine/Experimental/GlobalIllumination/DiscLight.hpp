// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:33 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.LightMode
#include "UnityEngine/Experimental/GlobalIllumination/LightMode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.LinearColor
#include "UnityEngine/Experimental/GlobalIllumination/LinearColor.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.FalloffType
#include "UnityEngine/Experimental/GlobalIllumination/FalloffType.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Completed forward declares
// Type namespace: UnityEngine.Experimental.GlobalIllumination
namespace UnityEngine::Experimental::GlobalIllumination {
  // Autogenerated type: UnityEngine.Experimental.GlobalIllumination.DiscLight
  struct DiscLight : public System::ValueType {
    public:
    // public System.Int32 instanceID
    // Offset: 0x0
    int instanceID;
    // public System.Boolean shadow
    // Offset: 0x4
    bool shadow;
    // public UnityEngine.Experimental.GlobalIllumination.LightMode mode
    // Offset: 0x5
    UnityEngine::Experimental::GlobalIllumination::LightMode mode;
    // public UnityEngine.Vector3 position
    // Offset: 0x8
    UnityEngine::Vector3 position;
    // public UnityEngine.Quaternion orientation
    // Offset: 0x14
    UnityEngine::Quaternion orientation;
    // public UnityEngine.Experimental.GlobalIllumination.LinearColor color
    // Offset: 0x24
    UnityEngine::Experimental::GlobalIllumination::LinearColor color;
    // public UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor
    // Offset: 0x34
    UnityEngine::Experimental::GlobalIllumination::LinearColor indirectColor;
    // public System.Single range
    // Offset: 0x44
    float range;
    // public System.Single radius
    // Offset: 0x48
    float radius;
    // public UnityEngine.Experimental.GlobalIllumination.FalloffType falloff
    // Offset: 0x4C
    UnityEngine::Experimental::GlobalIllumination::FalloffType falloff;
    // Creating value type constructor for type: DiscLight
    DiscLight(int instanceID_ = {}, bool shadow_ = {}, UnityEngine::Experimental::GlobalIllumination::LightMode mode_ = {}, UnityEngine::Vector3 position_ = {}, UnityEngine::Quaternion orientation_ = {}, UnityEngine::Experimental::GlobalIllumination::LinearColor color_ = {}, UnityEngine::Experimental::GlobalIllumination::LinearColor indirectColor_ = {}, float range_ = {}, float radius_ = {}, UnityEngine::Experimental::GlobalIllumination::FalloffType falloff_ = {}) : instanceID{instanceID_}, shadow{shadow_}, mode{mode_}, position{position_}, orientation{orientation_}, color{color_}, indirectColor{indirectColor_}, range{range_}, radius{radius_}, falloff{falloff_} {}
  }; // UnityEngine.Experimental.GlobalIllumination.DiscLight
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Experimental::GlobalIllumination::DiscLight, "UnityEngine.Experimental.GlobalIllumination", "DiscLight");
#pragma pack(pop)
