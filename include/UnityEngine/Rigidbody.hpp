// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:35 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: CollisionDetectionMode
  struct CollisionDetectionMode;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: ForceMode
  struct ForceMode;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.Rigidbody
  class Rigidbody : public UnityEngine::Component {
    public:
    // public System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0x194A80C
    void set_velocity(UnityEngine::Vector3 value);
    // public System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0x194A8B4
    void set_angularVelocity(UnityEngine::Vector3 value);
    // public System.Void set_mass(System.Single value)
    // Offset: 0x194A95C
    void set_mass(float value);
    // public System.Void set_useGravity(System.Boolean value)
    // Offset: 0x194A9AC
    void set_useGravity(bool value);
    // public System.Boolean get_isKinematic()
    // Offset: 0x194A9FC
    bool get_isKinematic();
    // public System.Void set_isKinematic(System.Boolean value)
    // Offset: 0x194AA3C
    void set_isKinematic(bool value);
    // public System.Void set_collisionDetectionMode(UnityEngine.CollisionDetectionMode value)
    // Offset: 0x194AA8C
    void set_collisionDetectionMode(UnityEngine::CollisionDetectionMode value);
    // public UnityEngine.Vector3 get_worldCenterOfMass()
    // Offset: 0x194AADC
    UnityEngine::Vector3 get_worldCenterOfMass();
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x194AB8C
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x194AC3C
    void set_position(UnityEngine::Vector3 value);
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x194ACE4
    void set_rotation(UnityEngine::Quaternion value);
    // public System.Single get_maxAngularVelocity()
    // Offset: 0x194AD8C
    float get_maxAngularVelocity();
    // public System.Void MovePosition(UnityEngine.Vector3 position)
    // Offset: 0x194ADCC
    void MovePosition(UnityEngine::Vector3 position);
    // public System.Void MoveRotation(UnityEngine.Quaternion rot)
    // Offset: 0x194AE74
    void MoveRotation(UnityEngine::Quaternion rot);
    // public System.Void WakeUp()
    // Offset: 0x194AF1C
    void WakeUp();
    // public System.Void AddForce(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x194AF5C
    void AddForce(UnityEngine::Vector3 force, UnityEngine::ForceMode mode);
    // public System.Void AddTorque(UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x194B01C
    void AddTorque(UnityEngine::Vector3 torque, UnityEngine::ForceMode mode);
    // private System.Void set_velocity_Injected(UnityEngine.Vector3 value)
    // Offset: 0x194A864
    void set_velocity_Injected(UnityEngine::Vector3& value);
    // private System.Void set_angularVelocity_Injected(UnityEngine.Vector3 value)
    // Offset: 0x194A90C
    void set_angularVelocity_Injected(UnityEngine::Vector3& value);
    // private System.Void get_worldCenterOfMass_Injected(UnityEngine.Vector3 ret)
    // Offset: 0x194AB3C
    void get_worldCenterOfMass_Injected(UnityEngine::Vector3& ret);
    // private System.Void get_position_Injected(UnityEngine.Vector3 ret)
    // Offset: 0x194ABEC
    void get_position_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_position_Injected(UnityEngine.Vector3 value)
    // Offset: 0x194AC94
    void set_position_Injected(UnityEngine::Vector3& value);
    // private System.Void set_rotation_Injected(UnityEngine.Quaternion value)
    // Offset: 0x194AD3C
    void set_rotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void MovePosition_Injected(UnityEngine.Vector3 position)
    // Offset: 0x194AE24
    void MovePosition_Injected(UnityEngine::Vector3& position);
    // private System.Void MoveRotation_Injected(UnityEngine.Quaternion rot)
    // Offset: 0x194AECC
    void MoveRotation_Injected(UnityEngine::Quaternion& rot);
    // private System.Void AddForce_Injected(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x194AFC4
    void AddForce_Injected(UnityEngine::Vector3& force, UnityEngine::ForceMode mode);
    // private System.Void AddTorque_Injected(UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x194B084
    void AddTorque_Injected(UnityEngine::Vector3& torque, UnityEngine::ForceMode mode);
    // public System.Void .ctor()
    // Offset: 0x194B0DC
    // Implemented from: UnityEngine.Component
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static Rigidbody* New_ctor();
  }; // UnityEngine.Rigidbody
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Rigidbody*, "UnityEngine", "Rigidbody");
#pragma pack(pop)
