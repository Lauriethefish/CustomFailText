// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:42 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.XR.AvailableTrackingData
#include "UnityEngine/XR/AvailableTrackingData.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Completed forward declares
// Type namespace: UnityEngine.XR
namespace UnityEngine::XR {
  // Autogenerated type: UnityEngine.XR.XRNodeState
  struct XRNodeState : public System::ValueType {
    public:
    // private UnityEngine.XR.XRNode m_Type
    // Offset: 0x0
    UnityEngine::XR::XRNode m_Type;
    // private UnityEngine.XR.AvailableTrackingData m_AvailableFields
    // Offset: 0x4
    UnityEngine::XR::AvailableTrackingData m_AvailableFields;
    // private UnityEngine.Vector3 m_Position
    // Offset: 0x8
    UnityEngine::Vector3 m_Position;
    // private UnityEngine.Quaternion m_Rotation
    // Offset: 0x14
    UnityEngine::Quaternion m_Rotation;
    // private UnityEngine.Vector3 m_Velocity
    // Offset: 0x24
    UnityEngine::Vector3 m_Velocity;
    // private UnityEngine.Vector3 m_AngularVelocity
    // Offset: 0x30
    UnityEngine::Vector3 m_AngularVelocity;
    // private UnityEngine.Vector3 m_Acceleration
    // Offset: 0x3C
    UnityEngine::Vector3 m_Acceleration;
    // private UnityEngine.Vector3 m_AngularAcceleration
    // Offset: 0x48
    UnityEngine::Vector3 m_AngularAcceleration;
    // private System.Int32 m_Tracked
    // Offset: 0x54
    int m_Tracked;
    // private System.UInt64 m_UniqueID
    // Offset: 0x58
    uint64_t m_UniqueID;
    // Creating value type constructor for type: XRNodeState
    XRNodeState(UnityEngine::XR::XRNode m_Type_ = {}, UnityEngine::XR::AvailableTrackingData m_AvailableFields_ = {}, UnityEngine::Vector3 m_Position_ = {}, UnityEngine::Quaternion m_Rotation_ = {}, UnityEngine::Vector3 m_Velocity_ = {}, UnityEngine::Vector3 m_AngularVelocity_ = {}, UnityEngine::Vector3 m_Acceleration_ = {}, UnityEngine::Vector3 m_AngularAcceleration_ = {}, int m_Tracked_ = {}, uint64_t m_UniqueID_ = {}) : m_Type{m_Type_}, m_AvailableFields{m_AvailableFields_}, m_Position{m_Position_}, m_Rotation{m_Rotation_}, m_Velocity{m_Velocity_}, m_AngularVelocity{m_AngularVelocity_}, m_Acceleration{m_Acceleration_}, m_AngularAcceleration{m_AngularAcceleration_}, m_Tracked{m_Tracked_}, m_UniqueID{m_UniqueID_} {}
    // public System.Void set_uniqueID(System.UInt64 value)
    // Offset: 0xA5B648
    void set_uniqueID(uint64_t value);
    // public UnityEngine.XR.XRNode get_nodeType()
    // Offset: 0xA5B650
    UnityEngine::XR::XRNode get_nodeType();
    // public System.Void set_nodeType(UnityEngine.XR.XRNode value)
    // Offset: 0xA5B658
    void set_nodeType(UnityEngine::XR::XRNode value);
    // public System.Void set_tracked(System.Boolean value)
    // Offset: 0xA5B660
    void set_tracked(bool value);
    // public System.Boolean TryGetPosition(UnityEngine.Vector3 position)
    // Offset: 0xA5B66C
    bool TryGetPosition(UnityEngine::Vector3& position);
    // public System.Boolean TryGetRotation(UnityEngine.Quaternion rotation)
    // Offset: 0xA5B684
    bool TryGetRotation(UnityEngine::Quaternion& rotation);
    // public System.Boolean TryGetVelocity(UnityEngine.Vector3 velocity)
    // Offset: 0xA5B69C
    bool TryGetVelocity(UnityEngine::Vector3& velocity);
    // public System.Boolean TryGetAngularVelocity(UnityEngine.Vector3 angularVelocity)
    // Offset: 0xA5B6B4
    bool TryGetAngularVelocity(UnityEngine::Vector3& angularVelocity);
    // public System.Boolean TryGetAcceleration(UnityEngine.Vector3 acceleration)
    // Offset: 0xA5B6CC
    bool TryGetAcceleration(UnityEngine::Vector3& acceleration);
    // public System.Boolean TryGetAngularAcceleration(UnityEngine.Vector3 angularAcceleration)
    // Offset: 0xA5B6E4
    bool TryGetAngularAcceleration(UnityEngine::Vector3& angularAcceleration);
    // private System.Boolean TryGet(UnityEngine.Vector3 inValue, UnityEngine.XR.AvailableTrackingData availabilityFlag, UnityEngine.Vector3 outValue)
    // Offset: 0xA5B6FC
    bool TryGet(UnityEngine::Vector3 inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, UnityEngine::Vector3& outValue);
    // private System.Boolean TryGet(UnityEngine.Quaternion inValue, UnityEngine.XR.AvailableTrackingData availabilityFlag, UnityEngine.Quaternion outValue)
    // Offset: 0xA5B704
    bool TryGet(UnityEngine::Quaternion inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, UnityEngine::Quaternion& outValue);
  }; // UnityEngine.XR.XRNodeState
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::XR::XRNodeState, "UnityEngine.XR", "XRNodeState");
#pragma pack(pop)
