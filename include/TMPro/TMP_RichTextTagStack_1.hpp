// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:20 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Autogenerated type: TMPro.TMP_RichTextTagStack`1
  template<typename T>
  struct TMP_RichTextTagStack_1 : public System::ValueType {
    public:
    // public T[] m_ItemStack
    // Offset: 0x0
    ::Array<T>* m_ItemStack;
    // public System.Int32 m_Index
    // Offset: 0x0
    int m_Index;
    // private System.Int32 m_Capacity
    // Offset: 0x0
    int m_Capacity;
    // private T m_DefaultItem
    // Offset: 0x0
    T m_DefaultItem;
    // Autogenerated static field getter
    // Get static field: static private System.Int32 k_DefaultCapacity
    static int _get_k_DefaultCapacity() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_RichTextTagStack_1<T>>::get(), "k_DefaultCapacity")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 k_DefaultCapacity
    static void _set_k_DefaultCapacity(int value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_RichTextTagStack_1<T>>::get(), "k_DefaultCapacity", value));
    }
    // Creating value type constructor for type: TMP_RichTextTagStack_1
    TMP_RichTextTagStack_1(::Array<T>* m_ItemStack_ = {}, int m_Index_ = {}, int m_Capacity_ = {}, T m_DefaultItem_ = {}) : m_ItemStack{m_ItemStack_}, m_Index{m_Index_}, m_Capacity{m_Capacity_}, m_DefaultItem{m_DefaultItem_} {}
    // public System.Void .ctor(T[] tagStack)
    // Offset: 0xA442A4
    static TMP_RichTextTagStack_1<T>* New_ctor(::Array<T>* tagStack) {
      return (TMP_RichTextTagStack_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_RichTextTagStack_1<T>>::get(), tagStack));
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xA442AC
    static TMP_RichTextTagStack_1<T>* New_ctor(int capacity) {
      return (TMP_RichTextTagStack_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_RichTextTagStack_1<T>>::get(), capacity));
    }
    // public System.Void Clear()
    // Offset: 0xA442B4
    void Clear() {
      CRASH_UNLESS(il2cpp_utils::RunMethod(*this, "Clear"));
    }
    // public System.Void SetDefault(T item)
    // Offset: 0xA442BC
    void SetDefault(T item) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(*this, "SetDefault", item));
    }
    // public System.Void Add(T item)
    // Offset: 0xA442C4
    void Add(T item) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(*this, "Add", item));
    }
    // public T Remove()
    // Offset: 0xA442CC
    T Remove() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(*this, "Remove"));
    }
    // public System.Void Push(T item)
    // Offset: 0xA442D4
    void Push(T item) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(*this, "Push", item));
    }
    // public T Pop()
    // Offset: 0xA442DC
    T Pop() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(*this, "Pop"));
    }
    // public T Peek()
    // Offset: 0xA442E4
    T Peek() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(*this, "Peek"));
    }
    // public T CurrentItem()
    // Offset: 0xA442EC
    T CurrentItem() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(*this, "CurrentItem"));
    }
    // public T PreviousItem()
    // Offset: 0xA442F4
    T PreviousItem() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(*this, "PreviousItem"));
    }
  }; // TMPro.TMP_RichTextTagStack`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(TMPro::TMP_RichTextTagStack_1, "TMPro", "TMP_RichTextTagStack`1");
#pragma pack(pop)
