// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:20 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: Color32
  struct Color32;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Autogenerated type: TMPro.TMPro_ExtensionMethods
  class TMPro_ExtensionMethods : public ::Il2CppObject {
    public:
    // static public System.String ArrayToString(System.Char[] chars)
    // Offset: 0xDB193C
    static ::Il2CppString* ArrayToString(::Array<::Il2CppChar>* chars);
    // static public System.String IntToString(System.Int32[] unicodes)
    // Offset: 0xDB1A00
    static ::Il2CppString* IntToString(::Array<int>* unicodes);
    // static public System.String IntToString(System.Int32[] unicodes, System.Int32 start, System.Int32 length)
    // Offset: 0xDB1AC0
    static ::Il2CppString* IntToString(::Array<int>* unicodes, int start, int length);
    // static public System.Int32 FindInstanceID(System.Collections.Generic.List`1<T> list, T target)
    // Offset: 0x11CB470
    template<class T>
    static int FindInstanceID(System::Collections::Generic::List_1<T>* list, T target) {
      static_assert(std::is_convertible_v<T, UnityEngine::Object*>);
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<int>("TMPro", "TMPro_ExtensionMethods", "FindInstanceID", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, list, target));
    }
    // static public System.Boolean Compare(UnityEngine.Color32 a, UnityEngine.Color32 b)
    // Offset: 0xDB1C08
    static bool Compare(UnityEngine::Color32 a, UnityEngine::Color32 b);
    // static public System.Boolean CompareRGB(UnityEngine.Color32 a, UnityEngine.Color32 b)
    // Offset: 0xDB1C4C
    static bool CompareRGB(UnityEngine::Color32 a, UnityEngine::Color32 b);
    // static public System.Boolean Compare(UnityEngine.Color a, UnityEngine.Color b)
    // Offset: 0xDB1C84
    static bool Compare(UnityEngine::Color a, UnityEngine::Color b);
    // static public System.Boolean CompareRGB(UnityEngine.Color a, UnityEngine.Color b)
    // Offset: 0xDB1CB4
    static bool CompareRGB(UnityEngine::Color a, UnityEngine::Color b);
    // static public UnityEngine.Color32 Multiply(UnityEngine.Color32 c1, UnityEngine.Color32 c2)
    // Offset: 0xDB1CDC
    static UnityEngine::Color32 Multiply(UnityEngine::Color32 c1, UnityEngine::Color32 c2);
    // static public UnityEngine.Color32 Tint(UnityEngine.Color32 c1, UnityEngine.Color32 c2)
    // Offset: 0xDB1DA0
    static UnityEngine::Color32 Tint(UnityEngine::Color32 c1, UnityEngine::Color32 c2);
    // static public UnityEngine.Color32 Tint(UnityEngine.Color32 c1, System.Single tint)
    // Offset: 0xDB1E64
    static UnityEngine::Color32 Tint(UnityEngine::Color32 c1, float tint);
    // static public System.Boolean Compare(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, System.Int32 accuracy)
    // Offset: 0xDB1FC0
    static bool Compare(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2, int accuracy);
    // static public System.Boolean Compare(UnityEngine.Quaternion q1, UnityEngine.Quaternion q2, System.Int32 accuracy)
    // Offset: 0xDB2018
    static bool Compare(UnityEngine::Quaternion q1, UnityEngine::Quaternion q2, int accuracy);
  }; // TMPro.TMPro_ExtensionMethods
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMPro_ExtensionMethods*, "TMPro", "TMPro_ExtensionMethods");
#pragma pack(pop)
