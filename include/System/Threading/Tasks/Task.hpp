// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:34 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskScheduler
  class TaskScheduler;
  // Forward declaring type: StackGuard
  class StackGuard;
  // Forward declaring type: TaskFactory
  class TaskFactory;
  // Forward declaring type: TaskCreationOptions
  struct TaskCreationOptions;
  // Forward declaring type: InternalTaskOptions
  struct InternalTaskOptions;
  // Forward declaring type: TaskContinuation
  class TaskContinuation;
  // Forward declaring type: TaskStatus
  struct TaskStatus;
  // Forward declaring type: TaskContinuationOptions
  struct TaskContinuationOptions;
  // Forward declaring type: ITaskCompletionAction
  class ITaskCompletionAction;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Delegate
  class Delegate;
  // Forward declaring type: AggregateException
  class AggregateException;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ContextCallback
  class ContextCallback;
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
  // Forward declaring type: ManualResetEventSlim
  class ManualResetEventSlim;
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
  // Forward declaring type: WaitHandle
  class WaitHandle;
  // Forward declaring type: ThreadAbortException
  class ThreadAbortException;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Forward declaring namespace: System::Runtime::CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: TaskAwaiter
  struct TaskAwaiter;
  // Forward declaring type: YieldAwaitable
  struct YieldAwaitable;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Autogenerated type: System.Threading.Tasks.Task
  class Task : public ::Il2CppObject, public System::Threading::IThreadPoolWorkItem, public System::IAsyncResult, public System::IDisposable {
    public:
    // Nested type: System::Threading::Tasks::Task::ContingentProperties
    class ContingentProperties;
    // Nested type: System::Threading::Tasks::Task::SetOnInvokeMres
    class SetOnInvokeMres;
    // Nested type: System::Threading::Tasks::Task::DelayPromise
    class DelayPromise;
    // Nested type: System::Threading::Tasks::Task::$$c__DisplayClass178_0
    class $$c__DisplayClass178_0;
    // Nested type: System::Threading::Tasks::Task::$$c
    class $$c;
    // Get static field: static System.Threading.Tasks.Task t_currentTask
    static System::Threading::Tasks::Task* _get_t_currentTask();
    // Set static field: static System.Threading.Tasks.Task t_currentTask
    static void _set_t_currentTask(System::Threading::Tasks::Task* value);
    // Get static field: static private System.Threading.Tasks.StackGuard t_stackGuard
    static System::Threading::Tasks::StackGuard* _get_t_stackGuard();
    // Set static field: static private System.Threading.Tasks.StackGuard t_stackGuard
    static void _set_t_stackGuard(System::Threading::Tasks::StackGuard* value);
    // Get static field: static System.Int32 s_taskIdCounter
    static int _get_s_taskIdCounter();
    // Set static field: static System.Int32 s_taskIdCounter
    static void _set_s_taskIdCounter(int value);
    // Get static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
    static System::Threading::Tasks::TaskFactory* _get_s_factory();
    // Set static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
    static void _set_s_factory(System::Threading::Tasks::TaskFactory* value);
    // private System.Int32 m_taskId
    // Offset: 0x10
    int m_taskId;
    // System.Object m_action
    // Offset: 0x18
    ::Il2CppObject* m_action;
    // System.Object m_stateObject
    // Offset: 0x20
    ::Il2CppObject* m_stateObject;
    // System.Threading.Tasks.TaskScheduler m_taskScheduler
    // Offset: 0x28
    System::Threading::Tasks::TaskScheduler* m_taskScheduler;
    // readonly System.Threading.Tasks.Task m_parent
    // Offset: 0x30
    System::Threading::Tasks::Task* m_parent;
    // System.Int32 m_stateFlags
    // Offset: 0x38
    int m_stateFlags;
    // static field const value: static private System.Int32 OptionsMask
    static constexpr const int OptionsMask = 65535;
    // Get static field: static private System.Int32 OptionsMask
    static int _get_OptionsMask();
    // Set static field: static private System.Int32 OptionsMask
    static void _set_OptionsMask(int value);
    // static field const value: static System.Int32 TASK_STATE_STARTED
    static constexpr const int TASK_STATE_STARTED = 65536;
    // Get static field: static System.Int32 TASK_STATE_STARTED
    static int _get_TASK_STATE_STARTED();
    // Set static field: static System.Int32 TASK_STATE_STARTED
    static void _set_TASK_STATE_STARTED(int value);
    // static field const value: static System.Int32 TASK_STATE_DELEGATE_INVOKED
    static constexpr const int TASK_STATE_DELEGATE_INVOKED = 131072;
    // Get static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
    static int _get_TASK_STATE_DELEGATE_INVOKED();
    // Set static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
    static void _set_TASK_STATE_DELEGATE_INVOKED(int value);
    // static field const value: static System.Int32 TASK_STATE_DISPOSED
    static constexpr const int TASK_STATE_DISPOSED = 262144;
    // Get static field: static System.Int32 TASK_STATE_DISPOSED
    static int _get_TASK_STATE_DISPOSED();
    // Set static field: static System.Int32 TASK_STATE_DISPOSED
    static void _set_TASK_STATE_DISPOSED(int value);
    // static field const value: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
    static constexpr const int TASK_STATE_EXCEPTIONOBSERVEDBYPARENT = 524288;
    // Get static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
    static int _get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT();
    // Set static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
    static void _set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT(int value);
    // static field const value: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
    static constexpr const int TASK_STATE_CANCELLATIONACKNOWLEDGED = 1048576;
    // Get static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
    static int _get_TASK_STATE_CANCELLATIONACKNOWLEDGED();
    // Set static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
    static void _set_TASK_STATE_CANCELLATIONACKNOWLEDGED(int value);
    // static field const value: static System.Int32 TASK_STATE_FAULTED
    static constexpr const int TASK_STATE_FAULTED = 2097152;
    // Get static field: static System.Int32 TASK_STATE_FAULTED
    static int _get_TASK_STATE_FAULTED();
    // Set static field: static System.Int32 TASK_STATE_FAULTED
    static void _set_TASK_STATE_FAULTED(int value);
    // static field const value: static System.Int32 TASK_STATE_CANCELED
    static constexpr const int TASK_STATE_CANCELED = 4194304;
    // Get static field: static System.Int32 TASK_STATE_CANCELED
    static int _get_TASK_STATE_CANCELED();
    // Set static field: static System.Int32 TASK_STATE_CANCELED
    static void _set_TASK_STATE_CANCELED(int value);
    // static field const value: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
    static constexpr const int TASK_STATE_WAITING_ON_CHILDREN = 8388608;
    // Get static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
    static int _get_TASK_STATE_WAITING_ON_CHILDREN();
    // Set static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
    static void _set_TASK_STATE_WAITING_ON_CHILDREN(int value);
    // static field const value: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
    static constexpr const int TASK_STATE_RAN_TO_COMPLETION = 16777216;
    // Get static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
    static int _get_TASK_STATE_RAN_TO_COMPLETION();
    // Set static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
    static void _set_TASK_STATE_RAN_TO_COMPLETION(int value);
    // static field const value: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
    static constexpr const int TASK_STATE_WAITINGFORACTIVATION = 33554432;
    // Get static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
    static int _get_TASK_STATE_WAITINGFORACTIVATION();
    // Set static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
    static void _set_TASK_STATE_WAITINGFORACTIVATION(int value);
    // static field const value: static System.Int32 TASK_STATE_COMPLETION_RESERVED
    static constexpr const int TASK_STATE_COMPLETION_RESERVED = 67108864;
    // Get static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
    static int _get_TASK_STATE_COMPLETION_RESERVED();
    // Set static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
    static void _set_TASK_STATE_COMPLETION_RESERVED(int value);
    // static field const value: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
    static constexpr const int TASK_STATE_THREAD_WAS_ABORTED = 134217728;
    // Get static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
    static int _get_TASK_STATE_THREAD_WAS_ABORTED();
    // Set static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
    static void _set_TASK_STATE_THREAD_WAS_ABORTED(int value);
    // static field const value: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
    static constexpr const int TASK_STATE_WAIT_COMPLETION_NOTIFICATION = 268435456;
    // Get static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
    static int _get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION();
    // Set static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
    static void _set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION(int value);
    // static field const value: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
    static constexpr const int TASK_STATE_EXECUTIONCONTEXT_IS_NULL = 536870912;
    // Get static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
    static int _get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL();
    // Set static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
    static void _set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL(int value);
    // static field const value: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
    static constexpr const int TASK_STATE_TASKSCHEDULED_WAS_FIRED = 1073741824;
    // Get static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
    static int _get_TASK_STATE_TASKSCHEDULED_WAS_FIRED();
    // Set static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
    static void _set_TASK_STATE_TASKSCHEDULED_WAS_FIRED(int value);
    // static field const value: static private System.Int32 TASK_STATE_COMPLETED_MASK
    static constexpr const int TASK_STATE_COMPLETED_MASK = 23068672;
    // Get static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
    static int _get_TASK_STATE_COMPLETED_MASK();
    // Set static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
    static void _set_TASK_STATE_COMPLETED_MASK(int value);
    // static field const value: static private System.Int32 CANCELLATION_REQUESTED
    static constexpr const int CANCELLATION_REQUESTED = 1;
    // Get static field: static private System.Int32 CANCELLATION_REQUESTED
    static int _get_CANCELLATION_REQUESTED();
    // Set static field: static private System.Int32 CANCELLATION_REQUESTED
    static void _set_CANCELLATION_REQUESTED(int value);
    // private System.Object m_continuationObject
    // Offset: 0x40
    ::Il2CppObject* m_continuationObject;
    // Get static field: static private readonly System.Object s_taskCompletionSentinel
    static ::Il2CppObject* _get_s_taskCompletionSentinel();
    // Set static field: static private readonly System.Object s_taskCompletionSentinel
    static void _set_s_taskCompletionSentinel(::Il2CppObject* value);
    // Get static field: static System.Boolean s_asyncDebuggingEnabled
    static bool _get_s_asyncDebuggingEnabled();
    // Set static field: static System.Boolean s_asyncDebuggingEnabled
    static void _set_s_asyncDebuggingEnabled(bool value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
    static System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* _get_s_currentActiveTasks();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
    static void _set_s_currentActiveTasks(System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* value);
    // Get static field: static private readonly System.Object s_activeTasksLock
    static ::Il2CppObject* _get_s_activeTasksLock();
    // Set static field: static private readonly System.Object s_activeTasksLock
    static void _set_s_activeTasksLock(::Il2CppObject* value);
    // System.Threading.Tasks.Task/ContingentProperties m_contingentProperties
    // Offset: 0x48
    System::Threading::Tasks::Task::ContingentProperties* m_contingentProperties;
    // Get static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
    static System::Action_1<::Il2CppObject*>* _get_s_taskCancelCallback();
    // Set static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
    static void _set_s_taskCancelCallback(System::Action_1<::Il2CppObject*>* value);
    // Get static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
    static System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* _get_s_createContingentProperties();
    // Set static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
    static void _set_s_createContingentProperties(System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* value);
    // Get static field: static private System.Threading.Tasks.Task s_completedTask
    static System::Threading::Tasks::Task* _get_s_completedTask();
    // Set static field: static private System.Threading.Tasks.Task s_completedTask
    static void _set_s_completedTask(System::Threading::Tasks::Task* value);
    // Get static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
    static System::Predicate_1<System::Threading::Tasks::Task*>* _get_s_IsExceptionObservedByParentPredicate();
    // Set static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
    static void _set_s_IsExceptionObservedByParentPredicate(System::Predicate_1<System::Threading::Tasks::Task*>* value);
    // Get static field: static private System.Threading.ContextCallback s_ecCallback
    static System::Threading::ContextCallback* _get_s_ecCallback();
    // Set static field: static private System.Threading.ContextCallback s_ecCallback
    static void _set_s_ecCallback(System::Threading::ContextCallback* value);
    // Get static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
    static System::Predicate_1<::Il2CppObject*>* _get_s_IsTaskContinuationNullPredicate();
    // Set static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
    static void _set_s_IsTaskContinuationNullPredicate(System::Predicate_1<::Il2CppObject*>* value);
    // static System.Boolean AddToActiveTasks(System.Threading.Tasks.Task task)
    // Offset: 0xCC9160
    static bool AddToActiveTasks(System::Threading::Tasks::Task* task);
    // static System.Void RemoveFromActiveTasks(System.Int32 taskId)
    // Offset: 0xCC9F4C
    static void RemoveFromActiveTasks(int taskId);
    // System.Void .ctor(System.Boolean canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct)
    // Offset: 0xCCA070
    static Task* New_ctor(bool canceled, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::CancellationToken ct);
    // System.Void .ctor(System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Boolean promiseStyle)
    // Offset: 0xCCA1BC
    static Task* New_ctor(::Il2CppObject* state, System::Threading::Tasks::TaskCreationOptions creationOptions, bool promiseStyle);
    // System.Void .ctor(System.Delegate action, System.Object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xCC7D70
    static Task* New_ctor(System::Delegate* action, ::Il2CppObject* state, System::Threading::Tasks::Task* parent, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler);
    // System.Void TaskConstructorCore(System.Object action, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xCCA2FC
    void TaskConstructorCore(::Il2CppObject* action, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler);
    // private System.Void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation)
    // Offset: 0xCCA560
    void AssignCancellationToken(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::Task* antecedent, System::Threading::Tasks::TaskContinuation* continuation);
    // static private System.Void TaskCancelCallback(System.Object o)
    // Offset: 0xCCA944
    static void TaskCancelCallback(::Il2CppObject* o);
    // System.Void PossiblyCaptureContext(System.Threading.StackCrawlMark stackMark)
    // Offset: 0xCC8DE8
    void PossiblyCaptureContext(System::Threading::StackCrawlMark& stackMark);
    // System.Threading.Tasks.TaskCreationOptions get_Options()
    // Offset: 0xCCA888
    System::Threading::Tasks::TaskCreationOptions get_Options();
    // static System.Threading.Tasks.TaskCreationOptions OptionsMethod(System.Int32 flags)
    // Offset: 0xCCAC64
    static System::Threading::Tasks::TaskCreationOptions OptionsMethod(int flags);
    // System.Boolean AtomicStateUpdate(System.Int32 newBits, System.Int32 illegalBits)
    // Offset: 0xCCAC6C
    bool AtomicStateUpdate(int newBits, int illegalBits);
    // System.Boolean AtomicStateUpdate(System.Int32 newBits, System.Int32 illegalBits, System.Int32 oldFlags)
    // Offset: 0xCCACFC
    bool AtomicStateUpdate(int newBits, int illegalBits, int& oldFlags);
    // System.Void SetNotificationForWaitCompletion(System.Boolean enabled)
    // Offset: 0xCCAD9C
    void SetNotificationForWaitCompletion(bool enabled);
    // System.Boolean NotifyDebuggerOfWaitCompletionIfNecessary()
    // Offset: 0xCC8F48
    bool NotifyDebuggerOfWaitCompletionIfNecessary();
    // System.Boolean get_IsWaitNotificationEnabledOrNotRanToCompletion()
    // Offset: 0xCCAE6C
    bool get_IsWaitNotificationEnabledOrNotRanToCompletion();
    // System.Boolean get_ShouldNotifyDebuggerOfWaitCompletion()
    // Offset: 0xCCAEA0
    bool get_ShouldNotifyDebuggerOfWaitCompletion();
    // System.Boolean get_IsWaitNotificationEnabled()
    // Offset: 0xCCAE1C
    bool get_IsWaitNotificationEnabled();
    // private System.Void NotifyDebuggerOfWaitCompletion()
    // Offset: 0xCCAE40
    void NotifyDebuggerOfWaitCompletion();
    // System.Boolean MarkStarted()
    // Offset: 0xCCAEC4
    bool MarkStarted();
    // System.Boolean FireTaskScheduledIfNeeded(System.Threading.Tasks.TaskScheduler ts)
    // Offset: 0xCCAED0
    bool FireTaskScheduledIfNeeded(System::Threading::Tasks::TaskScheduler* ts);
    // System.Void AddNewChild()
    // Offset: 0xCCA4C0
    void AddNewChild();
    // System.Void DisregardChild()
    // Offset: 0xCCA8F4
    void DisregardChild();
    // static System.Threading.Tasks.Task InternalStartNew(System.Threading.Tasks.Task creatingTask, System.Delegate action, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.Tasks.TaskCreationOptions options, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.StackCrawlMark stackMark)
    // Offset: 0xCCAEFC
    static System::Threading::Tasks::Task* InternalStartNew(System::Threading::Tasks::Task* creatingTask, System::Delegate* action, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::Tasks::TaskCreationOptions options, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::StackCrawlMark& stackMark);
    // static System.Int32 NewId()
    // Offset: 0xCCB018
    static int NewId();
    // public System.Int32 get_Id()
    // Offset: 0xCC90C8
    int get_Id();
    // static System.Threading.Tasks.Task get_InternalCurrent()
    // Offset: 0xCCB088
    static System::Threading::Tasks::Task* get_InternalCurrent();
    // static System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions)
    // Offset: 0xCC8D34
    static System::Threading::Tasks::Task* InternalCurrentIfAttached(System::Threading::Tasks::TaskCreationOptions creationOptions);
    // static System.Threading.Tasks.StackGuard get_CurrentStackGuard()
    // Offset: 0xCCB0F0
    static System::Threading::Tasks::StackGuard* get_CurrentStackGuard();
    // public System.AggregateException get_Exception()
    // Offset: 0xCCB1A8
    System::AggregateException* get_Exception();
    // public System.Threading.Tasks.TaskStatus get_Status()
    // Offset: 0xCCB360
    System::Threading::Tasks::TaskStatus get_Status();
    // public System.Boolean get_IsCanceled()
    // Offset: 0xCC9470
    bool get_IsCanceled();
    // System.Boolean get_IsCancellationRequested()
    // Offset: 0xCCB3CC
    bool get_IsCancellationRequested();
    // System.Threading.Tasks.Task/ContingentProperties EnsureContingentPropertiesInitialized(System.Boolean needsProtection)
    // Offset: 0xCCA838
    System::Threading::Tasks::Task::ContingentProperties* EnsureContingentPropertiesInitialized(bool needsProtection);
    // private System.Threading.Tasks.Task/ContingentProperties EnsureContingentPropertiesInitializedCore(System.Boolean needsProtection)
    // Offset: 0xCCB420
    System::Threading::Tasks::Task::ContingentProperties* EnsureContingentPropertiesInitializedCore(bool needsProtection);
    // System.Threading.CancellationToken get_CancellationToken()
    // Offset: 0xCCB504
    System::Threading::CancellationToken get_CancellationToken();
    // System.Boolean get_IsCancellationAcknowledged()
    // Offset: 0xCCB534
    bool get_IsCancellationAcknowledged();
    // public System.Boolean get_IsCompleted()
    // Offset: 0xCCB558
    bool get_IsCompleted();
    // static private System.Boolean IsCompletedMethod(System.Int32 flags)
    // Offset: 0xCCB5CC
    static bool IsCompletedMethod(int flags);
    // System.Boolean get_IsRanToCompletion()
    // Offset: 0xCC943C
    bool get_IsRanToCompletion();
    // public System.Threading.Tasks.TaskCreationOptions get_CreationOptions()
    // Offset: 0xCCA4A8
    System::Threading::Tasks::TaskCreationOptions get_CreationOptions();
    // System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler()
    // Offset: 0xCCB798
    System::Threading::Tasks::TaskScheduler* get_ExecutingTaskScheduler();
    // static public System.Threading.Tasks.TaskFactory get_Factory()
    // Offset: 0xCCB7A0
    static System::Threading::Tasks::TaskFactory* get_Factory();
    // static public System.Threading.Tasks.Task get_CompletedTask()
    // Offset: 0xCCB808
    static System::Threading::Tasks::Task* get_CompletedTask();
    // System.Threading.ManualResetEventSlim get_CompletedEvent()
    // Offset: 0xCCB690
    System::Threading::ManualResetEventSlim* get_CompletedEvent();
    // System.Boolean get_IsSelfReplicatingRoot()
    // Offset: 0xCCAED8
    bool get_IsSelfReplicatingRoot();
    // System.Boolean get_IsChildReplica()
    // Offset: 0xCCB8BC
    bool get_IsChildReplica();
    // System.Boolean get_ExceptionRecorded()
    // Offset: 0xCCB8D4
    bool get_ExceptionRecorded();
    // public System.Boolean get_IsFaulted()
    // Offset: 0xCCB1E8
    bool get_IsFaulted();
    // System.Threading.ExecutionContext get_CapturedContext()
    // Offset: 0xCCB954
    System::Threading::ExecutionContext* get_CapturedContext();
    // System.Void set_CapturedContext(System.Threading.ExecutionContext value)
    // Offset: 0xCC7E74
    void set_CapturedContext(System::Threading::ExecutionContext* value);
    // static private System.Threading.ExecutionContext CopyExecutionContext(System.Threading.ExecutionContext capturedContext)
    // Offset: 0xCCBA24
    static System::Threading::ExecutionContext* CopyExecutionContext(System::Threading::ExecutionContext* capturedContext);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0xCCBB78
    void Dispose(bool disposing);
    // System.Void ScheduleAndStart(System.Boolean needsProtection)
    // Offset: 0xCC9638
    void ScheduleAndStart(bool needsProtection);
    // System.Void AddException(System.Object exceptionObject)
    // Offset: 0xCCBCB4
    void AddException(::Il2CppObject* exceptionObject);
    // System.Void AddException(System.Object exceptionObject, System.Boolean representsCancellation)
    // Offset: 0xCCBFF0
    void AddException(::Il2CppObject* exceptionObject, bool representsCancellation);
    // private System.AggregateException GetExceptions(System.Boolean includeTaskCanceledExceptions)
    // Offset: 0xCCB20C
    System::AggregateException* GetExceptions(bool includeTaskCanceledExceptions);
    // System.Collections.ObjectModel.ReadOnlyCollection`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos()
    // Offset: 0xCCC458
    System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* GetExceptionDispatchInfos();
    // System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo()
    // Offset: 0xCCC5A4
    System::Runtime::ExceptionServices::ExceptionDispatchInfo* GetCancellationExceptionDispatchInfo();
    // System.Void ThrowIfExceptional(System.Boolean includeTaskCanceledExceptions)
    // Offset: 0xCCC5E0
    void ThrowIfExceptional(bool includeTaskCanceledExceptions);
    // System.Void UpdateExceptionObservedStatus()
    // Offset: 0xCCC65C
    void UpdateExceptionObservedStatus();
    // System.Boolean get_IsExceptionObservedByParent()
    // Offset: 0xCCC754
    bool get_IsExceptionObservedByParent();
    // System.Boolean get_IsDelegateInvoked()
    // Offset: 0xCCC778
    bool get_IsDelegateInvoked();
    // System.Void Finish(System.Boolean bUserDelegateExecuted)
    // Offset: 0xCCBDD4
    void Finish(bool bUserDelegateExecuted);
    // System.Void FinishStageTwo()
    // Offset: 0xCCC79C
    void FinishStageTwo();
    // System.Void FinishStageThree()
    // Offset: 0xCCCCCC
    void FinishStageThree();
    // System.Void ProcessChildCompletion(System.Threading.Tasks.Task childTask)
    // Offset: 0xCCCD30
    void ProcessChildCompletion(System::Threading::Tasks::Task* childTask);
    // System.Void AddExceptionsFromChildren()
    // Offset: 0xCCC994
    void AddExceptionsFromChildren();
    // System.Void FinishThreadAbortedTask(System.Boolean bTAEAddedToExceptionHolder, System.Boolean delegateRan)
    // Offset: 0xCCBCBC
    void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan);
    // private System.Void Execute()
    // Offset: 0xCCD410
    void Execute();
    // System.Boolean ShouldReplicate()
    // Offset: 0xCCD7AC
    bool ShouldReplicate();
    // System.Threading.Tasks.Task CreateReplicaTask(System.Action`1<System.Object> taskReplicaDelegate, System.Object stateObject, System.Threading.Tasks.Task parentTask, System.Threading.Tasks.TaskScheduler taskScheduler, System.Threading.Tasks.TaskCreationOptions creationOptionsForReplica, System.Threading.Tasks.InternalTaskOptions internalOptionsForReplica)
    // Offset: 0xCCD7B4
    System::Threading::Tasks::Task* CreateReplicaTask(System::Action_1<::Il2CppObject*>* taskReplicaDelegate, ::Il2CppObject* stateObject, System::Threading::Tasks::Task* parentTask, System::Threading::Tasks::TaskScheduler* taskScheduler, System::Threading::Tasks::TaskCreationOptions creationOptionsForReplica, System::Threading::Tasks::InternalTaskOptions internalOptionsForReplica);
    // System.Object get_SavedStateForNextReplica()
    // Offset: 0xCCD868
    ::Il2CppObject* get_SavedStateForNextReplica();
    // System.Void set_SavedStateFromPreviousReplica(System.Object value)
    // Offset: 0xCCD870
    void set_SavedStateFromPreviousReplica(::Il2CppObject* value);
    // System.Threading.Tasks.Task get_HandedOverChildReplica()
    // Offset: 0xCCD874
    System::Threading::Tasks::Task* get_HandedOverChildReplica();
    // System.Void set_HandedOverChildReplica(System.Threading.Tasks.Task value)
    // Offset: 0xCCD87C
    void set_HandedOverChildReplica(System::Threading::Tasks::Task* value);
    // static private System.Void ExecuteSelfReplicating(System.Threading.Tasks.Task root)
    // Offset: 0xCCD590
    static void ExecuteSelfReplicating(System::Threading::Tasks::Task* root);
    // System.Boolean ExecuteEntry(System.Boolean bPreventDoubleExecution)
    // Offset: 0xCCD890
    bool ExecuteEntry(bool bPreventDoubleExecution);
    // private System.Void ExecuteWithThreadLocal(System.Threading.Tasks.Task currentTaskSlot)
    // Offset: 0xCCDA1C
    void ExecuteWithThreadLocal(System::Threading::Tasks::Task*& currentTaskSlot);
    // static private System.Void ExecutionContextCallback(System.Object obj)
    // Offset: 0xCCDD38
    static void ExecutionContextCallback(::Il2CppObject* obj);
    // System.Void InnerInvoke()
    // Offset: 0xCCDDB8
    void InnerInvoke();
    // System.Void InnerInvokeWithArg(System.Threading.Tasks.Task childTask)
    // Offset: 0xCCDE64
    void InnerInvokeWithArg(System::Threading::Tasks::Task* childTask);
    // private System.Void HandleException(System.Exception unhandledException)
    // Offset: 0xCCD6A0
    void HandleException(System::Exception* unhandledException);
    // public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter()
    // Offset: 0xCCDEC4
    System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();
    // System.Void SetContinuationForAwait(System.Action continuationAction, System.Boolean continueOnCapturedContext, System.Boolean flowExecutionContext, System.Threading.StackCrawlMark stackMark)
    // Offset: 0xCCDEF0
    void SetContinuationForAwait(System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, System::Threading::StackCrawlMark& stackMark);
    // static public System.Runtime.CompilerServices.YieldAwaitable Yield()
    // Offset: 0xCCE21C
    static System::Runtime::CompilerServices::YieldAwaitable Yield();
    // private System.Boolean WrappedTryRunInline()
    // Offset: 0xCCE224
    bool WrappedTryRunInline();
    // System.Boolean InternalWait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xCCE508
    bool InternalWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
    // private System.Boolean SpinThenBlockingWait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xCCE788
    bool SpinThenBlockingWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
    // private System.Boolean SpinWait(System.Int32 millisecondsTimeout)
    // Offset: 0xCCE954
    bool SpinWait(int millisecondsTimeout);
    // System.Boolean InternalCancel(System.Boolean bCancelNonExecutingOnly)
    // Offset: 0xCC9854
    bool InternalCancel(bool bCancelNonExecutingOnly);
    // System.Void RecordInternalCancellationRequest()
    // Offset: 0xCCEB7C
    void RecordInternalCancellationRequest();
    // System.Void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord)
    // Offset: 0xCCEBC8
    void RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord);
    // System.Void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, System.Object cancellationException)
    // Offset: 0xCCEC7C
    void RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException);
    // System.Void CancellationCleanupLogic()
    // Offset: 0xCCDC40
    void CancellationCleanupLogic();
    // private System.Void SetCancellationAcknowledged()
    // Offset: 0xCCDE94
    void SetCancellationAcknowledged();
    // System.Void FinishContinuations()
    // Offset: 0xCCCEB0
    void FinishContinuations();
    // private System.Void LogFinishCompletionNotification()
    // Offset: 0xCCECEC
    void LogFinishCompletionNotification();
    // public System.Threading.Tasks.Task ContinueWith(System.Action`1<System.Threading.Tasks.Task> continuationAction)
    // Offset: 0xCCECF0
    System::Threading::Tasks::Task* ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction);
    // private System.Threading.Tasks.Task ContinueWith(System.Action`1<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.StackCrawlMark stackMark)
    // Offset: 0xCCEE48
    System::Threading::Tasks::Task* ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark);
    // public System.Threading.Tasks.Task ContinueWith(System.Action`2<System.Threading.Tasks.Task,System.Object> continuationAction, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xCCF208
    System::Threading::Tasks::Task* ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler* scheduler);
    // private System.Threading.Tasks.Task ContinueWith(System.Action`2<System.Threading.Tasks.Task,System.Object> continuationAction, System.Object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.StackCrawlMark stackMark)
    // Offset: 0xCCF240
    System::Threading::Tasks::Task* ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark);
    // static System.Void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions)
    // Offset: 0xCCEFA0
    static void CreationOptionsFromContinuationOptions(System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskCreationOptions& creationOptions, System::Threading::Tasks::InternalTaskOptions& internalOptions);
    // System.Void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options)
    // Offset: 0xCCF0E0
    void ContinueWithCore(System::Threading::Tasks::Task* continuationTask, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions options);
    // System.Void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action)
    // Offset: 0xCCF3A4
    void AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action);
    // private System.Void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, System.Boolean addBeforeOthers)
    // Offset: 0xCCEA98
    void AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers);
    // private System.Boolean AddTaskContinuationComplex(System.Object tc, System.Boolean addBeforeOthers)
    // Offset: 0xCCF3AC
    bool AddTaskContinuationComplex(::Il2CppObject* tc, bool addBeforeOthers);
    // private System.Boolean AddTaskContinuation(System.Object tc, System.Boolean addBeforeOthers)
    // Offset: 0xCCE188
    bool AddTaskContinuation(::Il2CppObject* tc, bool addBeforeOthers);
    // System.Void RemoveContinuation(System.Object continuationObject)
    // Offset: 0xCCAA0C
    void RemoveContinuation(::Il2CppObject* continuationObject);
    // static public System.Threading.Tasks.Task`1<TResult> FromResult(TResult result)
    // Offset: 0xC60B88
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* FromResult(TResult result) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<System::Threading::Tasks::Task_1<TResult>*>("System.Threading.Tasks", "Task", "FromResult", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, result));
    }
    // static System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken)
    // Offset: 0xCCF6CC
    static System::Threading::Tasks::Task* FromCancellation(System::Threading::CancellationToken cancellationToken);
    // static System.Threading.Tasks.Task`1<TResult> FromCancellation(System.Threading.CancellationToken cancellationToken)
    // Offset: 0xC607B4
    // ABORTED: conflicts with another method. static System::Threading::Tasks::Task_1<TResult>* FromCancellation(System::Threading::CancellationToken cancellationToken)
    // static public System.Threading.Tasks.Task Run(System.Func`1<System.Threading.Tasks.Task> function)
    // Offset: 0xCCF78C
    static System::Threading::Tasks::Task* Run(System::Func_1<System::Threading::Tasks::Task*>* function);
    // static public System.Threading.Tasks.Task Run(System.Func`1<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xCCF7F4
    static System::Threading::Tasks::Task* Run(System::Func_1<System::Threading::Tasks::Task*>* function, System::Threading::CancellationToken cancellationToken);
    // static public System.Threading.Tasks.Task Delay(System.Int32 millisecondsDelay)
    // Offset: 0xCCF9F4
    static System::Threading::Tasks::Task* Delay(int millisecondsDelay);
    // static public System.Threading.Tasks.Task Delay(System.Int32 millisecondsDelay, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xCC6144
    static System::Threading::Tasks::Task* Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);
    // static public System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> WhenAny(System.Threading.Tasks.Task[] tasks)
    // Offset: 0xCC646C
    static System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* WhenAny(::Array<System::Threading::Tasks::Task*>* tasks);
    // static private System.Void .cctor()
    // Offset: 0xCCFDF4
    static void _cctor();
    // System.Void .ctor()
    // Offset: 0xCCA188
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Task* New_ctor();
    // private System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle()
    // Offset: 0xCCB5DC
    // Implemented from: System.IAsyncResult
    // Base method: System.Threading.WaitHandle IAsyncResult::get_AsyncWaitHandle()
    System::Threading::WaitHandle* System_IAsyncResult_get_AsyncWaitHandle();
    // public System.Object get_AsyncState()
    // Offset: 0xCCB790
    // Implemented from: System.IAsyncResult
    // Base method: System.Object IAsyncResult::get_AsyncState()
    ::Il2CppObject* get_AsyncState();
    // public System.Void Dispose()
    // Offset: 0xCCBAFC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // private System.Void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
    // Offset: 0xCCD888
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::ExecuteWorkItem()
    void System_Threading_IThreadPoolWorkItem_ExecuteWorkItem();
    // private System.Void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae)
    // Offset: 0xCCD9D0
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::MarkAborted(System.Threading.ThreadAbortException tae)
    void System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae);
  }; // System.Threading.Tasks.Task
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Tasks::Task*, "System.Threading.Tasks", "Task");
#pragma pack(pop)
