// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:34 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Autogenerated type: System.Threading.Interlocked
  class Interlocked : public ::Il2CppObject {
    public:
    // static public System.Int32 CompareExchange(System.Int32 location1, System.Int32 value, System.Int32 comparand)
    // Offset: 0x13C1F20
    static int CompareExchange(int& location1, int value, int comparand);
    // static System.Int32 CompareExchange(System.Int32 location1, System.Int32 value, System.Int32 comparand, System.Boolean succeeded)
    // Offset: 0x13C4A10
    static int CompareExchange(int& location1, int value, int comparand, bool& succeeded);
    // static public System.Object CompareExchange(System.Object location1, System.Object value, System.Object comparand)
    // Offset: 0x13C4A14
    static ::Il2CppObject* CompareExchange(::Il2CppObject*& location1, ::Il2CppObject* value, ::Il2CppObject* comparand);
    // static public System.Single CompareExchange(System.Single location1, System.Single value, System.Single comparand)
    // Offset: 0x13C4A18
    static float CompareExchange(float& location1, float value, float comparand);
    // static public System.Int32 Decrement(System.Int32 location)
    // Offset: 0x13C4A1C
    static int Decrement(int& location);
    // static public System.Int32 Increment(System.Int32 location)
    // Offset: 0x13C4A20
    static int Increment(int& location);
    // static public System.Int64 Increment(System.Int64 location)
    // Offset: 0x13C4A24
    static int64_t Increment(int64_t& location);
    // static public System.Int32 Exchange(System.Int32 location1, System.Int32 value)
    // Offset: 0x13C2428
    static int Exchange(int& location1, int value);
    // static public System.Object Exchange(System.Object location1, System.Object value)
    // Offset: 0x13C4A28
    static ::Il2CppObject* Exchange(::Il2CppObject*& location1, ::Il2CppObject* value);
    // static public System.Single Exchange(System.Single location1, System.Single value)
    // Offset: 0x13C4A2C
    static float Exchange(float& location1, float value);
    // static public System.Int64 CompareExchange(System.Int64 location1, System.Int64 value, System.Int64 comparand)
    // Offset: 0x13C4A30
    static int64_t CompareExchange(int64_t& location1, int64_t value, int64_t comparand);
    // static public System.IntPtr CompareExchange(System.IntPtr location1, System.IntPtr value, System.IntPtr comparand)
    // Offset: 0x13C4A34
    static System::IntPtr CompareExchange(System::IntPtr& location1, System::IntPtr value, System::IntPtr comparand);
    // static public System.Double CompareExchange(System.Double location1, System.Double value, System.Double comparand)
    // Offset: 0x13C4A38
    static double CompareExchange(double& location1, double value, double comparand);
    // static public T CompareExchange(T location1, T value, T comparand)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T CompareExchange(T& location1, T value, T comparand) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<T>("System.Threading", "Interlocked", "CompareExchange", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, location1, value, comparand));
    }
    // static public System.Int64 Exchange(System.Int64 location1, System.Int64 value)
    // Offset: 0x13C4A3C
    static int64_t Exchange(int64_t& location1, int64_t value);
    // static public System.IntPtr Exchange(System.IntPtr location1, System.IntPtr value)
    // Offset: 0x13C4A40
    static System::IntPtr Exchange(System::IntPtr& location1, System::IntPtr value);
    // static public System.Double Exchange(System.Double location1, System.Double value)
    // Offset: 0x13C4A44
    static double Exchange(double& location1, double value);
    // static public T Exchange(T location1, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Exchange(T& location1, T value) {
      return CRASH_UNLESS(il2cpp_utils::RunGenericMethod<T>("System.Threading", "Interlocked", "Exchange", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, location1, value));
    }
    // static public System.Int64 Read(System.Int64 location)
    // Offset: 0x13C4A48
    static int64_t Read(int64_t& location);
    // static public System.Int32 Add(System.Int32 location1, System.Int32 value)
    // Offset: 0x13C4A4C
    static int Add(int& location1, int value);
  }; // System.Threading.Interlocked
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Interlocked*, "System.Threading", "Interlocked");
#pragma pack(pop)
