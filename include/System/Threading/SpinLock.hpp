// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:33 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Autogenerated type: System.Threading.SpinLock
  struct SpinLock : public System::ValueType {
    public:
    // Nested type: System::Threading::SpinLock::SystemThreading_SpinLockDebugView
    class SystemThreading_SpinLockDebugView;
    // private System.Int32 m_owner
    // Offset: 0x0
    int m_owner;
    // Get static field: static private System.Int32 MAXIMUM_WAITERS
    static int _get_MAXIMUM_WAITERS();
    // Set static field: static private System.Int32 MAXIMUM_WAITERS
    static void _set_MAXIMUM_WAITERS(int value);
    // Creating value type constructor for type: SpinLock
    SpinLock(int m_owner_ = {}) : m_owner{m_owner_} {}
    // public System.Void .ctor(System.Boolean enableThreadOwnerTracking)
    // Offset: 0xA29124
    static SpinLock* New_ctor(bool enableThreadOwnerTracking);
    // public System.Void Enter(System.Boolean lockTaken)
    // Offset: 0xA29130
    void Enter(bool& lockTaken);
    // public System.Void TryEnter(System.Int32 millisecondsTimeout, System.Boolean lockTaken)
    // Offset: 0xA29138
    void TryEnter(int millisecondsTimeout, bool& lockTaken);
    // private System.Void ContinueTryEnter(System.Int32 millisecondsTimeout, System.Boolean lockTaken)
    // Offset: 0xA29140
    void ContinueTryEnter(int millisecondsTimeout, bool& lockTaken);
    // private System.Void DecrementWaiters()
    // Offset: 0xA29148
    void DecrementWaiters();
    // private System.Void ContinueTryEnterWithThreadTracking(System.Int32 millisecondsTimeout, System.UInt32 startTime, System.Boolean lockTaken)
    // Offset: 0xA29150
    void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, bool& lockTaken);
    // public System.Void Exit(System.Boolean useMemoryBarrier)
    // Offset: 0xA29158
    void Exit(bool useMemoryBarrier);
    // private System.Void ExitSlowPath(System.Boolean useMemoryBarrier)
    // Offset: 0xA29164
    void ExitSlowPath(bool useMemoryBarrier);
    // public System.Boolean get_IsHeldByCurrentThread()
    // Offset: 0xA29170
    bool get_IsHeldByCurrentThread();
    // public System.Boolean get_IsThreadOwnerTrackingEnabled()
    // Offset: 0xA29178
    bool get_IsThreadOwnerTrackingEnabled();
    // static private System.Void .cctor()
    // Offset: 0xCC7708
    static void _cctor();
  }; // System.Threading.SpinLock
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::SpinLock, "System.Threading", "SpinLock");
#pragma pack(pop)
