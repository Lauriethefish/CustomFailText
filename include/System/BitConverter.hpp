// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:25 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Completed forward declares
// Type namespace: System
namespace System {
  // Autogenerated type: System.BitConverter
  class BitConverter : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Boolean IsLittleEndian
    static bool _get_IsLittleEndian();
    // Set static field: static public readonly System.Boolean IsLittleEndian
    static void _set_IsLittleEndian(bool value);
    // static private System.Boolean AmILittleEndian()
    // Offset: 0x13170F8
    static bool AmILittleEndian();
    // static public System.Byte[] GetBytes(System.Int16 value)
    // Offset: 0x1317100
    static ::Array<uint8_t>* GetBytes(int16_t value);
    // static public System.Byte[] GetBytes(System.Int32 value)
    // Offset: 0x1317174
    static ::Array<uint8_t>* GetBytes(int value);
    // static public System.Byte[] GetBytes(System.Int64 value)
    // Offset: 0x13171E8
    static ::Array<uint8_t>* GetBytes(int64_t value);
    // static public System.Byte[] GetBytes(System.UInt16 value)
    // Offset: 0x131725C
    static ::Array<uint8_t>* GetBytes(uint16_t value);
    // static public System.Byte[] GetBytes(System.UInt32 value)
    // Offset: 0x13172C0
    static ::Array<uint8_t>* GetBytes(uint value);
    // static public System.Int16 ToInt16(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x1317324
    static int16_t ToInt16(::Array<uint8_t>* value, int startIndex);
    // static public System.Int32 ToInt32(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x1317434
    static int ToInt32(::Array<uint8_t>* value, int startIndex);
    // static public System.Int64 ToInt64(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x1317560
    static int64_t ToInt64(::Array<uint8_t>* value, int startIndex);
    // static public System.UInt16 ToUInt16(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x13176B8
    static uint16_t ToUInt16(::Array<uint8_t>* value, int startIndex);
    // static public System.UInt32 ToUInt32(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x131777C
    static uint ToUInt32(::Array<uint8_t>* value, int startIndex);
    // static public System.UInt64 ToUInt64(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x1317840
    static uint64_t ToUInt64(::Array<uint8_t>* value, int startIndex);
    // static private System.Char GetHexValue(System.Int32 i)
    // Offset: 0x1317904
    static ::Il2CppChar GetHexValue(int i);
    // static public System.String ToString(System.Byte[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x131791C
    static ::Il2CppString* ToString(::Array<uint8_t>* value, int startIndex, int length);
    // static public System.String ToString(System.Byte[] value)
    // Offset: 0x1317C94
    static ::Il2CppString* ToString(::Array<uint8_t>* value);
    // static public System.Int64 DoubleToInt64Bits(System.Double value)
    // Offset: 0x1317D40
    static int64_t DoubleToInt64Bits(double value);
    // static public System.Double Int64BitsToDouble(System.Int64 value)
    // Offset: 0x1317D48
    static double Int64BitsToDouble(int64_t value);
    // static private System.Void .cctor()
    // Offset: 0x1317D50
    static void _cctor();
  }; // System.BitConverter
}
DEFINE_IL2CPP_ARG_TYPE(System::BitConverter*, "System", "BitConverter");
#pragma pack(pop)
