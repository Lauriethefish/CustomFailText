// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:37 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Remoting::Lifetime
namespace System::Runtime::Remoting::Lifetime {
  // Forward declaring type: LeaseManager
  class LeaseManager;
}
// Forward declaring namespace: System::Runtime::Remoting
namespace System::Runtime::Remoting {
  // Forward declaring type: ServerIdentity
  class ServerIdentity;
}
// Completed forward declares
// Type namespace: System.Runtime.Remoting.Lifetime
namespace System::Runtime::Remoting::Lifetime {
  // Autogenerated type: System.Runtime.Remoting.Lifetime.LifetimeServices
  class LifetimeServices : public ::Il2CppObject {
    public:
    // Get static field: static private System.TimeSpan _leaseManagerPollTime
    static System::TimeSpan _get__leaseManagerPollTime();
    // Set static field: static private System.TimeSpan _leaseManagerPollTime
    static void _set__leaseManagerPollTime(System::TimeSpan value);
    // Get static field: static private System.TimeSpan _leaseTime
    static System::TimeSpan _get__leaseTime();
    // Set static field: static private System.TimeSpan _leaseTime
    static void _set__leaseTime(System::TimeSpan value);
    // Get static field: static private System.TimeSpan _renewOnCallTime
    static System::TimeSpan _get__renewOnCallTime();
    // Set static field: static private System.TimeSpan _renewOnCallTime
    static void _set__renewOnCallTime(System::TimeSpan value);
    // Get static field: static private System.TimeSpan _sponsorshipTimeout
    static System::TimeSpan _get__sponsorshipTimeout();
    // Set static field: static private System.TimeSpan _sponsorshipTimeout
    static void _set__sponsorshipTimeout(System::TimeSpan value);
    // Get static field: static private System.Runtime.Remoting.Lifetime.LeaseManager _leaseManager
    static System::Runtime::Remoting::Lifetime::LeaseManager* _get__leaseManager();
    // Set static field: static private System.Runtime.Remoting.Lifetime.LeaseManager _leaseManager
    static void _set__leaseManager(System::Runtime::Remoting::Lifetime::LeaseManager* value);
    // static private System.Void .cctor()
    // Offset: 0x104D33C
    static void _cctor();
    // static public System.TimeSpan get_LeaseManagerPollTime()
    // Offset: 0x104D438
    static System::TimeSpan get_LeaseManagerPollTime();
    // static public System.Void set_LeaseManagerPollTime(System.TimeSpan value)
    // Offset: 0x104821C
    static void set_LeaseManagerPollTime(System::TimeSpan value);
    // static public System.TimeSpan get_LeaseTime()
    // Offset: 0x104D4A0
    static System::TimeSpan get_LeaseTime();
    // static public System.Void set_LeaseTime(System.TimeSpan value)
    // Offset: 0x104D508
    static void set_LeaseTime(System::TimeSpan value);
    // static public System.TimeSpan get_RenewOnCallTime()
    // Offset: 0x104D574
    static System::TimeSpan get_RenewOnCallTime();
    // static public System.Void set_RenewOnCallTime(System.TimeSpan value)
    // Offset: 0x104D5DC
    static void set_RenewOnCallTime(System::TimeSpan value);
    // static public System.TimeSpan get_SponsorshipTimeout()
    // Offset: 0x104D648
    static System::TimeSpan get_SponsorshipTimeout();
    // static public System.Void set_SponsorshipTimeout(System.TimeSpan value)
    // Offset: 0x104D6B0
    static void set_SponsorshipTimeout(System::TimeSpan value);
    // static System.Void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity)
    // Offset: 0x104D71C
    static void TrackLifetime(System::Runtime::Remoting::ServerIdentity* identity);
  }; // System.Runtime.Remoting.Lifetime.LifetimeServices
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::Lifetime::LifetimeServices*, "System.Runtime.Remoting.Lifetime", "LifetimeServices");
#pragma pack(pop)
