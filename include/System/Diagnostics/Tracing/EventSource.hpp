// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:43 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Diagnostics.Tracing.EventSourceSettings
#include "System/Diagnostics/Tracing/EventSourceSettings.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
// Including type: System.Diagnostics.Tracing.SessionMask
#include "System/Diagnostics/Tracing/SessionMask.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventCommandEventArgs
  class EventCommandEventArgs;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
  // Forward declaring type: EtwSession
  class EtwSession;
  // Forward declaring type: ActivityTracker
  class ActivityTracker;
  // Forward declaring type: EventSourceOptions
  struct EventSourceOptions;
  // Forward declaring type: TraceLoggingEventTypes
  class TraceLoggingEventTypes;
  // Forward declaring type: NameInfo
  class NameInfo;
  // Forward declaring type: EventDescriptor
  struct EventDescriptor;
  // Forward declaring type: EventChannel
  struct EventChannel;
  // Forward declaring type: EventListener
  class EventListener;
  // Forward declaring type: EventManifestOptions
  struct EventManifestOptions;
  // Forward declaring type: EventWrittenEventArgs
  class EventWrittenEventArgs;
  // Forward declaring type: EventOpcode
  struct EventOpcode;
  // Forward declaring type: EventCommand
  struct EventCommand;
  // Forward declaring type: ManifestBuilder
  class ManifestBuilder;
  // Forward declaring type: EventAttribute
  class EventAttribute;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Runtime::InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: GCHandle
  struct GCHandle;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
  // Forward declaring type: MemberInfo
  class MemberInfo;
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Autogenerated type: System.Diagnostics.Tracing.EventSource
  class EventSource : public ::Il2CppObject, public System::IDisposable {
    public:
    // Nested type: System::Diagnostics::Tracing::EventSource::EventData
    struct EventData;
    // Nested type: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes
    struct Sha1ForNonSecretPurposes;
    // Nested type: System::Diagnostics::Tracing::EventSource::OverideEventProvider
    class OverideEventProvider;
    // Nested type: System::Diagnostics::Tracing::EventSource::EventMetadata
    struct EventMetadata;
    // private System.Byte[] providerMetadata
    // Offset: 0x10
    ::Array<uint8_t>* providerMetadata;
    // private System.String m_name
    // Offset: 0x18
    ::Il2CppString* m_name;
    // System.Int32 m_id
    // Offset: 0x20
    int m_id;
    // private System.Guid m_guid
    // Offset: 0x24
    System::Guid m_guid;
    // System.Diagnostics.Tracing.EventSource/EventMetadata[] m_eventData
    // Offset: 0x38
    ::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>* m_eventData;
    // private System.Byte[] m_rawManifest
    // Offset: 0x40
    ::Array<uint8_t>* m_rawManifest;
    // private System.EventHandler`1<System.Diagnostics.Tracing.EventCommandEventArgs> m_eventCommandExecuted
    // Offset: 0x48
    System::EventHandler_1<System::Diagnostics::Tracing::EventCommandEventArgs*>* m_eventCommandExecuted;
    // private System.Diagnostics.Tracing.EventSourceSettings m_config
    // Offset: 0x50
    System::Diagnostics::Tracing::EventSourceSettings m_config;
    // private System.Boolean m_eventSourceEnabled
    // Offset: 0x54
    bool m_eventSourceEnabled;
    // System.Diagnostics.Tracing.EventLevel m_level
    // Offset: 0x58
    System::Diagnostics::Tracing::EventLevel m_level;
    // System.Diagnostics.Tracing.EventKeywords m_matchAnyKeyword
    // Offset: 0x60
    System::Diagnostics::Tracing::EventKeywords m_matchAnyKeyword;
    // System.Diagnostics.Tracing.EventDispatcher m_Dispatchers
    // Offset: 0x68
    System::Diagnostics::Tracing::EventDispatcher* m_Dispatchers;
    // private System.Diagnostics.Tracing.EventSource/OverideEventProvider m_provider
    // Offset: 0x70
    System::Diagnostics::Tracing::EventSource::OverideEventProvider* m_provider;
    // private System.Boolean m_completelyInited
    // Offset: 0x78
    bool m_completelyInited;
    // private System.Exception m_constructionException
    // Offset: 0x80
    System::Exception* m_constructionException;
    // private System.Byte m_outOfBandMessageCount
    // Offset: 0x88
    uint8_t m_outOfBandMessageCount;
    // private System.Diagnostics.Tracing.EventCommandEventArgs m_deferredCommands
    // Offset: 0x90
    System::Diagnostics::Tracing::EventCommandEventArgs* m_deferredCommands;
    // private System.String[] m_traits
    // Offset: 0x98
    ::Array<::Il2CppString*>* m_traits;
    // Get static field: static System.UInt32 s_currentPid
    static uint _get_s_currentPid();
    // Set static field: static System.UInt32 s_currentPid
    static void _set_s_currentPid(uint value);
    // Get static field: static private System.Byte m_EventSourceExceptionRecurenceCount
    static uint8_t _get_m_EventSourceExceptionRecurenceCount();
    // Set static field: static private System.Byte m_EventSourceExceptionRecurenceCount
    static void _set_m_EventSourceExceptionRecurenceCount(uint8_t value);
    // private System.Diagnostics.Tracing.SessionMask m_curLiveSessions
    // Offset: 0xA0
    System::Diagnostics::Tracing::SessionMask m_curLiveSessions;
    // private System.Diagnostics.Tracing.EtwSession[] m_etwSessionIdMap
    // Offset: 0xA8
    ::Array<System::Diagnostics::Tracing::EtwSession*>* m_etwSessionIdMap;
    // private System.Collections.Generic.List`1<System.Diagnostics.Tracing.EtwSession> m_legacySessions
    // Offset: 0xB0
    System::Collections::Generic::List_1<System::Diagnostics::Tracing::EtwSession*>* m_legacySessions;
    // System.Int64 m_keywordTriggers
    // Offset: 0xB8
    int64_t m_keywordTriggers;
    // System.Diagnostics.Tracing.SessionMask m_activityFilteringForETWEnabled
    // Offset: 0xC0
    System::Diagnostics::Tracing::SessionMask m_activityFilteringForETWEnabled;
    // Get static field: static System.Action`1<System.Guid> s_activityDying
    static System::Action_1<System::Guid>* _get_s_activityDying();
    // Set static field: static System.Action`1<System.Guid> s_activityDying
    static void _set_s_activityDying(System::Action_1<System::Guid>* value);
    // private System.Diagnostics.Tracing.ActivityTracker m_activityTracker
    // Offset: 0xC8
    System::Diagnostics::Tracing::ActivityTracker* m_activityTracker;
    // Get static field: static private readonly System.Byte[] namespaceBytes
    static ::Array<uint8_t>* _get_namespaceBytes();
    // Set static field: static private readonly System.Byte[] namespaceBytes
    static void _set_namespaceBytes(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Guid AspNetEventSourceGuid
    static System::Guid _get_AspNetEventSourceGuid();
    // Set static field: static private readonly System.Guid AspNetEventSourceGuid
    static void _set_AspNetEventSourceGuid(System::Guid value);
    // private System.Void WriteMultiMerge(System.String eventName, System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, System.Object[] values)
    // Offset: 0xC8AFF0
    void WriteMultiMerge(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, ::Array<::Il2CppObject*>* values);
    // private System.Void WriteMultiMergeInner(System.String eventName, System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, System.Object[] values)
    // Offset: 0xC8B0A4
    void WriteMultiMergeInner(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, ::Array<::Il2CppObject*>* values);
    // System.Void WriteMultiMerge(System.String eventName, System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0xC8B5F4
    void WriteMultiMerge(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, System::Diagnostics::Tracing::EventSource::EventData* data);
    // private System.Void WriteCleanup(System.Runtime.InteropServices.GCHandle* pPins, System.Int32 cPins)
    // Offset: 0xC8B548
    void WriteCleanup(System::Runtime::InteropServices::GCHandle* pPins, int cPins);
    // private System.Void InitializeProviderMetadata()
    // Offset: 0xC8BA40
    void InitializeProviderMetadata();
    // static private System.Int32 AddValueToMetaData(System.Collections.Generic.List`1<System.Byte> metaData, System.String value)
    // Offset: 0xC8BE98
    static int AddValueToMetaData(System::Collections::Generic::List_1<uint8_t>* metaData, ::Il2CppString* value);
    // static private System.Int32 HexDigit(System.Char c)
    // Offset: 0xC8C16C
    static int HexDigit(::Il2CppChar c);
    // private System.Diagnostics.Tracing.NameInfo UpdateDescriptor(System.String name, System.Diagnostics.Tracing.TraceLoggingEventTypes eventInfo, System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.EventDescriptor descriptor)
    // Offset: 0xC8B944
    System::Diagnostics::Tracing::NameInfo* UpdateDescriptor(::Il2CppString* name, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventInfo, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::EventDescriptor& descriptor);
    // public System.String get_Name()
    // Offset: 0xC8C2AC
    ::Il2CppString* get_Name();
    // public System.Guid get_Guid()
    // Offset: 0xC8C2B4
    System::Guid get_Guid();
    // public System.Boolean IsEnabled()
    // Offset: 0xC8C2C4
    bool IsEnabled();
    // public System.Boolean IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords)
    // Offset: 0xC8B06C
    bool IsEnabled(System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords keywords);
    // public System.Boolean IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventChannel channel)
    // Offset: 0xC8C2CC
    bool IsEnabled(System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords keywords, System::Diagnostics::Tracing::EventChannel channel);
    // static public System.Guid GetGuid(System.Type eventSourceType)
    // Offset: 0xC8C340
    static System::Guid GetGuid(System::Type* eventSourceType);
    // static public System.String GetName(System.Type eventSourceType)
    // Offset: 0xC8D1B0
    static ::Il2CppString* GetName(System::Type* eventSourceType);
    // static public System.Void SetCurrentThreadActivityId(System.Guid activityId)
    // Offset: 0xC83DD0
    static void SetCurrentThreadActivityId(System::Guid activityId);
    // static public System.Guid get_CurrentThreadActivityId()
    // Offset: 0xC83B78
    static System::Guid get_CurrentThreadActivityId();
    // static System.Guid get_InternalCurrentThreadActivityId()
    // Offset: 0xC82618
    static System::Guid get_InternalCurrentThreadActivityId();
    // static System.Guid get_FallbackActivityId()
    // Offset: 0xC8D388
    static System::Guid get_FallbackActivityId();
    // protected System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings)
    // Offset: 0xC8D58C
    static EventSource* New_ctor(System::Diagnostics::Tracing::EventSourceSettings settings);
    // protected System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings, System.String[] traits)
    // Offset: 0xC8D594
    static EventSource* New_ctor(System::Diagnostics::Tracing::EventSourceSettings settings, ::Array<::Il2CppString*>* traits);
    // protected System.Void OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs command)
    // Offset: 0xC8DD40
    void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs* command);
    // protected System.Void WriteEvent(System.Int32 eventId, System.Int32 arg1)
    // Offset: 0xC8DD44
    void WriteEvent(int eventId, int arg1);
    // protected System.Void WriteEvent(System.Int32 eventId, System.String arg1, System.String arg2)
    // Offset: 0xC8DE00
    void WriteEvent(int eventId, ::Il2CppString* arg1, ::Il2CppString* arg2);
    // protected System.Void WriteEvent(System.Int32 eventId, System.String arg1, System.String arg2, System.String arg3)
    // Offset: 0xC8DF4C
    void WriteEvent(int eventId, ::Il2CppString* arg1, ::Il2CppString* arg2, ::Il2CppString* arg3);
    // protected System.Void WriteEventCore(System.Int32 eventId, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0xC8DDF0
    void WriteEventCore(int eventId, int eventDataCount, System::Diagnostics::Tracing::EventSource::EventData* data);
    // protected System.Void WriteEventWithRelatedActivityIdCore(System.Int32 eventId, System.Guid* relatedActivityId, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0xC8E0F8
    void WriteEventWithRelatedActivityIdCore(int eventId, System::Guid* relatedActivityId, int eventDataCount, System::Diagnostics::Tracing::EventSource::EventData* data);
    // protected System.Void WriteEvent(System.Int32 eventId, System.Object[] args)
    // Offset: 0xC8FA68
    void WriteEvent(int eventId, ::Array<::Il2CppObject*>* args);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0xC90830
    void Dispose(bool disposing);
    // System.Void WriteStringToListener(System.Diagnostics.Tracing.EventListener listener, System.String msg, System.Diagnostics.Tracing.SessionMask m)
    // Offset: 0xC90CB0
    void WriteStringToListener(System::Diagnostics::Tracing::EventListener* listener, ::Il2CppString* msg, System::Diagnostics::Tracing::SessionMask m);
    // private System.Void WriteEventRaw(System.String eventName, System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* relatedActivityID, System.Int32 dataCount, System.IntPtr data)
    // Offset: 0xC8B49C
    void WriteEventRaw(::Il2CppString* eventName, System::Diagnostics::Tracing::EventDescriptor& eventDescriptor, System::Guid* activityID, System::Guid* relatedActivityID, int dataCount, System::IntPtr data);
    // private System.Void Initialize(System.Guid eventSourceGuid, System.String eventSourceName, System.String[] traits)
    // Offset: 0xC8D718
    void Initialize(System::Guid eventSourceGuid, ::Il2CppString* eventSourceName, ::Array<::Il2CppString*>* traits);
    // static private System.String GetName(System.Type eventSourceType, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0xC8D218
    static ::Il2CppString* GetName(System::Type* eventSourceType, System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Guid GenerateGuidFromName(System.String name)
    // Offset: 0xC8D068
    static System::Guid GenerateGuidFromName(::Il2CppString* name);
    // private System.Object DecodeObject(System.Int32 eventId, System.Int32 parameterId, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0xC91C44
    ::Il2CppObject* DecodeObject(int eventId, int parameterId, System::Diagnostics::Tracing::EventSource::EventData*& data);
    // private System.Diagnostics.Tracing.EventDispatcher GetDispatcher(System.Diagnostics.Tracing.EventListener listener)
    // Offset: 0xC92560
    System::Diagnostics::Tracing::EventDispatcher* GetDispatcher(System::Diagnostics::Tracing::EventListener* listener);
    // private System.Void WriteEventVarargs(System.Int32 eventId, System.Guid* childActivityID, System.Object[] args)
    // Offset: 0xC8FA74
    void WriteEventVarargs(int eventId, System::Guid* childActivityID, ::Array<::Il2CppObject*>* args);
    // private System.Object[] SerializeEventArgs(System.Int32 eventId, System.Object[] args)
    // Offset: 0xC92918
    ::Array<::Il2CppObject*>* SerializeEventArgs(int eventId, ::Array<::Il2CppObject*>* args);
    // private System.Void LogEventArgsMismatches(System.Reflection.ParameterInfo[] infos, System.Object[] args)
    // Offset: 0xC925A0
    void LogEventArgsMismatches(::Array<System::Reflection::ParameterInfo*>* infos, ::Array<::Il2CppObject*>* args);
    // private System.Int32 GetParamLengthIncludingByteArray(System.Reflection.ParameterInfo[] parameters)
    // Offset: 0xC92B18
    int GetParamLengthIncludingByteArray(::Array<System::Reflection::ParameterInfo*>* parameters);
    // private System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0xC8F77C
    void WriteToAllListeners(int eventId, System::Guid* childActivityID, int eventDataCount, System::Diagnostics::Tracing::EventSource::EventData* data);
    // private System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, System.Object[] args)
    // Offset: 0xC927CC
    void WriteToAllListeners(int eventId, System::Guid* childActivityID, ::Array<::Il2CppObject*>* args);
    // private System.Void DispatchToAllListeners(System.Int32 eventId, System.Guid* childActivityID, System.Diagnostics.Tracing.EventWrittenEventArgs eventCallbackArgs)
    // Offset: 0xC92C34
    void DispatchToAllListeners(int eventId, System::Guid* childActivityID, System::Diagnostics::Tracing::EventWrittenEventArgs* eventCallbackArgs);
    // private System.Void WriteEventString(System.Diagnostics.Tracing.EventLevel level, System.Int64 keywords, System.String msgString)
    // Offset: 0xC90E00
    void WriteEventString(System::Diagnostics::Tracing::EventLevel level, int64_t keywords, ::Il2CppString* msgString);
    // private System.Void WriteStringToAllListeners(System.String eventName, System.String msg)
    // Offset: 0xC92E5C
    void WriteStringToAllListeners(::Il2CppString* eventName, ::Il2CppString* msg);
    // private System.Diagnostics.Tracing.SessionMask GetEtwSessionMask(System.Int32 eventId, System.Guid* childActivityID)
    // Offset: 0xC8EE10
    System::Diagnostics::Tracing::SessionMask GetEtwSessionMask(int eventId, System::Guid* childActivityID);
    // private System.Boolean IsEnabledByDefault(System.Int32 eventNum, System.Boolean enable, System.Diagnostics.Tracing.EventLevel currentLevel, System.Diagnostics.Tracing.EventKeywords currentMatchAnyKeyword)
    // Offset: 0xC930EC
    bool IsEnabledByDefault(int eventNum, bool enable, System::Diagnostics::Tracing::EventLevel currentLevel, System::Diagnostics::Tracing::EventKeywords currentMatchAnyKeyword);
    // private System.Boolean IsEnabledCommon(System.Boolean enabled, System.Diagnostics.Tracing.EventLevel currentLevel, System.Diagnostics.Tracing.EventKeywords currentMatchAnyKeyword, System.Diagnostics.Tracing.EventLevel eventLevel, System.Diagnostics.Tracing.EventKeywords eventKeywords, System.Diagnostics.Tracing.EventChannel eventChannel)
    // Offset: 0xC8C304
    bool IsEnabledCommon(bool enabled, System::Diagnostics::Tracing::EventLevel currentLevel, System::Diagnostics::Tracing::EventKeywords currentMatchAnyKeyword, System::Diagnostics::Tracing::EventLevel eventLevel, System::Diagnostics::Tracing::EventKeywords eventKeywords, System::Diagnostics::Tracing::EventChannel eventChannel);
    // private System.Void ThrowEventSourceException(System.String eventName, System.Exception innerEx)
    // Offset: 0xC8F08C
    void ThrowEventSourceException(::Il2CppString* eventName, System::Exception* innerEx);
    // private System.Void ValidateEventOpcodeForTransfer(System.Diagnostics.Tracing.EventSource/EventMetadata eventData, System.String eventName)
    // Offset: 0xC8EDE4
    void ValidateEventOpcodeForTransfer(System::Diagnostics::Tracing::EventSource::EventMetadata& eventData, ::Il2CppString* eventName);
    // static System.Diagnostics.Tracing.EventOpcode GetOpcodeWithDefault(System.Diagnostics.Tracing.EventOpcode opcode, System.String eventName)
    // Offset: 0xC931E8
    static System::Diagnostics::Tracing::EventOpcode GetOpcodeWithDefault(System::Diagnostics::Tracing::EventOpcode opcode, ::Il2CppString* eventName);
    // System.Void SendCommand(System.Diagnostics.Tracing.EventListener listener, System.Int32 perEventSourceSessionId, System.Int32 etwSessionId, System.Diagnostics.Tracing.EventCommand command, System.Boolean enable, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary`2<System.String,System.String> commandArguments)
    // Offset: 0xC93284
    void SendCommand(System::Diagnostics::Tracing::EventListener* listener, int perEventSourceSessionId, int etwSessionId, System::Diagnostics::Tracing::EventCommand command, bool enable, System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords matchAnyKeyword, System::Collections::Generic::IDictionary_2<::Il2CppString*, ::Il2CppString*>* commandArguments);
    // System.Void DoCommand(System.Diagnostics.Tracing.EventCommandEventArgs commandArgs)
    // Offset: 0xC911DC
    void DoCommand(System::Diagnostics::Tracing::EventCommandEventArgs* commandArgs);
    // System.Void UpdateEtwSession(System.Int32 sessionIdBit, System.Int32 etwSessionId, System.Boolean bEnable, System.String activityFilters, System.Boolean participateInSampling)
    // Offset: 0xC93BF4
    void UpdateEtwSession(int sessionIdBit, int etwSessionId, bool bEnable, ::Il2CppString* activityFilters, bool participateInSampling);
    // static System.Boolean ParseCommandArgs(System.Collections.Generic.IDictionary`2<System.String,System.String> commandArguments, System.Boolean participateInSampling, System.String activityFilters, System.Int32 sessionIdBit)
    // Offset: 0xC93960
    static bool ParseCommandArgs(System::Collections::Generic::IDictionary_2<::Il2CppString*, ::Il2CppString*>* commandArguments, bool& participateInSampling, ::Il2CppString*& activityFilters, int& sessionIdBit);
    // System.Void UpdateKwdTriggers(System.Boolean enable)
    // Offset: 0xC93FDC
    void UpdateKwdTriggers(bool enable);
    // System.Boolean EnableEventForDispatcher(System.Diagnostics.Tracing.EventDispatcher dispatcher, System.Int32 eventId, System.Boolean value)
    // Offset: 0xC93870
    bool EnableEventForDispatcher(System::Diagnostics::Tracing::EventDispatcher* dispatcher, int eventId, bool value);
    // private System.Boolean AnyEventEnabled()
    // Offset: 0xC93F20
    bool AnyEventEnabled();
    // private System.Boolean get_IsDisposed()
    // Offset: 0xC94580
    bool get_IsDisposed();
    // private System.Void EnsureDescriptorsInitialized()
    // Offset: 0xC93474
    void EnsureDescriptorsInitialized();
    // private System.Boolean SendManifest(System.Byte[] rawManifest)
    // Offset: 0xC90950
    bool SendManifest(::Array<uint8_t>* rawManifest);
    // static System.Attribute GetCustomAttributeHelper(System.Reflection.MemberInfo member, System.Type attributeType, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0xC8C5A8
    static System::Attribute* GetCustomAttributeHelper(System::Reflection::MemberInfo* member, System::Type* attributeType, System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Boolean AttributeTypeNamesMatch(System.Type attributeType, System.Type reflectedAttributeType)
    // Offset: 0xC960E8
    static bool AttributeTypeNamesMatch(System::Type* attributeType, System::Type* reflectedAttributeType);
    // static private System.Type GetEventSourceBaseType(System.Type eventSourceType, System.Boolean allowEventSourceOverride, System.Boolean reflectionOnly)
    // Offset: 0xC96260
    static System::Type* GetEventSourceBaseType(System::Type* eventSourceType, bool allowEventSourceOverride, bool reflectionOnly);
    // static private System.Byte[] CreateManifestAndDescriptors(System.Type eventSourceType, System.String eventSourceDllName, System.Diagnostics.Tracing.EventSource source, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0xC945CC
    static ::Array<uint8_t>* CreateManifestAndDescriptors(System::Type* eventSourceType, ::Il2CppString* eventSourceDllName, System::Diagnostics::Tracing::EventSource* source, System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Boolean RemoveFirstArgIfRelatedActivityId(System.Reflection.ParameterInfo[] args)
    // Offset: 0xC96A54
    static bool RemoveFirstArgIfRelatedActivityId(::Array<System::Reflection::ParameterInfo*>*& args);
    // static private System.Void AddProviderEnumKind(System.Diagnostics.Tracing.ManifestBuilder manifest, System.Reflection.FieldInfo staticField, System.String providerEnumKind)
    // Offset: 0xC9647C
    static void AddProviderEnumKind(System::Diagnostics::Tracing::ManifestBuilder* manifest, System::Reflection::FieldInfo* staticField, ::Il2CppString* providerEnumKind);
    // static private System.Void AddEventDescriptor(System.Diagnostics.Tracing.EventSource/EventMetadata[] eventData, System.String eventName, System.Diagnostics.Tracing.EventAttribute eventAttribute, System.Reflection.ParameterInfo[] eventParameters, System.Boolean hasRelatedActivityID)
    // Offset: 0xC972E8
    static void AddEventDescriptor(::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>*& eventData, ::Il2CppString* eventName, System::Diagnostics::Tracing::EventAttribute* eventAttribute, ::Array<System::Reflection::ParameterInfo*>* eventParameters, bool hasRelatedActivityID);
    // static private System.Void TrimEventDescriptors(System.Diagnostics.Tracing.EventSource/EventMetadata[] eventData)
    // Offset: 0xC9756C
    static void TrimEventDescriptors(::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>*& eventData);
    // System.Void AddListener(System.Diagnostics.Tracing.EventListener listener)
    // Offset: 0xC870E0
    void AddListener(System::Diagnostics::Tracing::EventListener* listener);
    // static private System.Void DebugCheckEvent(System.Collections.Generic.Dictionary`2<System.String,System.String> eventsByName, System.Diagnostics.Tracing.EventSource/EventMetadata[] eventData, System.Reflection.MethodInfo method, System.Diagnostics.Tracing.EventAttribute eventAttribute, System.Diagnostics.Tracing.ManifestBuilder manifest, System.Diagnostics.Tracing.EventManifestOptions options)
    // Offset: 0xC96BD4
    static void DebugCheckEvent(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>*& eventsByName, ::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>* eventData, System::Reflection::MethodInfo* method, System::Diagnostics::Tracing::EventAttribute* eventAttribute, System::Diagnostics::Tracing::ManifestBuilder* manifest, System::Diagnostics::Tracing::EventManifestOptions options);
    // static private System.Int32 GetHelperCallFirstArg(System.Reflection.MethodInfo method)
    // Offset: 0xC97648
    static int GetHelperCallFirstArg(System::Reflection::MethodInfo* method);
    // System.Void ReportOutOfBandMessage(System.String msg, System.Boolean flush)
    // Offset: 0xC81FEC
    void ReportOutOfBandMessage(::Il2CppString* msg, bool flush);
    // private System.Diagnostics.Tracing.EventSourceSettings ValidateSettings(System.Diagnostics.Tracing.EventSourceSettings settings)
    // Offset: 0xC8D664
    System::Diagnostics::Tracing::EventSourceSettings ValidateSettings(System::Diagnostics::Tracing::EventSourceSettings settings);
    // private System.Boolean get_ThrowOnEventWriteErrors()
    // Offset: 0xC931DC
    bool get_ThrowOnEventWriteErrors();
    // private System.Boolean get_SelfDescribingEvents()
    // Offset: 0xC8F080
    bool get_SelfDescribingEvents();
    // private System.Void ReportActivitySamplingInfo(System.Diagnostics.Tracing.EventListener listener, System.Diagnostics.Tracing.SessionMask sessions)
    // Offset: 0xC94074
    void ReportActivitySamplingInfo(System::Diagnostics::Tracing::EventListener* listener, System::Diagnostics::Tracing::SessionMask sessions);
    // static private System.Void .cctor()
    // Offset: 0xC97830
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0xC8D454
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // protected System.Void .ctor()
    // Offset: 0xC8D580
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static EventSource* New_ctor();
    // public System.Void Dispose()
    // Offset: 0xC87498
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // protected override System.Void Finalize()
    // Offset: 0xC90C3C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Diagnostics.Tracing.EventSource
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventSource*, "System.Diagnostics.Tracing", "EventSource");
#pragma pack(pop)
