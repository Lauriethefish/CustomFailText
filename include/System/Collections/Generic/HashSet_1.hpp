// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:11 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Slot because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Autogenerated type: System.Collections.Generic.HashSet`1
  template<typename T>
  class HashSet_1 : public ::Il2CppObject, public System::Collections::Generic::ICollection_1<T>, public System::Collections::Generic::IEnumerable_1<T>, public System::Collections::IEnumerable, public System::Collections::Generic::IReadOnlyCollection_1<T>, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback {
    public:
    // Nested type: System::Collections::Generic::HashSet_1::Slot<T>
    struct Slot;
    // Nested type: System::Collections::Generic::HashSet_1::Enumerator<T>
    struct Enumerator;
    // Autogenerated type: System.Collections.Generic.HashSet`1/Slot
    struct Slot : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = HashSet_1<T>*;
      // System.Int32 hashCode
      // Offset: 0x0
      int hashCode;
      // System.Int32 next
      // Offset: 0x0
      int next;
      // T value
      // Offset: 0x0
      T value;
      // Creating value type constructor for type: Slot
      Slot(int hashCode_ = {}, int next_ = {}, T value_ = {}) : hashCode{hashCode_}, next{next_}, value{value_} {}
    }; // System.Collections.Generic.HashSet`1/Slot
    // Autogenerated type: System.Collections.Generic.HashSet`1/Enumerator
    struct Enumerator : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType, public System::Collections::Generic::IEnumerator_1<T>, public System::IDisposable, public System::Collections::IEnumerator {
      public:
      using declaring_type = HashSet_1<T>*;
      // private System.Collections.Generic.HashSet`1<T> _set
      // Offset: 0x0
      System::Collections::Generic::HashSet_1<T>* set;
      // private System.Int32 _index
      // Offset: 0x0
      int index;
      // private System.Int32 _version
      // Offset: 0x0
      int version;
      // private T _current
      // Offset: 0x0
      T current;
      // Creating value type constructor for type: Enumerator
      Enumerator(System::Collections::Generic::HashSet_1<T>* set_ = {}, int index_ = {}, int version_ = {}, T current_ = {}) : set{set_}, index{index_}, version{version_}, current{current_} {}
      // System.Void .ctor(System.Collections.Generic.HashSet`1<T> set)
      // Offset: 0xA4C75C
      static typename HashSet_1<T>::Enumerator* New_ctor(System::Collections::Generic::HashSet_1<T>* set) {
        return (typename HashSet_1<T>::Enumerator*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename HashSet_1<T>::Enumerator>::get(), set));
      }
      // public System.Void Dispose()
      // Offset: 0xA53E6C
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void Dispose() {
        CRASH_UNLESS(il2cpp_utils::RunMethod(*this, "Dispose"));
      }
      // Creating proxy method: System_IDisposable_Dispose
      // Maps to method: Dispose
      void System_IDisposable_Dispose() {
        Dispose();
      }
      // public System.Boolean MoveNext()
      // Offset: 0xA53E70
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        return CRASH_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "MoveNext"));
      }
      // public T get_Current()
      // Offset: 0xA53E78
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator`1::get_Current()
      T get_Current() {
        return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(*this, "get_Current"));
      }
      // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
      // Maps to method: get_Current
      T System_Collections_Generic_IEnumerator_1_get_Current() {
        return get_Current();
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xA4C778
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        return CRASH_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IEnumerator.get_Current"));
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xA4C780
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        CRASH_UNLESS(il2cpp_utils::RunMethod(*this, "System.Collections.IEnumerator.Reset"));
      }
    }; // System.Collections.Generic.HashSet`1/Enumerator
    // Autogenerated static field getter
    // Get static field: static private System.Int32 Lower31BitMask
    static int _get_Lower31BitMask() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "Lower31BitMask")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 Lower31BitMask
    static void _set_Lower31BitMask(int value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "Lower31BitMask", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 StackAllocThreshold
    static int _get_StackAllocThreshold() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "StackAllocThreshold")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 StackAllocThreshold
    static void _set_StackAllocThreshold(int value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "StackAllocThreshold", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 ShrinkThreshold
    static int _get_ShrinkThreshold() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ShrinkThreshold")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 ShrinkThreshold
    static void _set_ShrinkThreshold(int value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ShrinkThreshold", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String CapacityName
    static ::Il2CppString* _get_CapacityName() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "CapacityName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String CapacityName
    static void _set_CapacityName(::Il2CppString* value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "CapacityName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ElementsName
    static ::Il2CppString* _get_ElementsName() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ElementsName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ElementsName
    static void _set_ElementsName(::Il2CppString* value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ElementsName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ComparerName
    static ::Il2CppString* _get_ComparerName() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ComparerName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ComparerName
    static void _set_ComparerName(::Il2CppString* value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ComparerName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String VersionName
    static ::Il2CppString* _get_VersionName() {
      return CRASH_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "VersionName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::Il2CppString* value) {
      CRASH_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "VersionName", value));
    }
    // private System.Int32[] _buckets
    // Offset: 0x0
    ::Array<int>* buckets;
    // private System.Collections.Generic.HashSet`1/Slot<T>[] _slots
    // Offset: 0x0
    ::Array<typename System::Collections::Generic::HashSet_1<T>::Slot>* slots;
    // private System.Int32 _count
    // Offset: 0x0
    int count;
    // private System.Int32 _lastIndex
    // Offset: 0x0
    int lastIndex;
    // private System.Int32 _freeList
    // Offset: 0x0
    int freeList;
    // private System.Collections.Generic.IEqualityComparer`1<T> _comparer
    // Offset: 0x0
    System::Collections::Generic::IEqualityComparer_1<T>* comparer;
    // private System.Int32 _version
    // Offset: 0x0
    int version;
    // private System.Runtime.Serialization.SerializationInfo _siInfo
    // Offset: 0x0
    System::Runtime::Serialization::SerializationInfo* siInfo;
    // public System.Void .ctor(System.Collections.Generic.IEqualityComparer`1<T> comparer)
    // Offset: 0x18C3684
    static HashSet_1<T>* New_ctor(System::Collections::Generic::IEqualityComparer_1<T>* comparer) {
      return (HashSet_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), comparer));
    }
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<T> collection)
    // Offset: 0x18C8008
    static HashSet_1<T>* New_ctor(System::Collections::Generic::IEnumerable_1<T>* collection) {
      return (HashSet_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), collection));
    }
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<T> collection, System.Collections.Generic.IEqualityComparer`1<T> comparer)
    // Offset: 0x18C3764
    static HashSet_1<T>* New_ctor(System::Collections::Generic::IEnumerable_1<T>* collection, System::Collections::Generic::IEqualityComparer_1<T>* comparer) {
      return (HashSet_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), collection, comparer));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x18C39D8
    static HashSet_1<T>* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      return (HashSet_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), info, context));
    }
    // private System.Void CopyFrom(System.Collections.Generic.HashSet`1<T> source)
    // Offset: 0x18C3A14
    void CopyFrom(System::Collections::Generic::HashSet_1<T>* source) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "CopyFrom", source));
    }
    // public System.Collections.Generic.HashSet`1/Enumerator<T> GetEnumerator()
    // Offset: 0x18C8A34
    typename System::Collections::Generic::HashSet_1<T>::Enumerator GetEnumerator() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<typename System::Collections::Generic::HashSet_1<T>::Enumerator>(this, "GetEnumerator"));
    }
    // public System.Boolean Add(T item)
    // Offset: 0x18C9034
    bool Add(T item) {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Add", item));
    }
    // public System.Void UnionWith(System.Collections.Generic.IEnumerable`1<T> other)
    // Offset: 0x18C4790
    void UnionWith(System::Collections::Generic::IEnumerable_1<T>* other) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "UnionWith", other));
    }
    // public System.Void ExceptWith(System.Collections.Generic.IEnumerable`1<T> other)
    // Offset: 0x18C4A80
    void ExceptWith(System::Collections::Generic::IEnumerable_1<T>* other) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "ExceptWith", other));
    }
    // public System.Void CopyTo(T[] array)
    // Offset: 0x18C4DA8
    void CopyTo(::Array<T>* array) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array));
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex, System.Int32 count)
    // Offset: 0x18C4DD4
    void CopyTo(::Array<T>* array, int arrayIndex, int count) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, arrayIndex, count));
    }
    // public System.Collections.Generic.IEqualityComparer`1<T> get_Comparer()
    // Offset: 0x18C4FF4
    System::Collections::Generic::IEqualityComparer_1<T>* get_Comparer() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEqualityComparer_1<T>*>(this, "get_Comparer"));
    }
    // public System.Void TrimExcess()
    // Offset: 0x18C4FFC
    void TrimExcess() {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "TrimExcess"));
    }
    // private System.Void Initialize(System.Int32 capacity)
    // Offset: 0x18C5208
    void Initialize(int capacity) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "Initialize", capacity));
    }
    // private System.Void IncreaseCapacity()
    // Offset: 0x18C52E4
    void IncreaseCapacity() {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "IncreaseCapacity"));
    }
    // private System.Void SetCapacity(System.Int32 newSize)
    // Offset: 0x18C53C0
    void SetCapacity(int newSize) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "SetCapacity", newSize));
    }
    // private System.Boolean AddIfNotPresent(T value)
    // Offset: 0x18C5524
    bool AddIfNotPresent(T value) {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AddIfNotPresent", value));
    }
    // private System.Void AddValue(System.Int32 index, System.Int32 hashCode, T value)
    // Offset: 0x18C5848
    void AddValue(int index, int hashCode, T value) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "AddValue", index, hashCode, value));
    }
    // static private System.Boolean AreEqualityComparersEqual(System.Collections.Generic.HashSet`1<T> set1, System.Collections.Generic.HashSet`1<T> set2)
    // Offset: 0x18C5924
    static bool AreEqualityComparersEqual(System::Collections::Generic::HashSet_1<T>* set1, System::Collections::Generic::HashSet_1<T>* set2) {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<bool>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "AreEqualityComparersEqual", set1, set2));
    }
    // private System.Int32 InternalGetHashCode(T item)
    // Offset: 0x18C5A0C
    int InternalGetHashCode(T item) {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<int>(this, "InternalGetHashCode", item));
    }
    // public System.Void .ctor()
    // Offset: 0x18C7F38
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static HashSet_1<T>* New_ctor() {
      return (HashSet_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get()));
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Add(T item)
    // Offset: 0x18C3C34
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::Add(T item)
    void System_Collections_Generic_ICollection_1_Add(T item) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<T>.Add", item));
    }
    // public System.Void Clear()
    // Offset: 0x18C60F0
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::Clear()
    void Clear() {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Clear
    // Maps to method: Clear
    void System_Collections_Generic_ICollection_1_Clear() {
      Clear();
    }
    // public System.Boolean Contains(T item)
    // Offset: 0x18C85D0
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::Contains(T item)
    bool Contains(T item) {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Contains", item));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Contains
    // Maps to method: Contains
    bool System_Collections_Generic_ICollection_1_Contains(T item) {
      return Contains(item);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0x18C3E58
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::CopyTo(T[] array, System.Int32 arrayIndex)
    void CopyTo(::Array<T>* array, int arrayIndex) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, arrayIndex));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_CopyTo
    // Maps to method: CopyTo
    void System_Collections_Generic_ICollection_1_CopyTo(::Array<T>* array, int arrayIndex) {
      CopyTo(array, arrayIndex);
    }
    // public System.Boolean Remove(T item)
    // Offset: 0x18C8780
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::Remove(T item)
    bool Remove(T item) {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Remove", item));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Remove
    // Maps to method: Remove
    bool System_Collections_Generic_ICollection_1_Remove(T item) {
      return Remove(item);
    }
    // public System.Int32 get_Count()
    // Offset: 0x18C8A24
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Int32 ICollection`1::get_Count()
    // Base method: System.Int32 IReadOnlyCollection`1::get_Count()
    int get_Count() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
    // Maps to method: get_Count
    int System_Collections_Generic_ICollection_1_get_Count() {
      return get_Count();
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0x18C4140
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::get_IsReadOnly()
    bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<T>.get_IsReadOnly"));
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0x18C4168
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable`1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<T>*>(this, "System.Collections.Generic.IEnumerable<T>.GetEnumerator"));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x18C41E0
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x18C4258
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "GetObjectData", info, context));
    }
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      GetObjectData(info, context);
    }
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0x18C4448
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void OnDeserialization(::Il2CppObject* sender) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "OnDeserialization", sender));
    }
    // Creating proxy method: System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
    // Maps to method: OnDeserialization
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
      OnDeserialization(sender);
    }
  }; // System.Collections.Generic.HashSet`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Generic::HashSet_1, "System.Collections.Generic", "HashSet`1");
#pragma pack(pop)
