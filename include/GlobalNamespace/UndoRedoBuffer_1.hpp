// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:02 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: UndoRedoBuffer`1
  template<typename T>
  class UndoRedoBuffer_1 : public ::Il2CppObject {
    public:
    // private System.Collections.Generic.List`1<T> _data
    // Offset: 0x0
    System::Collections::Generic::List_1<T>* data;
    // private System.Int32 _capacity
    // Offset: 0x0
    int capacity;
    // private System.Int32 _cursor
    // Offset: 0x0
    int cursor;
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x13E76AC
    static UndoRedoBuffer_1<T>* New_ctor(int capacity) {
      return (UndoRedoBuffer_1<T>*)CRASH_UNLESS(il2cpp_utils::New(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UndoRedoBuffer_1<T>*>::get(), capacity));
    }
    // public System.Void Add(T item)
    // Offset: 0x13E7738
    void Add(T item) {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "Add", item));
    }
    // public T Undo()
    // Offset: 0x13E7834
    T Undo() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(this, "Undo"));
    }
    // public T Redo()
    // Offset: 0x13E78C4
    T Redo() {
      return CRASH_UNLESS(il2cpp_utils::RunMethod<T>(this, "Redo"));
    }
    // public System.Void Clear()
    // Offset: 0x13E790C
    void Clear() {
      CRASH_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
  }; // UndoRedoBuffer`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::UndoRedoBuffer_1, "", "UndoRedoBuffer`1");
#pragma pack(pop)
