// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:16 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ScoreController
  class ScoreController;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplierValuesRecorder
  class MultiplierValuesRecorder : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplierValuesRecorder::MultiplierValue
    struct MultiplierValue;
    // Autogenerated type: MultiplierValuesRecorder/MultiplierValue
    struct MultiplierValue : public System::ValueType {
      public:
      // private System.Int32 <multiplier>k__BackingField
      // Offset: 0x0
      int multiplier;
      // private System.Single <time>k__BackingField
      // Offset: 0x4
      float time;
      // Creating value type constructor for type: MultiplierValue
      MultiplierValue(int multiplier_ = {}, float time_ = {}) : multiplier{multiplier_}, time{time_} {}
      // public System.Int32 get_multiplier()
      // Offset: 0xA27A1C
      int get_multiplier();
      // private System.Void set_multiplier(System.Int32 value)
      // Offset: 0xA27A24
      void set_multiplier(int value);
      // public System.Single get_time()
      // Offset: 0xA27A2C
      float get_time();
      // private System.Void set_time(System.Single value)
      // Offset: 0xA27A34
      void set_time(float value);
      // public System.Void .ctor(System.Int32 multiplier, System.Single time)
      // Offset: 0xA27A3C
      static MultiplierValuesRecorder::MultiplierValue* New_ctor(int multiplier, float time);
    }; // MultiplierValuesRecorder/MultiplierValue
    // private ScoreController _scoreController
    // Offset: 0x18
    GlobalNamespace::ScoreController* scoreController;
    // private AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x20
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private System.Collections.Generic.List`1<MultiplierValuesRecorder/MultiplierValue> _multiplierValues
    // Offset: 0x28
    System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>* multiplierValues;
    // public System.Collections.Generic.List`1<MultiplierValuesRecorder/MultiplierValue> get_multiplierValues()
    // Offset: 0xBFA470
    System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>* get_multiplierValues();
    // protected System.Void Start()
    // Offset: 0xBFA478
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xBFA50C
    void OnDestroy();
    // private System.Void HandleScoreControllerMultiplierDidChange(System.Int32 multiplier, System.Single multiplierProgress)
    // Offset: 0xBFA5A0
    void HandleScoreControllerMultiplierDidChange(int multiplier, float multiplierProgress);
    // public System.Void .ctor()
    // Offset: 0xBFA654
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplierValuesRecorder* New_ctor();
  }; // MultiplierValuesRecorder
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplierValuesRecorder*, "", "MultiplierValuesRecorder");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplierValuesRecorder::MultiplierValue, "", "MultiplierValuesRecorder/MultiplierValue");
#pragma pack(pop)
