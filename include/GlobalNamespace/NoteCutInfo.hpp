// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:11 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberSwingRatingCounter
  class SaberSwingRatingCounter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteCutInfo
  class NoteCutInfo : public ::Il2CppObject {
    public:
    // private System.Boolean <speedOK>k__BackingField
    // Offset: 0x10
    bool speedOK;
    // private System.Boolean <directionOK>k__BackingField
    // Offset: 0x11
    bool directionOK;
    // private System.Boolean <saberTypeOK>k__BackingField
    // Offset: 0x12
    bool saberTypeOK;
    // private System.Boolean <wasCutTooSoon>k__BackingField
    // Offset: 0x13
    bool wasCutTooSoon;
    // private System.Single <saberSpeed>k__BackingField
    // Offset: 0x14
    float saberSpeed;
    // private UnityEngine.Vector3 <saberDir>k__BackingField
    // Offset: 0x18
    UnityEngine::Vector3 saberDir;
    // private SaberType <saberType>k__BackingField
    // Offset: 0x24
    GlobalNamespace::SaberType saberType;
    // private System.Single <timeDeviation>k__BackingField
    // Offset: 0x28
    float timeDeviation;
    // private System.Single <cutDirDeviation>k__BackingField
    // Offset: 0x2C
    float cutDirDeviation;
    // private UnityEngine.Vector3 <cutPoint>k__BackingField
    // Offset: 0x30
    UnityEngine::Vector3 cutPoint;
    // private UnityEngine.Vector3 <cutNormal>k__BackingField
    // Offset: 0x3C
    UnityEngine::Vector3 cutNormal;
    // private System.Single <cutDistanceToCenter>k__BackingField
    // Offset: 0x48
    float cutDistanceToCenter;
    // private SaberSwingRatingCounter <swingRatingCounter>k__BackingField
    // Offset: 0x50
    GlobalNamespace::SaberSwingRatingCounter* swingRatingCounter;
    // public System.Boolean get_speedOK()
    // Offset: 0xC01780
    bool get_speedOK();
    // private System.Void set_speedOK(System.Boolean value)
    // Offset: 0xC01788
    void set_speedOK(bool value);
    // public System.Boolean get_directionOK()
    // Offset: 0xC01794
    bool get_directionOK();
    // private System.Void set_directionOK(System.Boolean value)
    // Offset: 0xC0179C
    void set_directionOK(bool value);
    // public System.Boolean get_saberTypeOK()
    // Offset: 0xC017A8
    bool get_saberTypeOK();
    // private System.Void set_saberTypeOK(System.Boolean value)
    // Offset: 0xC017B0
    void set_saberTypeOK(bool value);
    // public System.Boolean get_wasCutTooSoon()
    // Offset: 0xC017BC
    bool get_wasCutTooSoon();
    // private System.Void set_wasCutTooSoon(System.Boolean value)
    // Offset: 0xC017C4
    void set_wasCutTooSoon(bool value);
    // public System.Single get_saberSpeed()
    // Offset: 0xC017D0
    float get_saberSpeed();
    // private System.Void set_saberSpeed(System.Single value)
    // Offset: 0xC017D8
    void set_saberSpeed(float value);
    // public UnityEngine.Vector3 get_saberDir()
    // Offset: 0xC017E0
    UnityEngine::Vector3 get_saberDir();
    // private System.Void set_saberDir(UnityEngine.Vector3 value)
    // Offset: 0xC017EC
    void set_saberDir(UnityEngine::Vector3 value);
    // public SaberType get_saberType()
    // Offset: 0xC017F8
    GlobalNamespace::SaberType get_saberType();
    // private System.Void set_saberType(SaberType value)
    // Offset: 0xC01800
    void set_saberType(GlobalNamespace::SaberType value);
    // public System.Single get_timeDeviation()
    // Offset: 0xC01808
    float get_timeDeviation();
    // private System.Void set_timeDeviation(System.Single value)
    // Offset: 0xC01810
    void set_timeDeviation(float value);
    // public System.Single get_cutDirDeviation()
    // Offset: 0xC01818
    float get_cutDirDeviation();
    // private System.Void set_cutDirDeviation(System.Single value)
    // Offset: 0xC01820
    void set_cutDirDeviation(float value);
    // public UnityEngine.Vector3 get_cutPoint()
    // Offset: 0xC01828
    UnityEngine::Vector3 get_cutPoint();
    // private System.Void set_cutPoint(UnityEngine.Vector3 value)
    // Offset: 0xC01834
    void set_cutPoint(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_cutNormal()
    // Offset: 0xC01840
    UnityEngine::Vector3 get_cutNormal();
    // private System.Void set_cutNormal(UnityEngine.Vector3 value)
    // Offset: 0xC0184C
    void set_cutNormal(UnityEngine::Vector3 value);
    // public System.Single get_cutDistanceToCenter()
    // Offset: 0xC01858
    float get_cutDistanceToCenter();
    // private System.Void set_cutDistanceToCenter(System.Single value)
    // Offset: 0xC01860
    void set_cutDistanceToCenter(float value);
    // public SaberSwingRatingCounter get_swingRatingCounter()
    // Offset: 0xC01868
    GlobalNamespace::SaberSwingRatingCounter* get_swingRatingCounter();
    // private System.Void set_swingRatingCounter(SaberSwingRatingCounter value)
    // Offset: 0xC01870
    void set_swingRatingCounter(GlobalNamespace::SaberSwingRatingCounter* value);
    // public System.Boolean get_allIsOK()
    // Offset: 0xC00B48
    bool get_allIsOK();
    // public System.Boolean get_allExceptSaberTypeIsOK()
    // Offset: 0xC01878
    bool get_allExceptSaberTypeIsOK();
    // public System.String get_FailText()
    // Offset: 0xC018A0
    ::Il2CppString* get_FailText();
    // public System.Void .ctor(System.Boolean speedOK, System.Boolean directionOK, System.Boolean saberTypeOK, System.Boolean wasCutTooSoon, System.Single saberSpeed, UnityEngine.Vector3 saberDir, SaberType saberType, System.Single timeDeviation, System.Single cutDirDeviation, UnityEngine.Vector3 cutCenter, UnityEngine.Vector3 cutNormal, SaberSwingRatingCounter swingRatingCounter, System.Single cutDistanceToCenter)
    // Offset: 0xC0193C
    static NoteCutInfo* New_ctor(bool speedOK, bool directionOK, bool saberTypeOK, bool wasCutTooSoon, float saberSpeed, UnityEngine::Vector3 saberDir, GlobalNamespace::SaberType saberType, float timeDeviation, float cutDirDeviation, UnityEngine::Vector3 cutCenter, UnityEngine::Vector3 cutNormal, GlobalNamespace::SaberSwingRatingCounter* swingRatingCounter, float cutDistanceToCenter);
  }; // NoteCutInfo
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteCutInfo*, "", "NoteCutInfo");
#pragma pack(pop)
