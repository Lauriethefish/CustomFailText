// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:04 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightWithId
  class LightWithId;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: LightWithIdManager
  class LightWithIdManager : public UnityEngine::MonoBehaviour {
    public:
    // private System.Action`2<System.Int32,UnityEngine.Color> didSetColorForIdEvent
    // Offset: 0x18
    System::Action_2<int, UnityEngine::Color>* didSetColorForIdEvent;
    // static field const value: static private System.Int32 kMaxLightId
    static constexpr const int kMaxLightId = 20;
    // Get static field: static private System.Int32 kMaxLightId
    static int _get_kMaxLightId();
    // Set static field: static private System.Int32 kMaxLightId
    static void _set_kMaxLightId(int value);
    // private System.Collections.Generic.List`1<LightWithId>[] _lights
    // Offset: 0x20
    ::Array<System::Collections::Generic::List_1<GlobalNamespace::LightWithId*>*>* lights;
    // private System.Nullable`1<UnityEngine.Color>[] _colors
    // Offset: 0x28
    ::Array<System::Nullable_1<UnityEngine::Color>>* colors;
    // private System.Int32 _lastColorChangeFrameNum
    // Offset: 0x30
    int lastColorChangeFrameNum;
    // public System.Void add_didSetColorForIdEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x18134E0
    void add_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value);
    // public System.Void remove_didSetColorForIdEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x1813584
    void remove_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value);
    // public System.Nullable`1<UnityEngine.Color>[] get_colors()
    // Offset: 0x1813628
    ::Array<System::Nullable_1<UnityEngine::Color>>* get_colors();
    // public System.Int32 get_lastColorChangeFrameNum()
    // Offset: 0x1813630
    int get_lastColorChangeFrameNum();
    // public System.Void RegisterLight(LightWithId light)
    // Offset: 0x1813214
    void RegisterLight(GlobalNamespace::LightWithId* light);
    // public System.Void UnregisterLight(LightWithId light)
    // Offset: 0x1813434
    void UnregisterLight(GlobalNamespace::LightWithId* light);
    // public System.Void SetColorForId(System.Int32 id, UnityEngine.Color color)
    // Offset: 0x1813638
    void SetColorForId(int id, UnityEngine::Color color);
    // public UnityEngine.Color GetColorForId(System.Int32 id)
    // Offset: 0x18137E0
    UnityEngine::Color GetColorForId(int id);
    // public System.Void .ctor()
    // Offset: 0x1813890
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static LightWithIdManager* New_ctor();
  }; // LightWithIdManager
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LightWithIdManager*, "", "LightWithIdManager");
#pragma pack(pop)
