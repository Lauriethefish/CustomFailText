// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:05 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: VREvent_t
  struct VREvent_t;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SteamVR_Overlay
  class SteamVR_Overlay : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::SteamVR_Overlay::IntersectionResults
    struct IntersectionResults;
    // public UnityEngine.Texture texture
    // Offset: 0x18
    UnityEngine::Texture* texture;
    // public System.Boolean curved
    // Offset: 0x20
    bool curved;
    // public System.Boolean antialias
    // Offset: 0x21
    bool antialias;
    // public System.Boolean highquality
    // Offset: 0x22
    bool highquality;
    // public System.Single scale
    // Offset: 0x24
    float scale;
    // public System.Single distance
    // Offset: 0x28
    float distance;
    // public System.Single alpha
    // Offset: 0x2C
    float alpha;
    // public UnityEngine.Vector4 uvOffset
    // Offset: 0x30
    UnityEngine::Vector4 uvOffset;
    // public UnityEngine.Vector2 mouseScale
    // Offset: 0x40
    UnityEngine::Vector2 mouseScale;
    // public UnityEngine.Vector2 curvedRange
    // Offset: 0x48
    UnityEngine::Vector2 curvedRange;
    // public Valve.VR.VROverlayInputMethod inputMethod
    // Offset: 0x50
    Valve::VR::VROverlayInputMethod inputMethod;
    // Get static field: static private SteamVR_Overlay <instance>k__BackingField
    static GlobalNamespace::SteamVR_Overlay* _get_$instance$k__BackingField();
    // Set static field: static private SteamVR_Overlay <instance>k__BackingField
    static void _set_$instance$k__BackingField(GlobalNamespace::SteamVR_Overlay* value);
    // private System.UInt64 handle
    // Offset: 0x58
    uint64_t handle;
    // static public SteamVR_Overlay get_instance()
    // Offset: 0xD74EC4
    static GlobalNamespace::SteamVR_Overlay* get_instance();
    // static private System.Void set_instance(SteamVR_Overlay value)
    // Offset: 0xD74F14
    static void set_instance(GlobalNamespace::SteamVR_Overlay* value);
    // static public System.String get_key()
    // Offset: 0xD7155C
    static ::Il2CppString* get_key();
    // private System.Void OnEnable()
    // Offset: 0xD74F6C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xD750C0
    void OnDisable();
    // public System.Void UpdateOverlay()
    // Offset: 0xD75180
    void UpdateOverlay();
    // public System.Boolean PollNextEvent(Valve.VR.VREvent_t pEvent)
    // Offset: 0xD755BC
    bool PollNextEvent(Valve::VR::VREvent_t& pEvent);
    // public System.Boolean ComputeIntersection(UnityEngine.Vector3 source, UnityEngine.Vector3 direction, SteamVR_Overlay/IntersectionResults results)
    // Offset: 0xD756C8
    bool ComputeIntersection(UnityEngine::Vector3 source, UnityEngine::Vector3 direction, GlobalNamespace::SteamVR_Overlay::IntersectionResults& results);
    // public System.Void .ctor()
    // Offset: 0xD75884
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static SteamVR_Overlay* New_ctor();
  }; // SteamVR_Overlay
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Overlay*, "", "SteamVR_Overlay");
#pragma pack(pop)
