// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:20 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TimeSlider
  class TimeSlider;
  // Forward declaring type: PercentSlider
  class PercentSlider;
  // Forward declaring type: RangeValuesTextSlider
  class RangeValuesTextSlider;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: SongPreviewPlayer
  class SongPreviewPlayer;
  // Forward declaring type: PracticeSettings
  class PracticeSettings;
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PracticeViewController
  class PracticeViewController : public HMUI::ViewController {
    public:
    // private HMUI.TimeSlider _songStartSlider
    // Offset: 0x68
    HMUI::TimeSlider* songStartSlider;
    // private HMUI.PercentSlider _speedSlider
    // Offset: 0x70
    HMUI::PercentSlider* speedSlider;
    // private TMPro.TextMeshProUGUI _songNameText
    // Offset: 0x78
    TMPro::TextMeshProUGUI* songNameText;
    // private UnityEngine.UI.Button _playButton
    // Offset: 0x80
    UnityEngine::UI::Button* playButton;
    // private PlayerDataModel _playerDataModel
    // Offset: 0x88
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // private SongPreviewPlayer _songPreviewPlayer
    // Offset: 0x90
    GlobalNamespace::SongPreviewPlayer* songPreviewPlayer;
    // static field const value: static private System.Single kWaitBeforePlayPreviewAfterPreviewStartValueChanged
    static constexpr const float kWaitBeforePlayPreviewAfterPreviewStartValueChanged = 1;
    // Get static field: static private System.Single kWaitBeforePlayPreviewAfterPreviewStartValueChanged
    static float _get_kWaitBeforePlayPreviewAfterPreviewStartValueChanged();
    // Set static field: static private System.Single kWaitBeforePlayPreviewAfterPreviewStartValueChanged
    static void _set_kWaitBeforePlayPreviewAfterPreviewStartValueChanged(float value);
    // static field const value: static private System.Single kMinValueChangeToInstantPlayPreview
    static constexpr const float kMinValueChangeToInstantPlayPreview = 3;
    // Get static field: static private System.Single kMinValueChangeToInstantPlayPreview
    static float _get_kMinValueChangeToInstantPlayPreview();
    // Set static field: static private System.Single kMinValueChangeToInstantPlayPreview
    static void _set_kMinValueChangeToInstantPlayPreview(float value);
    // private System.Action didPressPlayButtonEvent
    // Offset: 0x98
    System::Action* didPressPlayButtonEvent;
    // private PracticeSettings _practiceSettings
    // Offset: 0xA0
    GlobalNamespace::PracticeSettings* practiceSettings;
    // private System.Single _currentPlayingStartTime
    // Offset: 0xA8
    float currentPlayingStartTime;
    // private System.Single _maxStartSongTime
    // Offset: 0xAC
    float maxStartSongTime;
    // private IBeatmapLevel _level
    // Offset: 0xB0
    GlobalNamespace::IBeatmapLevel* level;
    // public System.Void add_didPressPlayButtonEvent(System.Action value)
    // Offset: 0xC078B0
    void add_didPressPlayButtonEvent(System::Action* value);
    // public System.Void remove_didPressPlayButtonEvent(System.Action value)
    // Offset: 0xC07954
    void remove_didPressPlayButtonEvent(System::Action* value);
    // public PracticeSettings get_practiceSettings()
    // Offset: 0xC079F8
    GlobalNamespace::PracticeSettings* get_practiceSettings();
    // public System.Void Init(IBeatmapLevel level)
    // Offset: 0xC07A00
    void Init(GlobalNamespace::IBeatmapLevel* level);
    // private System.Void PlayPreview()
    // Offset: 0xC07F38
    void PlayPreview();
    // private System.Void RefreshUI()
    // Offset: 0xC07DF0
    void RefreshUI();
    // private System.Void HandleSpeedSliderValueDidChange(HMUI.RangeValuesTextSlider slider, System.Single value)
    // Offset: 0xC080A0
    void HandleSpeedSliderValueDidChange(HMUI::RangeValuesTextSlider* slider, float value);
    // private System.Void HandleSongStartSliderValueDidChange(HMUI.RangeValuesTextSlider slider, System.Single value)
    // Offset: 0xC080BC
    void HandleSongStartSliderValueDidChange(HMUI::RangeValuesTextSlider* slider, float value);
    // private System.Void PlayButtonPressed()
    // Offset: 0xC08160
    void PlayButtonPressed();
    // protected override System.Void DidActivate(System.Boolean firstActivation, HMUI.ViewController/ActivationType activationType)
    // Offset: 0xC07C14
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, HMUI.ViewController/ActivationType activationType)
    void DidActivate(bool firstActivation, HMUI::ViewController::ActivationType activationType);
    // protected override System.Void DidDeactivate(HMUI.ViewController/DeactivationType deactivationType)
    // Offset: 0xC07E44
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidDeactivate(HMUI.ViewController/DeactivationType deactivationType)
    void DidDeactivate(HMUI::ViewController::DeactivationType deactivationType);
    // public System.Void .ctor()
    // Offset: 0xC0820C
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static PracticeViewController* New_ctor();
  }; // PracticeViewController
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PracticeViewController*, "", "PracticeViewController");
#pragma pack(pop)
