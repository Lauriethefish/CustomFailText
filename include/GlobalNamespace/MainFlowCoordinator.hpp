// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:18 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: MainMenuViewController
#include "GlobalNamespace/MainMenuViewController.hpp"
// Including type: SettingsFlowCoordinator
#include "GlobalNamespace/SettingsFlowCoordinator.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MainSettingsModelSO
  class MainSettingsModelSO;
  // Forward declaring type: MenuLightsPresetSO
  class MenuLightsPresetSO;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: SoloFreePlayFlowCoordinator
  class SoloFreePlayFlowCoordinator;
  // Forward declaring type: PartyFreePlayFlowCoordinator
  class PartyFreePlayFlowCoordinator;
  // Forward declaring type: CampaignFlowCoordinator
  class CampaignFlowCoordinator;
  // Forward declaring type: IAnnotatedBeatmapLevelCollection
  class IAnnotatedBeatmapLevelCollection;
  // Forward declaring type: ReleaseInfoViewController
  class ReleaseInfoViewController;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: FloorAdjustViewController
  class FloorAdjustViewController;
  // Forward declaring type: HowToPlayViewController
  class HowToPlayViewController;
  // Forward declaring type: PlayerSettingsViewController
  class PlayerSettingsViewController;
  // Forward declaring type: PlayerStatisticsViewController
  class PlayerStatisticsViewController;
  // Forward declaring type: PromoViewController
  class PromoViewController;
  // Forward declaring type: MenuLightsManager
  class MenuLightsManager;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: MenuTransitionsHelper
  class MenuTransitionsHelper;
  // Forward declaring type: MenuDestination
  class MenuDestination;
  // Forward declaring type: LevelSelectionFlowCoordinator
  class LevelSelectionFlowCoordinator;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: ViewController because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MainFlowCoordinator
  class MainFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // Nested type: GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__36
    class $ProcessMenuDestinationRequestAfterFrameCoroutine$d__36;
    // private MainSettingsModelSO _mainSettingsModel
    // Offset: 0xA8
    GlobalNamespace::MainSettingsModelSO* mainSettingsModel;
    // private MenuLightsPresetSO _defaultLightsPreset
    // Offset: 0xB0
    GlobalNamespace::MenuLightsPresetSO* defaultLightsPreset;
    // private PlayerDataModel _playerDataModel
    // Offset: 0xB8
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // private SoloFreePlayFlowCoordinator _soloFreePlayFlowCoordinator
    // Offset: 0xC0
    GlobalNamespace::SoloFreePlayFlowCoordinator* soloFreePlayFlowCoordinator;
    // private PartyFreePlayFlowCoordinator _partyFreePlayFlowCoordinator
    // Offset: 0xC8
    GlobalNamespace::PartyFreePlayFlowCoordinator* partyFreePlayFlowCoordinator;
    // private CampaignFlowCoordinator _campaignFlowCoordinator
    // Offset: 0xD0
    GlobalNamespace::CampaignFlowCoordinator* campaignFlowCoordinator;
    // private SettingsFlowCoordinator _settingsFlowCoordinator
    // Offset: 0xD8
    GlobalNamespace::SettingsFlowCoordinator* settingsFlowCoordinator;
    // private ReleaseInfoViewController _releaseInfoViewController
    // Offset: 0xE0
    GlobalNamespace::ReleaseInfoViewController* releaseInfoViewController;
    // private SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Offset: 0xE8
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // private MainMenuViewController _mainMenuViewController
    // Offset: 0xF0
    GlobalNamespace::MainMenuViewController* mainMenuViewController;
    // private HowToPlayViewController _howToPlayViewController
    // Offset: 0xF8
    GlobalNamespace::HowToPlayViewController* howToPlayViewController;
    // private PlayerSettingsViewController _playerSettingsViewController
    // Offset: 0x100
    GlobalNamespace::PlayerSettingsViewController* playerSettingsViewController;
    // private PlayerStatisticsViewController _playerStatisticsViewController
    // Offset: 0x108
    GlobalNamespace::PlayerStatisticsViewController* playerStatisticsViewController;
    // private PromoViewController _promoViewController
    // Offset: 0x110
    GlobalNamespace::PromoViewController* promoViewController;
    // private MenuLightsManager _menuLightsManager
    // Offset: 0x118
    GlobalNamespace::MenuLightsManager* menuLightsManager;
    // private FadeInOutController _fadeInOut
    // Offset: 0x120
    GlobalNamespace::FadeInOutController* fadeInOut;
    // private BeatmapLevelsModel _beatmapLevelsModel
    // Offset: 0x128
    GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // private MenuTransitionsHelper _menuTransitionsHelper
    // Offset: 0x130
    GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper;
    // private MenuDestination _menuDestinationRequest
    // Offset: 0x138
    GlobalNamespace::MenuDestination* menuDestinationRequest;
    // private HMUI.FlowCoordinator _afterDialogPromptFlowCoordinator
    // Offset: 0x140
    HMUI::FlowCoordinator* afterDialogPromptFlowCoordinator;
    // Get static field: static private System.Boolean _startWithSettings
    static bool _get__startWithSettings();
    // Set static field: static private System.Boolean _startWithSettings
    static void _set__startWithSettings(bool value);
    // private System.Void PresentFlowCoordinatorOrAskForTutorial(HMUI.FlowCoordinator flowCoordinator)
    // Offset: 0xBE8E08
    void PresentFlowCoordinatorOrAskForTutorial(HMUI::FlowCoordinator* flowCoordinator);
    // private System.Void HandleMainMenuViewControllerDidFinish(MainMenuViewController viewController, MainMenuViewController/MenuButton subMenuType)
    // Offset: 0xBE8FB8
    void HandleMainMenuViewControllerDidFinish(GlobalNamespace::MainMenuViewController* viewController, GlobalNamespace::MainMenuViewController::MenuButton subMenuType);
    // private System.Void HandleFloorAdjustViewControllerDidFinishEvent(FloorAdjustViewController viewController)
    // Offset: 0xBE9374
    void HandleFloorAdjustViewControllerDidFinishEvent(GlobalNamespace::FloorAdjustViewController* viewController);
    // private System.Void HandlePlayerSettingsViewControllerDidFinish(PlayerSettingsViewController viewController)
    // Offset: 0xBE97AC
    void HandlePlayerSettingsViewControllerDidFinish(GlobalNamespace::PlayerSettingsViewController* viewController);
    // private System.Void HandleHowToPlayViewControllerDidPressTutorialButton()
    // Offset: 0xBE97E8
    void HandleHowToPlayViewControllerDidPressTutorialButton();
    // private System.Void HandleCampaignFlowCoordinatorDidFinish(CampaignFlowCoordinator flowCoordinator)
    // Offset: 0xBE993C
    void HandleCampaignFlowCoordinatorDidFinish(GlobalNamespace::CampaignFlowCoordinator* flowCoordinator);
    // private System.Void HandleSoloFreePlayFlowCoordinatorDidFinish(LevelSelectionFlowCoordinator flowCoordinator)
    // Offset: 0xBE994C
    void HandleSoloFreePlayFlowCoordinatorDidFinish(GlobalNamespace::LevelSelectionFlowCoordinator* flowCoordinator);
    // private System.Void HandlePartyFreePlayFlowCoordinatorDidFinish(LevelSelectionFlowCoordinator flowCoordinator)
    // Offset: 0xBE995C
    void HandlePartyFreePlayFlowCoordinatorDidFinish(GlobalNamespace::LevelSelectionFlowCoordinator* flowCoordinator);
    // private System.Void HandleSettingsFlowCoordinatorDidFinish(SettingsFlowCoordinator settingsFlowCoordinator, SettingsFlowCoordinator/FinishAction finishAction)
    // Offset: 0xBE996C
    void HandleSettingsFlowCoordinatorDidFinish(GlobalNamespace::SettingsFlowCoordinator* settingsFlowCoordinator, GlobalNamespace::SettingsFlowCoordinator::FinishAction finishAction);
    // private System.Void HandlePromoViewControllerPromoButtonWasPressed(PromoViewController promoViewController, IAnnotatedBeatmapLevelCollection annotatedBeatmapLevelCollection, IPreviewBeatmapLevel previewBeatmapLevel)
    // Offset: 0xBE9A6C
    void HandlePromoViewControllerPromoButtonWasPressed(GlobalNamespace::PromoViewController* promoViewController, GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollection, GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel);
    // private System.Void ProcessMenuDestinationRequest(MenuDestination destination)
    // Offset: 0xBE9AC8
    void ProcessMenuDestinationRequest(GlobalNamespace::MenuDestination* destination);
    // private System.Collections.IEnumerator ProcessMenuDestinationRequestAfterFrameCoroutine(MenuDestination destination)
    // Offset: 0xBE8830
    System::Collections::IEnumerator* ProcessMenuDestinationRequestAfterFrameCoroutine(GlobalNamespace::MenuDestination* destination);
    // private System.Void <PresentFlowCoordinatorOrAskForTutorial>b__25_0(System.Int32 buttonNumber)
    // Offset: 0xBE9D88
    void $PresentFlowCoordinatorOrAskForTutorial$b__25_0(int buttonNumber);
    // private System.Void <PresentFlowCoordinatorOrAskForTutorial>b__25_1()
    // Offset: 0xBE9E40
    void $PresentFlowCoordinatorOrAskForTutorial$b__25_1();
    // private System.Void <HandleMainMenuViewControllerDidFinish>b__26_0()
    // Offset: 0xBE9E54
    void $HandleMainMenuViewControllerDidFinish$b__26_0();
    // protected override System.Void DidActivate(System.Boolean firstActivation, HMUI.FlowCoordinator/ActivationType activationType)
    // Offset: 0xBE8384
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, HMUI.FlowCoordinator/ActivationType activationType)
    void DidActivate(bool firstActivation, HMUI::FlowCoordinator::ActivationType activationType);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, System.Boolean immediately)
    // Offset: 0xBE88C8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, System.Boolean immediately)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, bool immediately);
    // protected override System.Void InitialViewControllerWasPresented()
    // Offset: 0xBE8A38
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::InitialViewControllerWasPresented()
    void InitialViewControllerWasPresented();
    // protected override System.Void DidDeactivate(HMUI.FlowCoordinator/DeactivationType deactivationType)
    // Offset: 0xBE8AB4
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(HMUI.FlowCoordinator/DeactivationType deactivationType)
    void DidDeactivate(HMUI::FlowCoordinator::DeactivationType deactivationType);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0xBE9CD8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // public System.Void .ctor()
    // Offset: 0xBE9D80
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MainFlowCoordinator* New_ctor();
  }; // MainFlowCoordinator
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MainFlowCoordinator*, "", "MainFlowCoordinator");
#pragma pack(pop)
