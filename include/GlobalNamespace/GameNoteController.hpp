// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:13 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BoxCuttableBySaber
  class BoxCuttableBySaber;
  // Forward declaring type: DisappearingArrowController
  class DisappearingArrowController;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: Saber
  class Saber;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: GameNoteController
  class GameNoteController : public GlobalNamespace::NoteController {
    public:
    // private BoxCuttableBySaber _bigCuttableBySaber
    // Offset: 0x78
    GlobalNamespace::BoxCuttableBySaber* bigCuttableBySaber;
    // private BoxCuttableBySaber _smallCuttableBySaber
    // Offset: 0x80
    GlobalNamespace::BoxCuttableBySaber* smallCuttableBySaber;
    // private DisappearingArrowController _disappearingArrowController
    // Offset: 0x88
    GlobalNamespace::DisappearingArrowController* disappearingArrowController;
    // private UnityEngine.GameObject _wrapperGO
    // Offset: 0x90
    UnityEngine::GameObject* wrapperGO;
    // private AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x98
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private System.Boolean _disappearingArrow
    // Offset: 0xA0
    bool disappearingArrow;
    // private System.Boolean _ghostNote
    // Offset: 0xA1
    bool ghostNote;
    // public System.Boolean get_ghostNote()
    // Offset: 0xB3BF4C
    bool get_ghostNote();
    // public System.Void Init(NoteData noteData, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, System.Boolean disappearingArrow, System.Boolean ghostNote, System.Single cutDirectionAngleOffset)
    // Offset: 0xB3C04C
    void Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, bool disappearingArrow, bool ghostNote, float cutDirectionAngleOffset);
    // private System.Void HandleBigWasCutBySaberEvent(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    // Offset: 0xB3C390
    void HandleBigWasCutBySaberEvent(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec);
    // private System.Void HandleSmallWasCutBySaberEvent(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    // Offset: 0xB3C730
    void HandleSmallWasCutBySaberEvent(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec);
    // private System.Void HandleCut(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec, System.Boolean allowBadCut)
    // Offset: 0xB3C3A8
    void HandleCut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec, bool allowBadCut);
    // public override System.Void set_hide(System.Boolean value)
    // Offset: 0xB3BF54
    // Implemented from: NoteController
    // Base method: System.Void NoteController::set_hide(System.Boolean value)
    void set_hide(bool value);
    // protected override System.Void Awake()
    // Offset: 0xB3BF78
    // Implemented from: NoteController
    // Base method: System.Void NoteController::Awake()
    void Awake();
    // protected override System.Void OnDestroy()
    // Offset: 0xB3C134
    // Implemented from: NoteController
    // Base method: System.Void NoteController::OnDestroy()
    void OnDestroy();
    // protected override System.Void Update()
    // Offset: 0xB3C288
    // Implemented from: NoteController
    // Base method: System.Void NoteController::Update()
    void Update();
    // protected override System.Void NoteDidPassMissedMarker()
    // Offset: 0xB3C2EC
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidPassMissedMarker()
    void NoteDidPassMissedMarker();
    // protected override System.Void NoteDidStartDissolving()
    // Offset: 0xB3C344
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidStartDissolving()
    void NoteDidStartDissolving();
    // protected override System.Void NoteDidStartJump()
    // Offset: 0xB3C748
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidStartJump()
    void NoteDidStartJump();
    // public System.Void .ctor()
    // Offset: 0xB3C794
    // Implemented from: NoteController
    // Base method: System.Void NoteController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static GameNoteController* New_ctor();
  }; // GameNoteController
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameNoteController*, "", "GameNoteController");
#pragma pack(pop)
