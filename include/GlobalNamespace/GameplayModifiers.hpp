// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:08 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: EnergyType because it is already included!
  // Skipping declaration: EnabledObstacleType because it is already included!
  // Skipping declaration: SongSpeed because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: GameplayModifiers
  class GameplayModifiers : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::GameplayModifiers::EnabledObstacleType
    struct EnabledObstacleType;
    // Nested type: GlobalNamespace::GameplayModifiers::EnergyType
    struct EnergyType;
    // Nested type: GlobalNamespace::GameplayModifiers::SongSpeed
    struct SongSpeed;
    // Autogenerated type: GameplayModifiers/EnabledObstacleType
    struct EnabledObstacleType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public GameplayModifiers/EnabledObstacleType All
      static constexpr const int All = 0;
      // Get static field: static public GameplayModifiers/EnabledObstacleType All
      static GlobalNamespace::GameplayModifiers::EnabledObstacleType _get_All();
      // Set static field: static public GameplayModifiers/EnabledObstacleType All
      static void _set_All(GlobalNamespace::GameplayModifiers::EnabledObstacleType value);
      // static field const value: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
      static constexpr const int FullHeightOnly = 1;
      // Get static field: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
      static GlobalNamespace::GameplayModifiers::EnabledObstacleType _get_FullHeightOnly();
      // Set static field: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
      static void _set_FullHeightOnly(GlobalNamespace::GameplayModifiers::EnabledObstacleType value);
      // static field const value: static public GameplayModifiers/EnabledObstacleType NoObstacles
      static constexpr const int NoObstacles = 2;
      // Get static field: static public GameplayModifiers/EnabledObstacleType NoObstacles
      static GlobalNamespace::GameplayModifiers::EnabledObstacleType _get_NoObstacles();
      // Set static field: static public GameplayModifiers/EnabledObstacleType NoObstacles
      static void _set_NoObstacles(GlobalNamespace::GameplayModifiers::EnabledObstacleType value);
      // Creating value type constructor for type: EnabledObstacleType
      EnabledObstacleType(int value_ = {}) : value{value_} {}
    }; // GameplayModifiers/EnabledObstacleType
    // Autogenerated type: GameplayModifiers/EnergyType
    struct EnergyType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public GameplayModifiers/EnergyType Bar
      static constexpr const int Bar = 0;
      // Get static field: static public GameplayModifiers/EnergyType Bar
      static GlobalNamespace::GameplayModifiers::EnergyType _get_Bar();
      // Set static field: static public GameplayModifiers/EnergyType Bar
      static void _set_Bar(GlobalNamespace::GameplayModifiers::EnergyType value);
      // static field const value: static public GameplayModifiers/EnergyType Battery
      static constexpr const int Battery = 1;
      // Get static field: static public GameplayModifiers/EnergyType Battery
      static GlobalNamespace::GameplayModifiers::EnergyType _get_Battery();
      // Set static field: static public GameplayModifiers/EnergyType Battery
      static void _set_Battery(GlobalNamespace::GameplayModifiers::EnergyType value);
      // Creating value type constructor for type: EnergyType
      EnergyType(int value_ = {}) : value{value_} {}
    }; // GameplayModifiers/EnergyType
    // Autogenerated type: GameplayModifiers/SongSpeed
    struct SongSpeed : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public GameplayModifiers/SongSpeed Normal
      static constexpr const int Normal = 0;
      // Get static field: static public GameplayModifiers/SongSpeed Normal
      static GlobalNamespace::GameplayModifiers::SongSpeed _get_Normal();
      // Set static field: static public GameplayModifiers/SongSpeed Normal
      static void _set_Normal(GlobalNamespace::GameplayModifiers::SongSpeed value);
      // static field const value: static public GameplayModifiers/SongSpeed Faster
      static constexpr const int Faster = 1;
      // Get static field: static public GameplayModifiers/SongSpeed Faster
      static GlobalNamespace::GameplayModifiers::SongSpeed _get_Faster();
      // Set static field: static public GameplayModifiers/SongSpeed Faster
      static void _set_Faster(GlobalNamespace::GameplayModifiers::SongSpeed value);
      // static field const value: static public GameplayModifiers/SongSpeed Slower
      static constexpr const int Slower = 2;
      // Get static field: static public GameplayModifiers/SongSpeed Slower
      static GlobalNamespace::GameplayModifiers::SongSpeed _get_Slower();
      // Set static field: static public GameplayModifiers/SongSpeed Slower
      static void _set_Slower(GlobalNamespace::GameplayModifiers::SongSpeed value);
      // Creating value type constructor for type: SongSpeed
      SongSpeed(int value_ = {}) : value{value_} {}
    }; // GameplayModifiers/SongSpeed
    // private GameplayModifiers/EnergyType _energyType
    // Offset: 0x10
    GlobalNamespace::GameplayModifiers::EnergyType energyType;
    // private System.Boolean _noFail
    // Offset: 0x14
    bool noFail;
    // private System.Boolean _demoNoFail
    // Offset: 0x15
    bool demoNoFail;
    // private System.Boolean _instaFail
    // Offset: 0x16
    bool instaFail;
    // private System.Boolean _failOnSaberClash
    // Offset: 0x17
    bool failOnSaberClash;
    // private GameplayModifiers/EnabledObstacleType _enabledObstacleType
    // Offset: 0x18
    GlobalNamespace::GameplayModifiers::EnabledObstacleType enabledObstacleType;
    // private System.Boolean _demoNoObstacles
    // Offset: 0x1C
    bool demoNoObstacles;
    // private System.Boolean _noBombs
    // Offset: 0x1D
    bool noBombs;
    // private System.Boolean _fastNotes
    // Offset: 0x1E
    bool fastNotes;
    // private System.Boolean _strictAngles
    // Offset: 0x1F
    bool strictAngles;
    // private System.Boolean _disappearingArrows
    // Offset: 0x20
    bool disappearingArrows;
    // private System.Boolean _ghostNotes
    // Offset: 0x21
    bool ghostNotes;
    // private GameplayModifiers/SongSpeed _songSpeed
    // Offset: 0x24
    GlobalNamespace::GameplayModifiers::SongSpeed songSpeed;
    // private System.Boolean _noArrows
    // Offset: 0x28
    bool noArrows;
    // public GameplayModifiers/EnergyType get_energyType()
    // Offset: 0xB3E5B8
    GlobalNamespace::GameplayModifiers::EnergyType get_energyType();
    // public System.Void set_energyType(GameplayModifiers/EnergyType value)
    // Offset: 0xB3E5C0
    void set_energyType(GlobalNamespace::GameplayModifiers::EnergyType value);
    // public System.Boolean get_batteryEnergy()
    // Offset: 0xB3E5C8
    bool get_batteryEnergy();
    // public System.Void set_batteryEnergy(System.Boolean value)
    // Offset: 0xB3E5D8
    void set_batteryEnergy(bool value);
    // public System.Boolean get_noFail()
    // Offset: 0xB3E604
    bool get_noFail();
    // public System.Void set_noFail(System.Boolean value)
    // Offset: 0xB3E60C
    void set_noFail(bool value);
    // public System.Boolean get_demoNoFail()
    // Offset: 0xB3E618
    bool get_demoNoFail();
    // public System.Void set_demoNoFail(System.Boolean value)
    // Offset: 0xB3E620
    void set_demoNoFail(bool value);
    // public System.Boolean get_instaFail()
    // Offset: 0xB3E62C
    bool get_instaFail();
    // public System.Void set_instaFail(System.Boolean value)
    // Offset: 0xB3E634
    void set_instaFail(bool value);
    // public System.Boolean get_failOnSaberClash()
    // Offset: 0xB3E640
    bool get_failOnSaberClash();
    // public System.Void set_failOnSaberClash(System.Boolean value)
    // Offset: 0xB3E648
    void set_failOnSaberClash(bool value);
    // public GameplayModifiers/EnabledObstacleType get_enabledObstacleType()
    // Offset: 0xB3E654
    GlobalNamespace::GameplayModifiers::EnabledObstacleType get_enabledObstacleType();
    // public System.Void set_enabledObstacleType(GameplayModifiers/EnabledObstacleType value)
    // Offset: 0xB3E65C
    void set_enabledObstacleType(GlobalNamespace::GameplayModifiers::EnabledObstacleType value);
    // public System.Boolean get_noObstacles()
    // Offset: 0xB3E664
    bool get_noObstacles();
    // public System.Void set_noObstacles(System.Boolean value)
    // Offset: 0xB3E674
    void set_noObstacles(bool value);
    // public System.Boolean get_demoNoObstacles()
    // Offset: 0xB3E698
    bool get_demoNoObstacles();
    // public System.Void set_demoNoObstacles(System.Boolean value)
    // Offset: 0xB3E6A0
    void set_demoNoObstacles(bool value);
    // public System.Boolean get_fastNotes()
    // Offset: 0xB3E6AC
    bool get_fastNotes();
    // public System.Void set_fastNotes(System.Boolean value)
    // Offset: 0xB3E6B4
    void set_fastNotes(bool value);
    // public System.Boolean get_strictAngles()
    // Offset: 0xB3E6C0
    bool get_strictAngles();
    // public System.Void set_strictAngles(System.Boolean value)
    // Offset: 0xB3E6C8
    void set_strictAngles(bool value);
    // public System.Boolean get_disappearingArrows()
    // Offset: 0xB3E6D4
    bool get_disappearingArrows();
    // public System.Void set_disappearingArrows(System.Boolean value)
    // Offset: 0xB3E6DC
    void set_disappearingArrows(bool value);
    // public System.Boolean get_ghostNotes()
    // Offset: 0xB3E6E8
    bool get_ghostNotes();
    // public System.Void set_ghostNotes(System.Boolean value)
    // Offset: 0xB3E6F0
    void set_ghostNotes(bool value);
    // public System.Boolean get_noBombs()
    // Offset: 0xB3E6FC
    bool get_noBombs();
    // public System.Void set_noBombs(System.Boolean value)
    // Offset: 0xB3E704
    void set_noBombs(bool value);
    // public GameplayModifiers/SongSpeed get_songSpeed()
    // Offset: 0xB3E710
    GlobalNamespace::GameplayModifiers::SongSpeed get_songSpeed();
    // public System.Void set_songSpeed(GameplayModifiers/SongSpeed value)
    // Offset: 0xB3E718
    void set_songSpeed(GlobalNamespace::GameplayModifiers::SongSpeed value);
    // public System.Single get_songSpeedMul()
    // Offset: 0xB3E190
    float get_songSpeedMul();
    // public System.Boolean get_noArrows()
    // Offset: 0xB3E720
    bool get_noArrows();
    // public System.Void set_noArrows(System.Boolean value)
    // Offset: 0xB3E728
    void set_noArrows(bool value);
    // static public GameplayModifiers get_defaultModifiers()
    // Offset: 0xB3E734
    static GlobalNamespace::GameplayModifiers* get_defaultModifiers();
    // public System.Void .ctor(GameplayModifiers gameplayModifiers)
    // Offset: 0xB3E828
    static GameplayModifiers* New_ctor(GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // public System.Void ResetToDefault()
    // Offset: 0xB3E80C
    void ResetToDefault();
    // public System.Boolean IsWithoutModifiers()
    // Offset: 0xB3E8C4
    bool IsWithoutModifiers();
    // public System.Void .ctor()
    // Offset: 0xB3E7D0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static GameplayModifiers* New_ctor();
  }; // GameplayModifiers
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers*, "", "GameplayModifiers");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers::EnabledObstacleType, "", "GameplayModifiers/EnabledObstacleType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers::EnergyType, "", "GameplayModifiers/EnergyType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers::SongSpeed, "", "GameplayModifiers/SongSpeed");
#pragma pack(pop)
