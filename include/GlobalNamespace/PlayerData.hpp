// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:12 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: PracticeSettings
  class PracticeSettings;
  // Forward declaring type: PlayerAllOverallStatsData
  class PlayerAllOverallStatsData;
  // Forward declaring type: PlayerLevelStatsData
  class PlayerLevelStatsData;
  // Forward declaring type: PlayerMissionStatsData
  class PlayerMissionStatsData;
  // Forward declaring type: ColorSchemesSettings
  class ColorSchemesSettings;
  // Forward declaring type: OverrideEnvironmentSettings
  class OverrideEnvironmentSettings;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: MissionHelpSO
  class MissionHelpSO;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PlayerData
  class PlayerData : public ::Il2CppObject {
    public:
    // static field const value: static public System.Int32 kMaxGuestPlayers
    static constexpr const int kMaxGuestPlayers = 10;
    // Get static field: static public System.Int32 kMaxGuestPlayers
    static int _get_kMaxGuestPlayers();
    // Set static field: static public System.Int32 kMaxGuestPlayers
    static void _set_kMaxGuestPlayers(int value);
    // private System.String <playerId>k__BackingField
    // Offset: 0x10
    ::Il2CppString* playerId;
    // private System.String <playerName>k__BackingField
    // Offset: 0x18
    ::Il2CppString* playerName;
    // private System.Boolean <shouldShowTutorialPrompt>k__BackingField
    // Offset: 0x20
    bool shouldShowTutorialPrompt;
    // private System.Boolean <shouldShow360Warning>k__BackingField
    // Offset: 0x21
    bool shouldShow360Warning;
    // private System.Boolean <agreedToEula>k__BackingField
    // Offset: 0x22
    bool agreedToEula;
    // private BeatmapDifficulty <lastSelectedBeatmapDifficulty>k__BackingField
    // Offset: 0x24
    GlobalNamespace::BeatmapDifficulty lastSelectedBeatmapDifficulty;
    // private BeatmapCharacteristicSO <lastSelectedBeatmapCharacteristic>k__BackingField
    // Offset: 0x28
    GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic;
    // private GameplayModifiers <gameplayModifiers>k__BackingField
    // Offset: 0x30
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // private PlayerSpecificSettings <playerSpecificSettings>k__BackingField
    // Offset: 0x38
    GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings;
    // private PracticeSettings <practiceSettings>k__BackingField
    // Offset: 0x40
    GlobalNamespace::PracticeSettings* practiceSettings;
    // private PlayerAllOverallStatsData <playerAllOverallStatsData>k__BackingField
    // Offset: 0x48
    GlobalNamespace::PlayerAllOverallStatsData* playerAllOverallStatsData;
    // private System.Collections.Generic.List`1<PlayerLevelStatsData> <levelsStatsData>k__BackingField
    // Offset: 0x50
    System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* levelsStatsData;
    // private System.Collections.Generic.List`1<PlayerMissionStatsData> <missionsStatsData>k__BackingField
    // Offset: 0x58
    System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* missionsStatsData;
    // private System.Collections.Generic.List`1<System.String> <showedMissionHelpIds>k__BackingField
    // Offset: 0x60
    System::Collections::Generic::List_1<::Il2CppString*>* showedMissionHelpIds;
    // private System.Collections.Generic.List`1<System.String> <guestPlayerNames>k__BackingField
    // Offset: 0x68
    System::Collections::Generic::List_1<::Il2CppString*>* guestPlayerNames;
    // private ColorSchemesSettings <colorSchemesSettings>k__BackingField
    // Offset: 0x70
    GlobalNamespace::ColorSchemesSettings* colorSchemesSettings;
    // private OverrideEnvironmentSettings <overrideEnvironmentSettings>k__BackingField
    // Offset: 0x78
    GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings;
    // private System.Collections.Generic.HashSet`1<System.String> <favoritesLevelIds>k__BackingField
    // Offset: 0x80
    System::Collections::Generic::HashSet_1<::Il2CppString*>* favoritesLevelIds;
    // private System.Action favoriteLevelsSetDidChangeEvent
    // Offset: 0x88
    System::Action* favoriteLevelsSetDidChangeEvent;
    // public System.String get_playerId()
    // Offset: 0xBC4EC0
    ::Il2CppString* get_playerId();
    // private System.Void set_playerId(System.String value)
    // Offset: 0xBC4EC8
    void set_playerId(::Il2CppString* value);
    // public System.String get_playerName()
    // Offset: 0xBC4ED0
    ::Il2CppString* get_playerName();
    // private System.Void set_playerName(System.String value)
    // Offset: 0xBC4ED8
    void set_playerName(::Il2CppString* value);
    // public System.Boolean get_shouldShowTutorialPrompt()
    // Offset: 0xBC4EE0
    bool get_shouldShowTutorialPrompt();
    // private System.Void set_shouldShowTutorialPrompt(System.Boolean value)
    // Offset: 0xBC4EE8
    void set_shouldShowTutorialPrompt(bool value);
    // public System.Boolean get_shouldShow360Warning()
    // Offset: 0xBC4EF4
    bool get_shouldShow360Warning();
    // private System.Void set_shouldShow360Warning(System.Boolean value)
    // Offset: 0xBC4EFC
    void set_shouldShow360Warning(bool value);
    // public System.Boolean get_agreedToEula()
    // Offset: 0xBC4F08
    bool get_agreedToEula();
    // private System.Void set_agreedToEula(System.Boolean value)
    // Offset: 0xBC4F10
    void set_agreedToEula(bool value);
    // public BeatmapDifficulty get_lastSelectedBeatmapDifficulty()
    // Offset: 0xBC4F1C
    GlobalNamespace::BeatmapDifficulty get_lastSelectedBeatmapDifficulty();
    // private System.Void set_lastSelectedBeatmapDifficulty(BeatmapDifficulty value)
    // Offset: 0xBC4F24
    void set_lastSelectedBeatmapDifficulty(GlobalNamespace::BeatmapDifficulty value);
    // public BeatmapCharacteristicSO get_lastSelectedBeatmapCharacteristic()
    // Offset: 0xBC4F2C
    GlobalNamespace::BeatmapCharacteristicSO* get_lastSelectedBeatmapCharacteristic();
    // private System.Void set_lastSelectedBeatmapCharacteristic(BeatmapCharacteristicSO value)
    // Offset: 0xBC4F34
    void set_lastSelectedBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value);
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0xBC4F3C
    GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // private System.Void set_gameplayModifiers(GameplayModifiers value)
    // Offset: 0xBC4F44
    void set_gameplayModifiers(GlobalNamespace::GameplayModifiers* value);
    // public PlayerSpecificSettings get_playerSpecificSettings()
    // Offset: 0xBC4F4C
    GlobalNamespace::PlayerSpecificSettings* get_playerSpecificSettings();
    // private System.Void set_playerSpecificSettings(PlayerSpecificSettings value)
    // Offset: 0xBC4F54
    void set_playerSpecificSettings(GlobalNamespace::PlayerSpecificSettings* value);
    // public PracticeSettings get_practiceSettings()
    // Offset: 0xBC4F5C
    GlobalNamespace::PracticeSettings* get_practiceSettings();
    // private System.Void set_practiceSettings(PracticeSettings value)
    // Offset: 0xBC4F64
    void set_practiceSettings(GlobalNamespace::PracticeSettings* value);
    // public PlayerAllOverallStatsData get_playerAllOverallStatsData()
    // Offset: 0xBC4F6C
    GlobalNamespace::PlayerAllOverallStatsData* get_playerAllOverallStatsData();
    // private System.Void set_playerAllOverallStatsData(PlayerAllOverallStatsData value)
    // Offset: 0xBC4F74
    void set_playerAllOverallStatsData(GlobalNamespace::PlayerAllOverallStatsData* value);
    // public System.Collections.Generic.List`1<PlayerLevelStatsData> get_levelsStatsData()
    // Offset: 0xBC4F7C
    System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* get_levelsStatsData();
    // private System.Void set_levelsStatsData(System.Collections.Generic.List`1<PlayerLevelStatsData> value)
    // Offset: 0xBC4F84
    void set_levelsStatsData(System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* value);
    // public System.Collections.Generic.List`1<PlayerMissionStatsData> get_missionsStatsData()
    // Offset: 0xBC4F8C
    System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* get_missionsStatsData();
    // private System.Void set_missionsStatsData(System.Collections.Generic.List`1<PlayerMissionStatsData> value)
    // Offset: 0xBC4F94
    void set_missionsStatsData(System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* value);
    // public System.Collections.Generic.List`1<System.String> get_showedMissionHelpIds()
    // Offset: 0xBC4F9C
    System::Collections::Generic::List_1<::Il2CppString*>* get_showedMissionHelpIds();
    // private System.Void set_showedMissionHelpIds(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0xBC4FA4
    void set_showedMissionHelpIds(System::Collections::Generic::List_1<::Il2CppString*>* value);
    // public System.Collections.Generic.List`1<System.String> get_guestPlayerNames()
    // Offset: 0xBC4FAC
    System::Collections::Generic::List_1<::Il2CppString*>* get_guestPlayerNames();
    // private System.Void set_guestPlayerNames(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0xBC4FB4
    void set_guestPlayerNames(System::Collections::Generic::List_1<::Il2CppString*>* value);
    // public ColorSchemesSettings get_colorSchemesSettings()
    // Offset: 0xBC4FBC
    GlobalNamespace::ColorSchemesSettings* get_colorSchemesSettings();
    // private System.Void set_colorSchemesSettings(ColorSchemesSettings value)
    // Offset: 0xBC4FC4
    void set_colorSchemesSettings(GlobalNamespace::ColorSchemesSettings* value);
    // public OverrideEnvironmentSettings get_overrideEnvironmentSettings()
    // Offset: 0xBC4FCC
    GlobalNamespace::OverrideEnvironmentSettings* get_overrideEnvironmentSettings();
    // private System.Void set_overrideEnvironmentSettings(OverrideEnvironmentSettings value)
    // Offset: 0xBC4FD4
    void set_overrideEnvironmentSettings(GlobalNamespace::OverrideEnvironmentSettings* value);
    // public System.Collections.Generic.HashSet`1<System.String> get_favoritesLevelIds()
    // Offset: 0xBC4FDC
    System::Collections::Generic::HashSet_1<::Il2CppString*>* get_favoritesLevelIds();
    // private System.Void set_favoritesLevelIds(System.Collections.Generic.HashSet`1<System.String> value)
    // Offset: 0xBC4FE4
    void set_favoritesLevelIds(System::Collections::Generic::HashSet_1<::Il2CppString*>* value);
    // public System.Void add_favoriteLevelsSetDidChangeEvent(System.Action value)
    // Offset: 0xBC4FEC
    void add_favoriteLevelsSetDidChangeEvent(System::Action* value);
    // public System.Void remove_favoriteLevelsSetDidChangeEvent(System.Action value)
    // Offset: 0xBC5090
    void remove_favoriteLevelsSetDidChangeEvent(System::Action* value);
    // public System.Void .ctor(System.String playerId, System.String playerName, BeatmapCharacteristicSO lastSelectedBeatmapCharacteristic, ColorSchemesSettings colorSchemesSettings, OverrideEnvironmentSettings overrideEnvironmentSettings)
    // Offset: 0xBC5134
    static PlayerData* New_ctor(::Il2CppString* playerId, ::Il2CppString* playerName, GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic, GlobalNamespace::ColorSchemesSettings* colorSchemesSettings, GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings);
    // public System.Void .ctor(System.String playerId, System.String playerName, System.Boolean shouldShowTutorialPrompt, System.Boolean shouldShow360Warning, System.Boolean agreedToEula, BeatmapDifficulty lastSelectedBeatmapDifficulty, BeatmapCharacteristicSO lastSelectedBeatmapCharacteristic, GameplayModifiers gameplayModifiers, PlayerSpecificSettings playerSpecificSettings, PracticeSettings practiceSettings, PlayerAllOverallStatsData playerAllOverallStatsData, System.Collections.Generic.List`1<PlayerLevelStatsData> levelsStatsData, System.Collections.Generic.List`1<PlayerMissionStatsData> missionsStatsData, System.Collections.Generic.List`1<System.String> showedMissionHelpIds, System.Collections.Generic.List`1<System.String> guestPlayerNames, ColorSchemesSettings colorSchemesSettings, OverrideEnvironmentSettings overrideEnvironmentSettings, System.Collections.Generic.List`1<System.String> favoritesLevelIds)
    // Offset: 0xBC52B4
    static PlayerData* New_ctor(::Il2CppString* playerId, ::Il2CppString* playerName, bool shouldShowTutorialPrompt, bool shouldShow360Warning, bool agreedToEula, GlobalNamespace::BeatmapDifficulty lastSelectedBeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic, GlobalNamespace::GameplayModifiers* gameplayModifiers, GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings, GlobalNamespace::PracticeSettings* practiceSettings, GlobalNamespace::PlayerAllOverallStatsData* playerAllOverallStatsData, System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* levelsStatsData, System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* missionsStatsData, System::Collections::Generic::List_1<::Il2CppString*>* showedMissionHelpIds, System::Collections::Generic::List_1<::Il2CppString*>* guestPlayerNames, GlobalNamespace::ColorSchemesSettings* colorSchemesSettings, GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings, System::Collections::Generic::List_1<::Il2CppString*>* favoritesLevelIds);
    // public PlayerLevelStatsData GetPlayerLevelStatsData(IDifficultyBeatmap difficultyBeatmap)
    // Offset: 0xBC54C0
    GlobalNamespace::PlayerLevelStatsData* GetPlayerLevelStatsData(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap);
    // public PlayerLevelStatsData GetPlayerLevelStatsData(System.String levelId, BeatmapDifficulty difficulty, BeatmapCharacteristicSO beatmapCharacteristic)
    // Offset: 0xBC573C
    GlobalNamespace::PlayerLevelStatsData* GetPlayerLevelStatsData(::Il2CppString* levelId, GlobalNamespace::BeatmapDifficulty difficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic);
    // public PlayerMissionStatsData GetPlayerMissionStatsData(System.String missionId)
    // Offset: 0xBC5960
    GlobalNamespace::PlayerMissionStatsData* GetPlayerMissionStatsData(::Il2CppString* missionId);
    // public System.Boolean WasMissionHelpShowed(MissionHelpSO missionHelp)
    // Offset: 0xBC5B20
    bool WasMissionHelpShowed(GlobalNamespace::MissionHelpSO* missionHelp);
    // public System.Void MissionHelpWasShowed(MissionHelpSO missionHelp)
    // Offset: 0xBC5B8C
    void MissionHelpWasShowed(GlobalNamespace::MissionHelpSO* missionHelp);
    // public System.Boolean IsLevelUserFavorite(IPreviewBeatmapLevel level)
    // Offset: 0xBC5C28
    bool IsLevelUserFavorite(GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void AddLevelToFavorites(IPreviewBeatmapLevel level)
    // Offset: 0xBC5D00
    void AddLevelToFavorites(GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void RemoveLevelFromFavorites(IPreviewBeatmapLevel level)
    // Offset: 0xBC5E08
    void RemoveLevelFromFavorites(GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void MarkTutorialAsShown()
    // Offset: 0xBC5F10
    void MarkTutorialAsShown();
    // public System.Void Mark360WarningAsShown()
    // Offset: 0xBC5F18
    void Mark360WarningAsShown();
    // public System.Void MarkEulaAsAgreed()
    // Offset: 0xBC5F20
    void MarkEulaAsAgreed();
    // public System.Void AddGuestPlayerName(System.String playerName)
    // Offset: 0xBC5F2C
    void AddGuestPlayerName(::Il2CppString* playerName);
    // public System.Void DeleteAllGuestPlayers()
    // Offset: 0xBC6084
    void DeleteAllGuestPlayers();
    // public System.Void SetLastSelectedBeatmapDifficulty(BeatmapDifficulty beatmapDifficulty)
    // Offset: 0xBC60DC
    void SetLastSelectedBeatmapDifficulty(GlobalNamespace::BeatmapDifficulty beatmapDifficulty);
    // public System.Void SetLastSelectedBeatmapCharacteristic(BeatmapCharacteristicSO beatmapCharacteristic)
    // Offset: 0xBC60E4
    void SetLastSelectedBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic);
  }; // PlayerData
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerData*, "", "PlayerData");
#pragma pack(pop)
