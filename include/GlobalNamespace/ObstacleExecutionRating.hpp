// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:11 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: BeatmapObjectExecutionRating
#include "GlobalNamespace/BeatmapObjectExecutionRating.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Rating because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: ObstacleExecutionRating
  class ObstacleExecutionRating : public GlobalNamespace::BeatmapObjectExecutionRating {
    public:
    // Nested type: GlobalNamespace::ObstacleExecutionRating::Rating
    struct Rating;
    // Autogenerated type: ObstacleExecutionRating/Rating
    struct Rating : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public ObstacleExecutionRating/Rating OK
      static constexpr const int OK = 0;
      // Get static field: static public ObstacleExecutionRating/Rating OK
      static GlobalNamespace::ObstacleExecutionRating::Rating _get_OK();
      // Set static field: static public ObstacleExecutionRating/Rating OK
      static void _set_OK(GlobalNamespace::ObstacleExecutionRating::Rating value);
      // static field const value: static public ObstacleExecutionRating/Rating NotGood
      static constexpr const int NotGood = 1;
      // Get static field: static public ObstacleExecutionRating/Rating NotGood
      static GlobalNamespace::ObstacleExecutionRating::Rating _get_NotGood();
      // Set static field: static public ObstacleExecutionRating/Rating NotGood
      static void _set_NotGood(GlobalNamespace::ObstacleExecutionRating::Rating value);
      // Creating value type constructor for type: Rating
      Rating(int value_ = {}) : value{value_} {}
    }; // ObstacleExecutionRating/Rating
    // private ObstacleExecutionRating/Rating <rating>k__BackingField
    // Offset: 0x18
    GlobalNamespace::ObstacleExecutionRating::Rating rating;
    // public ObstacleExecutionRating/Rating get_rating()
    // Offset: 0xC1F67C
    GlobalNamespace::ObstacleExecutionRating::Rating get_rating();
    // public System.Void set_rating(ObstacleExecutionRating/Rating value)
    // Offset: 0xC1F684
    void set_rating(GlobalNamespace::ObstacleExecutionRating::Rating value);
    // public System.Void .ctor(System.Single time, ObstacleExecutionRating/Rating rating)
    // Offset: 0xC1F68C
    static ObstacleExecutionRating* New_ctor(float time, GlobalNamespace::ObstacleExecutionRating::Rating rating);
  }; // ObstacleExecutionRating
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ObstacleExecutionRating*, "", "ObstacleExecutionRating");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ObstacleExecutionRating::Rating, "", "ObstacleExecutionRating/Rating");
#pragma pack(pop)
