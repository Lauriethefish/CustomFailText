// Autogenerated from CppHeaderCreator on 7/24/2020 4:00:03 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: VRPlatformHelper
#include "GlobalNamespace/VRPlatformHelper.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: TrackedDevicePose_t
  struct TrackedDevicePose_t;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: VRControllerManufacturerName because it is already included!
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Skipping declaration: XRNode because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: OpenVRHelper
  class OpenVRHelper : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OpenVRHelper::VRControllerManufacturerName
    struct VRControllerManufacturerName;
    // Autogenerated type: OpenVRHelper/VRControllerManufacturerName
    struct VRControllerManufacturerName : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName HTC
      static constexpr const int HTC = 0;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName HTC
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_HTC();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName HTC
      static void _set_HTC(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Oculus
      static constexpr const int Oculus = 1;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Oculus();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
      static void _set_Oculus(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Valve
      static constexpr const int Valve = 2;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Valve
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Valve();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Valve
      static void _set_Valve(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Unknown
      static constexpr const int Unknown = 3;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Unknown();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
      static void _set_Unknown(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Undefined
      static constexpr const int Undefined = 4;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Undefined();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
      static void _set_Undefined(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // Creating value type constructor for type: VRControllerManufacturerName
      VRControllerManufacturerName(int value_ = {}) : value{value_} {}
    }; // OpenVRHelper/VRControllerManufacturerName
    // private System.Action inputFocusWasCapturedEvent
    // Offset: 0x10
    System::Action* inputFocusWasCapturedEvent;
    // private System.Action inputFocusWasReleasedEvent
    // Offset: 0x18
    System::Action* inputFocusWasReleasedEvent;
    // private System.Action dashboardWasActivatedEvent
    // Offset: 0x20
    System::Action* dashboardWasActivatedEvent;
    // private System.Action dashboardWasDectivatedEvent
    // Offset: 0x28
    System::Action* dashboardWasDectivatedEvent;
    // private OpenVRHelper/VRControllerManufacturerName _vrControllerManufacturerName
    // Offset: 0x30
    GlobalNamespace::OpenVRHelper::VRControllerManufacturerName vrControllerManufacturerName;
    // private UnityEngine.EventSystems.EventSystem _disabledEventSystem
    // Offset: 0x38
    UnityEngine::EventSystems::EventSystem* disabledEventSystem;
    // private Valve.VR.TrackedDevicePose_t[] _poses
    // Offset: 0x40
    ::Array<Valve::VR::TrackedDevicePose_t>* poses;
    // private Valve.VR.TrackedDevicePose_t[] _gamePoses
    // Offset: 0x48
    ::Array<Valve::VR::TrackedDevicePose_t>* gamePoses;
    // public System.Void add_inputFocusWasCapturedEvent(System.Action value)
    // Offset: 0xCA3E50
    void add_inputFocusWasCapturedEvent(System::Action* value);
    // public System.Void remove_inputFocusWasCapturedEvent(System.Action value)
    // Offset: 0xCA3EF4
    void remove_inputFocusWasCapturedEvent(System::Action* value);
    // public System.Void add_inputFocusWasReleasedEvent(System.Action value)
    // Offset: 0xCA3F98
    void add_inputFocusWasReleasedEvent(System::Action* value);
    // public System.Void remove_inputFocusWasReleasedEvent(System.Action value)
    // Offset: 0xCA403C
    void remove_inputFocusWasReleasedEvent(System::Action* value);
    // public System.Void add_dashboardWasActivatedEvent(System.Action value)
    // Offset: 0xCA40E0
    void add_dashboardWasActivatedEvent(System::Action* value);
    // public System.Void remove_dashboardWasActivatedEvent(System.Action value)
    // Offset: 0xCA4184
    void remove_dashboardWasActivatedEvent(System::Action* value);
    // public System.Void add_dashboardWasDectivatedEvent(System.Action value)
    // Offset: 0xCA4228
    void add_dashboardWasDectivatedEvent(System::Action* value);
    // public System.Void remove_dashboardWasDectivatedEvent(System.Action value)
    // Offset: 0xCA42CC
    void remove_dashboardWasDectivatedEvent(System::Action* value);
    // public OpenVRHelper/VRControllerManufacturerName get_vrControllerManufacturerName()
    // Offset: 0xCA4370
    GlobalNamespace::OpenVRHelper::VRControllerManufacturerName get_vrControllerManufacturerName();
    // private System.Void DisableEventSystem()
    // Offset: 0xCA4630
    void DisableEventSystem();
    // private System.Void EnableEventSystem()
    // Offset: 0xCA476C
    void EnableEventSystem();
    // private System.Void OnBeforeRender()
    // Offset: 0xCA4814
    void OnBeforeRender();
    // public System.Void Update()
    // Offset: 0xCA4894
    void Update();
    // public System.Void TriggerHapticPulse(UnityEngine.XR.XRNode node, System.Single strength)
    // Offset: 0xCA4ADC
    void TriggerHapticPulse(UnityEngine::XR::XRNode node, float strength);
    // public VRPlatformHelper/VRNodeTransform GetNodePos(System.Int32 nodeIndex)
    // Offset: 0xCA4BA4
    GlobalNamespace::VRPlatformHelper::VRNodeTransform GetNodePos(int nodeIndex);
    // public System.Void .ctor()
    // Offset: 0xCA4568
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static OpenVRHelper* New_ctor();
  }; // OpenVRHelper
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OpenVRHelper*, "", "OpenVRHelper");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName, "", "OpenVRHelper/VRControllerManufacturerName");
#pragma pack(pop)
