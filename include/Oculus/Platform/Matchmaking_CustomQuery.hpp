// Autogenerated from CppHeaderCreator on 7/24/2020 4:01:01 PM
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: Oculus.Platform.Matchmaking
#include "Oculus/Platform/Matchmaking.hpp"
#include "utils/il2cpp-utils.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Autogenerated type: Oculus.Platform.Matchmaking/CustomQuery
  class Matchmaking::CustomQuery : public ::Il2CppObject {
    public:
    // Nested type: Oculus::Platform::Matchmaking::CustomQuery::Criterion
    struct Criterion;
    // public System.Collections.Generic.Dictionary`2<System.String,System.Object> data
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* data;
    // public Oculus.Platform.Matchmaking/CustomQuery/Criterion[] criteria
    // Offset: 0x18
    ::Array<Oculus::Platform::Matchmaking::CustomQuery::Criterion>* criteria;
    // public System.IntPtr ToUnmanaged()
    // Offset: 0xE846B0
    System::IntPtr ToUnmanaged();
    // public System.Void .ctor()
    // Offset: 0xE85B90
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Matchmaking::CustomQuery* New_ctor();
  }; // Oculus.Platform.Matchmaking/CustomQuery
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::Matchmaking::CustomQuery*, "Oculus.Platform", "Matchmaking/CustomQuery");
#pragma pack(pop)
